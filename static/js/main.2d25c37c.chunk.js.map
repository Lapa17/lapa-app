{"version":3,"sources":["components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Forms/MessageForm.tsx","utilits/selectors/dialogs-selector.ts","components/Dialogs/Dialogs.tsx","components/NavbarLeft/Navigations/Navigations.module.css","components/NavbarRight/Friend/Friend.module.css","components/NavbarRight/NavbarRight.module.css","components/Header/Logo/Logo.module.css","components/Header/Search/Search.module.css","components/Header/Widgets/Widgets.module.css","components/Profile/ProfileInfo/Avatar/Avatar.module.css","components/Profile/Profile.module.css","redux/profile-reducer.ts","redux/navbar-right-reduser.ts","redux/redux-store.tsx","redux/auth-reducer.ts","components/NavbarLeft/Navigations/Navigation/Navigation.tsx","components/NavbarLeft/Navigations/Navigations.tsx","components/NavbarLeft/NavbarLeft.tsx","components/NavbarRight/Friend/Friend.tsx","components/NavbarRight/NavbarRight.tsx","assets/images/loader.gif","components/common/Preloader/Preloader.tsx","components/common/Paginator/Paginator.tsx","assets/images/user.png","components/Users/User.tsx","components/Users/Users.tsx","utilits/selectors/user-selector.ts","components/Users/UsersContainer.tsx","assets/images/lapa-logo.png","components/Header/Logo/Logo.tsx","components/Header/Search/Search.tsx","components/Header/Widgets/Widget/Widget.tsx","components/Header/Widgets/Widgets.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","components/Profile/Posts/Post/Post.tsx","components/Forms/PostForm.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Posts/PostsContainer.tsx","components/Profile/ProfileInfo/Avatar/Avatar.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","App.tsx","reportWebVitals.ts","index.tsx","api/usersAPI.ts","redux/users-reducer.ts","api/profileAPI.ts","redux/login-reducer.ts","utilits/selectors/profile-selector.ts","utilits/validations/validationScheme.ts","api/authAPI.ts","components/Profile/Posts/Posts.module.css","components/Dialogs/Dialogs.module.css","redux/dialogs-reducer.ts","redux/app-reducer.ts","components/NavbarLeft/Navigations/Navigation/Navigation.module.css","components/common/Paginator/Paginator.module.css","components/Users/Users.module.css","components/Profile/Posts/Post/Post.module.css","components/Header/Header.module.css","components/Dialogs/Dialog/Dialog.module.css"],"names":["Dialog","props","className","s","dialog","activeClassName","active","to","id","name","Message","message","MessageForm","dispatch","useDispatch","initialValues","validateOnBlur","validationSchema","messageValidationSchema","onSubmit","values","setSubmitting","addMessage","isSubmitting","errors","touched","dirty","isValid","as","placeholder","component","type","disabled","selectDialogs","state","dialogsPage","dialogs","selectMessages","messages","Dialogs","isAuth","useAppSelector","selectIsAuth","dialogsElements","map","messageElements","dialogItems","item","module","exports","ADD_POST","DELETE_POST","SET_USER_PROFILE","SET_STATUS","UPDATE_PHOTO","UPDATE_PROFILE","setStatus","status","updatePhoto","photo","updateProfileAC","profile","initialProfileState","posts","v1","postMessage","likes","aboutMe","userId","fullName","photos","small","large","contacts","lookingForAJobDescription","lookingForAJob","profileReducer","action","newPost","post","filter","postId","getProfile","profileUserId","a","profileAPI","response","data","getStatus","getProfileStatus","updateStatus","resultCode","updateLargePhoto","addPost","addPostAC","updateProfile","getState","auth","initialNavbarState","friends","navbarRightReduser","reducers","combineReducers","profilePage","dialogsReducer","navbarRight","users","usersReducer","authReducer","login","loginReducer","app","appReduser","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","useSelector","SET_AUTH_DATA","SET_USER_PHOTO","SET_AUTH_CHANGE","GET_LOGIN_ERROR","setAuthData","email","setUserPhoto","setAuthChange","errorMessage","authMe","authAPI","getAuth","setAuth","password","rememberMe","captcha","logining","res","getCaptchaUrl","setLogOut","setUnlogging","Navigation","link","itemLink","menu","Navigations","nav","NavbarLeft","Friend","NavbarRight","friendList","friend","Preloader","src","loader","Paginator","totalItemsCounter","pageSize","currentPage","onPageClick","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","useEffect","onClick","p","cn","selected","page","User","user","followInProgress","getUnFollow","getFollow","wrapper","items","userPhoto","followed","some","info","Users","totalUserCounter","isFetching","toggleIsFollowingProgress","u","getUser","getPageSize","getTotalUserCounter","getCurrentPage","getIsFetchingData","getFollowInProgressData","UsersClassContainer","getPage","this","getUsers","React","Component","UsersContainer","connect","setCurrentPage","setTotalUsersCount","Logo","logo","alt","Search","search","Widget","Widgets","widgets","smallPhoto","Header","header","HeaderContainer","captchaUrl","setLoginData","useForm","resolver","yupResolver","loginningValidationSchema","register","handleSubmit","formState","loginRequest","defaultValue","required","pattern","style","width","Post","memo","postLikes","PostForm","postValidationSchema","Posts","myPost","postsElements","m","postHeader","itemWrapper","PostsContainer","Avatar","avatarWrapper","imgAdress","ProfileStatusWithHooks","editMode","setEditMode","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","ProfileData","github","setProfile","onValueChange","checked","href","target","ProfileInfo","files","Profile","selectProfile","selectProfileStatus","mainUserId","selectMainUserId","useParams","App","catchAllUnhandledErrors","event","alert","console","error","initializedTC","addEventListener","removeEventListener","initialized","fallback","path","render","exact","withRouter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","instance","axios","create","withCredentials","baseURL","headers","usersAPI","get","setFollow","setUnFollow","delete","IS_FOLLOWING","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialUsersState","userID","follow","totalCount","isFollowing","setUsers","toggleIsFetching","followUnfollow","apiMethod","bind","put","image","formData","FormData","append","SET_LOGIN","SET_CAPTCHA","getCaptcha","url","yup","shape","max","min","params","ADD_MESSAGE","initialDialogState","newMessage","SET_INITIALIZED","initialAppState"],"mappings":"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","file":"static/js/main.2d25c37c.chunk.js","sourcesContent":["import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { DialogsDataType} from '../../../redux/store'\r\nimport s from './Dialog.module.css'\r\n\r\nconst Dialog: React.FC<DialogsDataType> = (props) => {\r\n\r\n\r\n    return (\r\n            <div className={s.dialog} key={props.id}>\r\n                <NavLink activeClassName={s.active} to={'/dialogs/'+ props.id}>{props.name}</NavLink>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React from 'react'\r\nimport { MessagesDataType } from '../../../redux/store';\r\nimport s from './Message.module.css'\r\n\r\n\r\nconst Message:React.FC<MessagesDataType> = (props) => {\r\n\r\n\r\n    return (\r\n            <div className={s.message}>{props.message}</div>\r\n\r\n    )\r\n}\r\n\r\nexport default Message;","import {ErrorMessage, Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport React from \"react\";\r\nimport {messageValidationSchema} from \"../../utilits/validations/validationScheme\";\r\nimport {addMessage, addMessageTC} from \"../../redux/dialogs-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype MessageFormValueType = {\r\n    message: string\r\n}\r\n\r\nexport const MessageForm = () => {\r\n    const dispatch = useDispatch()\r\n    const formSubmit = (values: MessageFormValueType, {setSubmitting}: FormikHelpers<{ message: string; }>) => {\r\n        dispatch(addMessage(values.message))\r\n        setSubmitting(false);\r\n\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{message: ''}}\r\n            validateOnBlur\r\n            validationSchema={messageValidationSchema}\r\n            onSubmit={formSubmit}\r\n        >\r\n            {({isSubmitting,\r\n                  errors,\r\n                  touched,\r\n                  dirty,\r\n                  isValid,}) => (\r\n                <Form>\r\n                    <Field name=\"message\" as=\"textarea\" className=\"form-textarea\" placeholder='Enter a message...'/>\r\n                    {touched.message && errors.message && <ErrorMessage name=\"message\" component=\"div\" />}\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Send\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}","import {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {createSelector} from 'reselect'\r\n\r\nexport const selectDialogs = (state:AppRootStateType)=> {\r\n    return state.dialogsPage.dialogs\r\n}\r\n\r\nexport const selectMessages = (state:AppRootStateType)=> {\r\n    return state.dialogsPage.messages\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport Dialog from './Dialog/Dialog'\r\nimport s from './Dialogs.module.css'\r\nimport Message from './Message/Message'\r\nimport {MessageForm} from \"../Forms/MessageForm\";\r\nimport {useAppSelector} from \"../../redux/redux-store\";\r\nimport {selectDialogs, selectMessages} from \"../../utilits/selectors/dialogs-selector\";\r\nimport {selectIsAuth} from \"../../utilits/selectors/profile-selector\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nconst Dialogs = () => {\r\n\r\n    const isAuth = useAppSelector(selectIsAuth)\r\n    const dialogs = useAppSelector(selectDialogs)\r\n    const messages = useAppSelector(selectMessages)\r\n\r\n    const dialogsElements = dialogs.map((dialogs) => <Dialog key={dialogs.id} id={dialogs.id} name={dialogs.name} />)\r\n    const messageElements = messages.map((message) => <Message key={message.id} message={message.message} id={message.id} />)\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageElements}\r\n            </div>\r\n            <div className={s.item}>\r\n                <MessageForm />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigations_nav__3iGlY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Friend_item__3OWRm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavbarRight_nav__6Tf45\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Logo_logo__1UPvB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"Search_search__UpuhL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"widgets\":\"Widgets_widgets__18IS7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatarWrapper\":\"Avatar_avatarWrapper__3-E3I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__3RTBF\"};","import { v1 } from \"uuid\"\r\nimport { PostsDataType } from \"./store\"\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, UpdateProfileType} from \"../api/profileAPI\";\r\nimport {ThunkType} from \"./redux-store\";\r\n\r\n\r\nexport type ProfileStateType = {\r\n    posts: Array<PostsDataType>;\r\n    profile: APIProfileType\r\n    status:string\r\n}\r\n\r\nexport type APIProfileType = {\r\n    aboutMe: string\r\n    userId: number\r\n    fullName: string\r\n    contacts:{\r\n        facebook?: string\r\n        github?: string\r\n        instagram?: string\r\n        mainLink?: string\r\n        twitter?: string\r\n        vk?: string\r\n        website?: string\r\n        youtube?: string\r\n    }\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nexport type UserProfileACType = ReturnType<typeof setUserProfile>\r\nexport type UserStatusACType = ReturnType<typeof setStatus>\r\nexport type AddPostACType = ReturnType<typeof addPostAC>\r\nexport type UpdatePhotoACType = ReturnType<typeof updatePhoto>\r\nexport type DeletePostACType = ReturnType<typeof deletePostAC>\r\nexport type UpdateProfileACType = ReturnType<typeof updateProfileAC>\r\n\r\nexport type ProfileActionType = UserProfileACType | AddPostACType | UserStatusACType | UpdatePhotoACType | DeletePostACType | UpdateProfileACType\r\n\r\nconst ADD_POST = 'lapa-app/profile-reducer/ADD-POST'\r\nconst DELETE_POST = 'lapa-app/profile-reducer/DELETE-POST'\r\nconst SET_USER_PROFILE = 'lapa-app/profile-reducer/SET_USER_PROFILE'\r\nconst SET_STATUS = 'lapa-app/profile-reducer/SET_STATUS'\r\nconst UPDATE_PHOTO = 'lapa-app/profile-reducer/UPDATE_PHOTO'\r\nconst UPDATE_PROFILE = 'lapa-app/profile-reducer/UPDATE_PROFILE'\r\n\r\nexport const addPostAC = (post:string) => ({ type: ADD_POST, post } as const)\r\nexport const deletePostAC = (postId:string) => ({ type: DELETE_POST, postId } as const)\r\nexport const setUserProfile = (profile: APIProfileType) => ({ type: SET_USER_PROFILE, profile } as const)\r\nexport const setStatus = (status: string) => ({ type: SET_STATUS, status } as const)\r\nexport const updatePhoto = (photo: File)=> ({ type: UPDATE_PHOTO, photo } as const)\r\nexport const updateProfileAC = (profile: UpdateProfileType)=> ({ type: UPDATE_PROFILE, profile } as const)\r\n\r\n\r\nconst initialProfileState:ProfileStateType = {\r\n    posts: [\r\n        { id: v1(), postMessage: \"Hi, I'm Pavel\", likes: 10 },\r\n        { id: v1(), postMessage: \"Let's go to learn a React\", likes: 9 },\r\n        { id: v1(), postMessage: \"Also we need improve our html/css skills\", likes: 11 },\r\n        { id: v1(), postMessage: \"Then we'll learn Redux\", likes: 22 }\r\n    ],\r\n    profile: { \r\n        aboutMe: '', \r\n        userId: 0, \r\n        fullName: '', \r\n        photos: { small: '', large: '' }, \r\n        contacts: {},\r\n        lookingForAJobDescription: '',\r\n        lookingForAJob: false,\r\n    },\r\n    status:'',\r\n}\r\n\r\nexport const profileReducer = (state = initialProfileState, action: ProfileActionType) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: v1(),\r\n                postMessage: action.post,\r\n                likes: 0\r\n            }\r\n            return { ...state, posts: [...state.posts, newPost]}\r\n        }\r\n        case DELETE_POST:{\r\n            return {...state, posts: state.posts.filter(post => post.id !== action.postId)}\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return { ...state, profile: action.profile }\r\n        }\r\n        case SET_STATUS: {\r\n            return { ...state, status: action.status  }\r\n        }\r\n        case UPDATE_PHOTO: {\r\n            return {...state, profile: {...state.profile, photos:action.photo}}\r\n        }\r\n        case UPDATE_PROFILE: {\r\n            return {...state, profile: {...state.profile, ...action.profile}}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getProfile = (profileUserId: number) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n        const response = await profileAPI.getProfile(profileUserId)\r\n            dispatch(setUserProfile(response.data))\r\n    }\r\n}\r\n\r\nexport const getStatus = (profileUserId: number) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n        const response = await profileAPI.getProfileStatus(profileUserId)\r\n            dispatch(setStatus(response.data))\r\n    }\r\n}\r\n\r\nexport const updateStatus = (status: string) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n       const response = await profileAPI.updateStatus(status)\r\n            if (response.data.resultCode === 0){\r\n                dispatch(setStatus(status))\r\n            }\r\n    }\r\n}\r\n\r\nexport const updateLargePhoto = (photo: File) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n        const response = await profileAPI.updatePhoto(photo)\r\n            if (response.data.resultCode === 0){\r\n                dispatch(updatePhoto(response.data.data.photos))\r\n            }\r\n    }\r\n}\r\n\r\nexport const addPost = (post: string) => {\r\n    return (dispatch: Dispatch<ProfileActionType>) => {\r\n                dispatch(addPostAC(post))\r\n    }\r\n}\r\n\r\nexport const updateProfile = (profile: UpdateProfileType):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await profileAPI.updateProfile(profile)\r\n        if (response.data.resultCode === 0){\r\n            dispatch(updateProfileAC(profile))\r\n            dispatch(getProfile(getState().auth.userId))\r\n        }\r\n    }\r\n}\r\n","import { v1 } from \"uuid\"\r\nimport { ActionType,NavbarRightType } from \"./store\"\r\n\r\n\r\nconst initialNavbarState = {\r\n    friends: [\r\n      { id: v1(), name: 'Pashka' },\r\n      { id: v1(), name: 'Maks' },\r\n      { id: v1(), name: 'Vlad' },\r\n      { id: v1(), name: 'Leha' }\r\n    ]\r\n  }\r\n\r\nconst navbarRightReduser = (state: NavbarRightType = initialNavbarState, action: ActionType) => {\r\n    \r\n        return state;\r\n    }\r\n\r\nexport default navbarRightReduser;","import {applyMiddleware, combineReducers, createStore, compose} from 'redux'\r\nimport {AuthActionType, authReducer} from './auth-reducer';\r\nimport dialogsReducer, {DialogsActionType} from './dialogs-reducer';\r\nimport navbarRightReduser from './navbar-right-reduser';\r\nimport {APIProfileType, ProfileActionType, profileReducer} from './profile-reducer';\r\nimport {UsersActionType, usersReducer} from './users-reducer';\r\nimport thunkMiddleware, { ThunkAction, ThunkDispatch } from 'redux-thunk'\r\nimport {LoginActionType, loginReducer} from './login-reducer';\r\nimport {AppActionType, appReduser} from './app-reducer';\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\n\r\n\r\nconst reducers = combineReducers({\r\n    profilePage:profileReducer,\r\n    dialogsPage:dialogsReducer,\r\n    navbarRight:navbarRightReduser,\r\n    users:usersReducer,\r\n    auth:authReducer,\r\n    login:loginReducer,\r\n    app: appReduser\r\n})\r\n\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers,composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n  ));\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>\r\n\r\nexport type GeneralAppActionType = AppActionType\r\n    | AuthActionType\r\n    | ProfileActionType\r\n    | DialogsActionType\r\n    | LoginActionType\r\n    | UsersActionType\r\n\r\nexport type ThunkType = ThunkAction<any, AppRootStateType, unknown, GeneralAppActionType>\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\nexport default store;\r\n\r\n\r\n","import {getCaptchaUrl} from './login-reducer';\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/usersAPI\";\r\nimport {setCurrentPage, setUsers, toggleIsFetching, UsersActionType} from \"./users-reducer\";\r\nimport {authAPI} from \"../api/authAPI\";\r\nimport {profileAPI} from \"../api/profileAPI\";\r\nimport {ThunkType} from \"./redux-store\";\r\nimport {ThunkDispatch} from 'redux-thunk';\r\n\r\nconst SET_AUTH_DATA = 'lapa-app/auth-reducer/SET_AUTH_DATA'\r\nconst SET_USER_PHOTO = 'lapa-app/auth-reducer/SET_USER_PHOTO'\r\nconst SET_AUTH_CHANGE = 'lapa-app/auth-reducer/SET_AUTH_CHANGE'\r\nconst GET_LOGIN_ERROR = 'lapa-app/auth-reducer/GET_LOGIN_ERROR'\r\n\r\n\r\nexport type AuthActionType = AuthDataActionType | UserPhotoActionType | AuthChangeActionType | LoginErrorDataActionType\r\n\r\nexport type LoginErrorDataActionType = ReturnType<typeof getLoginError>\r\nexport type AuthDataActionType = ReturnType<typeof setAuthData>\r\nexport type UserPhotoActionType = ReturnType<typeof setUserPhoto>\r\nexport type AuthChangeActionType = ReturnType<typeof setAuthChange>\r\n\r\nexport type AuthDataType = {\r\n    userId: number\r\n    login: string\r\n    email: string\r\n    isAuth: boolean\r\n    photos: {\r\n        large: string\r\n        small: string\r\n    }\r\n    errorMessage?: string\r\n}\r\n\r\n\r\nexport const setAuthData = (userId: number, login: string, email: string) => ({\r\n    type: SET_AUTH_DATA, data: {userId, login, email}\r\n} as const)\r\nexport const setUserPhoto = (photos: { large: string, small: string }) => ({type: SET_USER_PHOTO, photos} as const)\r\nexport const setAuthChange = (isAuth: boolean) => ({type: SET_AUTH_CHANGE, isAuth} as const)\r\nexport const getLoginError = (message: string) => ({type: GET_LOGIN_ERROR, message} as const)\r\n\r\n\r\nconst initialProfileState = {\r\n    userId: 0,\r\n    login: '',\r\n    email: '',\r\n    isAuth: false,\r\n    photos: {\r\n        large: '',\r\n        small: ''\r\n    }\r\n}\r\n\r\nexport const authReducer = (state: AuthDataType = initialProfileState, action: AuthActionType) => {\r\n    switch (action.type) {\r\n        case SET_AUTH_DATA: {\r\n            return {...state, ...action.data, isAuth: true}\r\n        }\r\n        case SET_USER_PHOTO: {\r\n            return {...state, photos: {...action.photos}}\r\n\r\n        }\r\n        case SET_AUTH_CHANGE: {\r\n            return {...state, isAuth: action.isAuth}\r\n        }\r\n        case GET_LOGIN_ERROR: {\r\n            return {...state, errorMessage: action.message}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const authMe = (): ThunkType => {\r\n    return async (dispatch: Dispatch<AuthActionType>) => {\r\n        try {\r\n            const data = await authAPI.getAuth();\r\n            if (data.resultCode === 0) {\r\n                const {id, login, email} = data.data\r\n                dispatch(setAuthData(id, login, email))\r\n                const response = await profileAPI.getProfile(id)\r\n                dispatch(setUserPhoto(response.data.photos))\r\n            }\r\n            return data\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport const setAuth = (email: string, password: string, rememberMe: boolean, captcha?: string): ThunkType => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const res = await authAPI.logining({email, password, rememberMe, captcha})\r\n            if (res.data.data.userId) {\r\n                dispatch(setAuthChange(true))\r\n            } else {\r\n                if (res.data.resultCode === 10) {\r\n                    dispatch(getCaptchaUrl())\r\n                }\r\n                dispatch(getLoginError(res.data.messages[0]))\r\n            }\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport const setLogOut = (): ThunkType => {\r\n    return async (dispatch: Dispatch<AuthActionType>) => {\r\n        try {\r\n            const res = await authAPI.setUnlogging()\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAuthChange(false))\r\n            }\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Navigation.module.css'\r\nimport {NavigationType} from '../../../../redux/store'\r\n\r\n\r\n\r\nconst Navigation: React.FC<NavigationType> = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <NavLink to={props.link} activeClassName={s.active} className={s.itemLink}>{props.menu}</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Navigation from './Navigation/Navigation';\r\nimport s from './Navigations.module.css'\r\n\r\nconst Navigations = () => {\r\n  return <nav className={s.nav}>\r\n    <Navigation menu='Profile' link='/profile'/>\r\n    <Navigation menu='Messages' link='/dialogs'/>\r\n    <Navigation menu='Users' link='/users'/>\r\n    <Navigation menu='News' link='/news'/>\r\n    <Navigation menu='Music' link='/music'/>\r\n    <Navigation menu='Settings' link='/settings'/>\r\n    </nav>\r\n}\r\n\r\nexport default Navigations;","import React from 'react';\r\nimport s from './NavbarLeft.module.css'\r\nimport Navigations from './Navigations/Navigations';\r\n\r\nconst NavbarLeft = () => {\r\n  return (\r\n    <Navigations />\r\n\r\n  )\r\n}\r\n\r\nexport default NavbarLeft;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { DialogsDataType } from '../../../redux/store';\r\nimport s from './Friend.module.css'\r\n\r\n\r\n\r\nconst Friend:React.FC<DialogsDataType> = (props) => {\r\n  return <div className={s.item} key={props.id}>\r\n      <NavLink to={props.name}>{props.name}</NavLink>\r\n      </div>\r\n\r\n}\r\n\r\nexport default Friend;","import React from 'react';\r\nimport { NavbarRightType } from '../../redux/store';\r\nimport Friend from './Friend/Friend';\r\nimport s from './NavbarRight.module.css'\r\n\r\nconst NavbarRight:React.FC<NavbarRightType> = (props) => {\r\n\r\n  const friendList = props.friends.map((friend)=> <Friend key={friend.id} id={friend.id} name={friend.name}/>)\r\n\r\n  return <nav className={s.nav}>\r\n      {friendList}\r\n  </nav>\r\n}\r\n\r\nexport default NavbarRight;","export default __webpack_public_path__ + \"static/media/loader.07928bad.gif\";","import loader from '../../../assets/images/loader.gif'\r\n\r\n\r\nconst Preloader = () => {\r\n    return (<div>\r\n        <img src={loader} />\r\n    </div>)\r\n\r\n}\r\nexport default Preloader;","import s from './Paginator.module.css'\r\nimport {useEffect, useState} from \"react\";\r\nimport cn from 'classnames';\r\n\r\ntype PaginatorPropsType = {\r\n    totalItemsCounter: number\r\n    pageSize: number\r\n    currentPage: number\r\n    portionSize?: number\r\n    onPageClick: (currentPage: number) => void\r\n\r\n}\r\n\r\n\r\nexport const Paginator = ({\r\n                              totalItemsCounter,\r\n                              pageSize,\r\n                              currentPage,\r\n                              onPageClick,\r\n                              portionSize = 10\r\n                          }: PaginatorPropsType) => {\r\n\r\n    const pagesCount = Math.ceil(totalItemsCounter / pageSize)\r\n    const pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pagesCount / portionSize)\r\n    const [portionNumber, setPortionNumber] = useState(1)\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    useEffect(() => {\r\n        setPortionNumber(Math.ceil(currentPage / portionSize))\r\n    }, [currentPage, portionSize])\r\n\r\n    return (\r\n        <div>\r\n            {portionNumber > 1 && <button onClick={()=> setPortionNumber(portionNumber -1 )}>Prev</button>}\r\n                {pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map(p => <span className={currentPage === p ? cn(s.selected, s.page) : s.page}\r\n                              onClick={() => onPageClick(p)}>{p}</span> )}\r\n            {portionNumber < portionCount && <button onClick={()=> setPortionNumber(portionNumber +1 )}>Next</button>}\r\n        </div>)\r\n}","export default __webpack_public_path__ + \"static/media/user.3b87c899.png\";","import s from './Users.module.css'\r\nimport * as axios from 'axios'\r\nimport userPhoto from './../../assets/images/user.png'\r\nimport React from \"react\";\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { bool } from \"yup\";\r\nimport { Paginator } from '../common/Paginator/Paginator';\r\nimport { NewUsersType } from './Users';\r\n\r\ntype UserPropsType = {\r\n    user: NewUsersType\r\n    followInProgress: Array<number>\r\n    getUnFollow:(userId: number) => void\r\n    getFollow:(userId: number) => void\r\n}\r\n\r\n\r\nexport const User = ({user,followInProgress, getUnFollow, getFollow }: UserPropsType) => {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.items}>\r\n                <NavLink to={'/profile/' + user.id}>\r\n                    <img src={user.photos.small != null ? user.photos.small : userPhoto} />\r\n                </NavLink>\r\n                {user.followed\r\n                    ? <button disabled={followInProgress.some(id => id === user.id)} onClick={() => {\r\n                        getUnFollow(user.id)\r\n\r\n                    }}>Unfollow</button>\r\n                    : <button disabled={followInProgress.some(id => id === user.id)} onClick={() => {\r\n                        getFollow(user.id)\r\n\r\n                    }}>Follow</button>}\r\n\r\n            </div>\r\n            <div className={s.info}>\r\n                <div>{user.name}</div>\r\n                <div>{user.status}</div>\r\n\r\n            </div>\r\n\r\n        </div>)\r\n}","import s from './Users.module.css'\r\nimport * as axios from 'axios'\r\nimport userPhoto from './../../assets/images/user.png'\r\nimport React from \"react\";\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { bool } from \"yup\";\r\nimport { Paginator } from '../common/Paginator/Paginator';\r\nimport { User } from './User';\r\n\r\n\r\n\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type NewUsersType = {\r\n    id: number;\r\n    name: string;\r\n    photos: PhotosType\r\n    uniqueUrlName: string\r\n    status: string\r\n    followed: boolean\r\n}\r\n\r\n\r\ntype UsersPropsType = {\r\n    users: Array<NewUsersType>\r\n    pageSize: number\r\n    totalUserCounter: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    onPageClick: (currentPage: number) => void\r\n    toggleIsFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    followInProgress: Array<number>\r\n    getFollow: (userId: number) => void\r\n    getUnFollow: (userId: number) => void\r\n}\r\n\r\nconst Users = ({ users,\r\n    pageSize,\r\n    totalUserCounter,\r\n    currentPage,\r\n    isFetching,\r\n    onPageClick,\r\n    toggleIsFollowingProgress,\r\n    followInProgress,\r\n    getFollow,\r\n    getUnFollow,\r\n}: UsersPropsType) => {\r\n\r\n    return (<div>\r\n        {isFetching ? <Preloader /> : null}\r\n        <Paginator pageSize={pageSize} totalItemsCounter={totalUserCounter} currentPage={currentPage} onPageClick={onPageClick} />\r\n        {users.map(u => <User key={u.id} user={u} followInProgress={followInProgress} getFollow={getFollow} getUnFollow={getUnFollow} />\r\n        )}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Users;","import {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {createSelector} from 'reselect'\r\n\r\nexport const getUser = (state:AppRootStateType)=> {\r\n    return state.users.users\r\n}\r\n\r\n// export const getUserSelector = createSelector (getUser, (users)=> { //example of selector with reselect\r\n//     return users.filter((u: any)=> u)\r\n// })\r\n\r\nexport const getPageSize = (state:AppRootStateType)=> {\r\n    return state.users.pageSize\r\n}\r\n\r\nexport const getTotalUserCounter = (state:AppRootStateType)=> {\r\n    return state.users.totalUserCounter\r\n}\r\n\r\nexport const getCurrentPage = (state:AppRootStateType)=> {\r\n    return state.users.currentPage\r\n}\r\n\r\nexport const getIsFetchingData = (state:AppRootStateType)=> {\r\n    return state.users.isFetching\r\n}\r\n\r\nexport const getFollowInProgressData = (state:AppRootStateType)=> {\r\n    return state.users.followInProgress\r\n}\r\n","import { connect } from \"react-redux\";\r\nimport { StateDataType } from \"../../redux/store\";\r\nimport {\r\n    getFollow, getPage, getUnFollow, getUsers, isFollowing,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    toggleIsFollowingProgress,\r\n\r\n} from \"../../redux/users-reducer\";\r\nimport Users, { NewUsersType } from \"./Users\";\r\nimport React from \"react\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getCurrentPage, getFollowInProgressData,\r\n    getIsFetchingData,\r\n    getPageSize,\r\n    getTotalUserCounter,\r\n    getUser\r\n} from \"../../utilits/selectors/user-selector\";\r\n\r\n\r\nexport interface Items {\r\n    items: Array<NewUsersType>\r\n    totalCount: number\r\n}\r\n\r\n\r\nexport type UsersComponentPropsType = {\r\n    users: Array<NewUsersType>\r\n    pageSize: number\r\n    totalUserCounter: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFollowingProgress:(isFetching:boolean, userId:number) => void\r\n    followInProgress: Array<number>\r\n    getUsers: (currentPage: number,pageSize: number) => void\r\n    getPage: (currentPage: number,pageSize: number) => void\r\n    getFollow: (userId: number) => void\r\n    getUnFollow: (userId: number) => void\r\n}\r\n\r\n\r\nclass UsersClassContainer extends React.Component<UsersComponentPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n    onPageClick = (currentPage: number) => {\r\n        this.props.getPage(currentPage, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <Users users={this.props.users}\r\n            pageSize={this.props.pageSize}\r\n            totalUserCounter={this.props.totalUserCounter}\r\n            currentPage={this.props.currentPage}\r\n            onPageClick={this.onPageClick}\r\n            isFetching={this.props.isFetching}\r\n            toggleIsFollowingProgress={this.props.toggleIsFollowingProgress}\r\n            followInProgress={this.props.followInProgress}\r\n                      getFollow={this.props.getFollow}\r\n                      getUnFollow={this.props.getUnFollow}\r\n\r\n        />\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlet mapStateProps = (state: AppRootStateType) => {\r\n    return {\r\n        users: getUser(state),\r\n        pageSize: getPageSize(state),\r\n        totalUserCounter: getTotalUserCounter(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetchingData(state),\r\n        followInProgress: getFollowInProgressData(state)\r\n    }\r\n}\r\n\r\n\r\nconst UsersContainer = connect(mapStateProps,\r\n    {\r\n        setCurrentPage,\r\n        setTotalUsersCount,\r\n        toggleIsFollowingProgress,\r\n        getUsers,\r\n        getPage,\r\n        getFollow,\r\n        getUnFollow\r\n    })(UsersClassContainer);\r\n\r\nexport default UsersContainer;","export default __webpack_public_path__ + \"static/media/lapa-logo.365a972e.png\";","import React from 'react';\r\nimport s from './Logo.module.css'\r\nimport logo from '../../../assets/images/lapa-logo.png'\r\n\r\nconst Logo = () => {\r\n    return (\r\n    <div className={s.logo}>\r\n        <img src={logo} alt=\"\" />\r\n    </div>)\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport s from './Search.module.css'\r\n\r\nconst Search = () => {\r\n    return (\r\n        <div className={s.search}>\r\n            <input type=\"text\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport { WidgetsType } from '../../../../redux/store';\r\nimport s from './Widget.module.css'\r\n\r\n\r\n\r\nconst Widget = (props: WidgetsType) => {\r\n    return (\r\n        <img src={props.src}/>\r\n        )\r\n}\r\n\r\nexport default Widget;","import React from 'react';\r\nimport Widget from './Widget/Widget';\r\nimport s from './Widgets.module.css'\r\n\r\n\r\ntype WidgetsPropsType = {\r\n    smallPhoto: string\r\n}\r\n\r\nconst Widgets = (props:WidgetsPropsType) => {\r\n    return (\r\n        <div className={s.widgets}>\r\n             <Widget src={'https://icon-library.com/images/send-message-icon-png/send-message-icon-png-29.jpg'}/>\r\n             <Widget src={'https://png.pngtree.com/png-vector/20190411/ourlarge/pngtree-vector-bell-icon-png-image_927119.jpg'}/>\r\n             <Widget src={props.smallPhoto}/> \r\n\r\n       \r\n        </div>\r\n    )\r\n    }\r\nexport default Widgets;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { authAPI } from '../../api/authAPI';\r\nimport s from './Header.module.css'\r\nimport Logo from './Logo/Logo';\r\nimport Search from './Search/Search';\r\nimport Widgets from './Widgets/Widgets';\r\n\r\n\r\ntype HeaderPropsType = {\r\n    children?: React.ReactNode\r\n    login: string\r\n    isAuth: boolean\r\n    smallPhoto: string\r\n    setLogOut: ()=> void\r\n}\r\n\r\nconst Header = ({setLogOut, ...props}: HeaderPropsType) => {\r\n\r\n    const logOut = () => {\r\n        setLogOut()\r\n    }\r\n\r\n\r\n    return <header className={s.header}>\r\n        <Logo />\r\n        <Search />\r\n        {props.isAuth ?\r\n            <div className={s.widgets}>\r\n                {props.login}\r\n                <Widgets smallPhoto={props.smallPhoto} />\r\n                <button onClick={logOut}>Log out</button>\r\n            </div>\r\n            : <NavLink to={'/login'}>Login</NavLink>}\r\n\r\n    </header>\r\n}\r\n\r\nexport default Header;","import * as axios from 'axios'\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {AuthDataType, authMe, setAuthData, setLogOut, setUserPhoto} from '../../redux/auth-reducer';\r\nimport { StateDataType } from '../../redux/store';\r\nimport Header from './Header';\r\nimport {authAPI} from \"../../api/authAPI\";\r\nimport {profileAPI} from \"../../api/profileAPI\";\r\n\r\n\r\ntype HeaderContainerPropsType = {\r\n    setAuthData: (userId: number, login: string, email: string) => void\r\n    setUserPhoto:(photos: {large:string, small:string}) => void\r\n    login: string\r\n    isAuth: boolean\r\n    smallPhoto: string\r\n    setLogOut: ()=> void\r\n}\r\n\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType>  {\r\n\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props} login={this.props.login} isAuth={this.props.isAuth} smallPhoto={this.props.smallPhoto} setLogOut={this.props.setLogOut}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateDataType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n    smallPhoto: state.auth.photos.small\r\n})\r\n\r\nexport default connect(mapStateToProps, { setAuthData, setUserPhoto , setLogOut})(HeaderContainer)\r\n","import React, { useState } from 'react'\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { setAuth } from '../../redux/auth-reducer';\r\nimport { StateDataType } from '../../redux/store';\r\nimport { loginningValidationSchema } from '../../utilits/validations/validationScheme';\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport {getCaptchaUrl, setLoginData} from \"../../redux/login-reducer\";\r\n\r\ntype Inputs = {\r\n    login: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n    captcha?: string\r\n};\r\n\r\ntype LoginPropsType = {\r\n    isAuth: boolean\r\n    login: string,\r\n    password: string,\r\n    errorMessage?:string\r\n    setLoginData: (data: {\r\n        login: string,\r\n        password: string,\r\n    }) => void\r\n    setAuth: (email: string, password: string, rememberMe:boolean, captcha?: string) => void\r\n    getCaptchaUrl: ()=> void\r\n    captchaUrl: string\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    const { register, handleSubmit, formState: { errors } } = useForm<Inputs>({\r\n        resolver: yupResolver (loginningValidationSchema)\r\n    });\r\n\r\n    const onSubmit: SubmitHandler<Inputs> = (data) => {\r\n        loginRequest(data.login, data.password, data.rememberMe, data.captcha);\r\n        props.setLoginData(data)\r\n    }\r\n    const loginRequest = (email: string, password: string, rememberMe:boolean, captcha?:string) => {\r\n        props.setAuth(email, password, rememberMe,captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n    \r\n    return (\r\n        \r\n        <div>\r\n            <h1>LOGIN PAGE</h1>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div>\r\n                    <input defaultValue={''} {...register(\"login\", { required: true, pattern: /^[A-Za-z]+$/i })} />\r\n                </div>\r\n                {props.errorMessage && <span>{props.errorMessage}</span>}\r\n                {errors.login && <span>This field is required</span>}\r\n                <div>\r\n                    <input defaultValue={''} type='password' {...register(\"password\", { required: true })} />\r\n                </div>\r\n                {errors.password && <span>{errors.password.message}</span>}\r\n                <div>\r\n                    <input type='checkbox' {...register(\"rememberMe\")} />\r\n                </div>\r\n                {props.captchaUrl && <div>\r\n                    <img src={props.captchaUrl} style={{width:'200px'}}/>\r\n                    <input type='text' {...register(\"captcha\")}/>\r\n                </div>}\r\n                <div>\r\n                    <input type=\"submit\" />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: StateDataType) => ({\r\n    login: state.login.data.login,\r\n    password: state.login.data.password,\r\n    isAuth: state.auth.isAuth,\r\n    errorMessage: state.auth.errorMessage,\r\n    captchaUrl: state.login.captchaUrl\r\n})\r\n\r\nexport default connect(mapStateToProps, { setLoginData, setAuth, getCaptchaUrl })(Login);;\r\n\r\n\r\n","import React from 'react';\r\nimport { PostMesageType } from '../../../../redux/store';\r\nimport s from './Post.module.css'\r\n\r\n\r\nconst Post:React.FC<PostMesageType> = React.memo((props) => { \r\n  return <div className={s.item} key={props.id}>\r\n     <div className={s.postMessage}>{props.message}</div>\r\n     <div className={s.postLikes}>Likes: {props.likes}</div>\r\n    </div>\r\n  \r\n})\r\n\r\nexport default Post;","import {ErrorMessage, Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport * as yup from 'yup'\r\nimport React from \"react\";\r\nimport {postValidationSchema} from \"../../utilits/validations/validationScheme\";\r\n\r\ntype PostFormValueType = {\r\n    post: string\r\n}\r\n\r\ntype PostFormType = {\r\n    addPost: (post: string) => void\r\n}\r\n\r\n\r\n\r\nexport const PostForm = ({addPost, ...props}: PostFormType) => {\r\n\r\n    const formSubmit = (values: PostFormValueType, {setSubmitting}: FormikHelpers<{ post: string; }>) => {\r\n        addPost(values.post)\r\n        setSubmitting(false);\r\n\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{post: ''}}\r\n            validateOnBlur\r\n            validationSchema={postValidationSchema}\r\n            onSubmit={formSubmit}\r\n        >\r\n            {({isSubmitting,\r\n                  errors,\r\n                  touched,\r\n                  dirty,\r\n                  isValid,\r\n\r\n            }) => (\r\n                <Form>\r\n                    <Field name=\"post\"\r\n                           as=\"textarea\"\r\n                           className=\"form-textarea\"\r\n                           placeholder='Enter a post...'\r\n                    />\r\n                    {touched.post && errors.post && <ErrorMessage name=\"post\" component=\"div\" />}\r\n                    <button type=\"submit\"\r\n                            disabled={isSubmitting && !isValid && !dirty}\r\n                    >\r\n                        Send\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}","import React, { ChangeEventHandler, MouseEventHandler } from 'react';\r\nimport { AddPostType} from '../../../redux/store';\r\nimport Post from './Post/Post';\r\nimport s from './Posts.module.css'\r\nimport {PostForm} from \"../../Forms/PostForm\";\r\nimport {addPost} from \"../../../redux/profile-reducer\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Posts: React.FC<AddPostType> = React.memo(({addPost, myPost, newPost, posts, ...props}) => {\r\n\r\n  const postsElements = posts.map((m) => <Post key={m.id} message={m.postMessage} likes={m.likes} id={m.id} />)\r\n\r\n  return <div>\r\n    <div className={s.postHeader}>\r\n      <div className={s.itemWrapper}>\r\n        <h2 >{myPost} </h2>\r\n      </div>\r\n      <div className={s.item}>\r\n        <PostForm addPost={addPost}/>\r\n      </div>\r\n    </div>\r\n    <div className={s.posts}>\r\n      {postsElements}\r\n\r\n    </div>\r\n  </div>\r\n})\r\n\r\nexport default Posts;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  addPost,\r\n} from '../../../redux/profile-reducer';\r\nimport { StateDataType } from '../../../redux/store';\r\nimport Posts from './Posts';\r\n\r\n\r\n\r\n\r\nconst mapStateProps = (state:StateDataType) =>{\r\n  return {  \r\n    myPost:state.profilePage.myPost,\r\n    newPost:state.profilePage.newPost,\r\n    posts: state.profilePage.posts,\r\n\r\n  }\r\n}\r\n\r\n\r\nconst PostsContainer = connect (mapStateProps,{addPost}) (Posts);\r\n\r\nexport default PostsContainer;","import React from 'react';\r\nimport { AvatarType } from '../../../../redux/store';\r\nimport s from './Avatar.module.css'\r\n\r\n\r\n\r\nconst Avatar:React.FC<AvatarType> = (props) => {\r\n  return <div className={s.avatarWrapper}>\r\n     <img src={props.imgAdress} />\r\n  </div>\r\n}\r\n\r\nexport default Avatar;","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport { updateStatus } from \"../../../redux/profile-reducer\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        dispatch(updateStatus(status))\r\n    }\r\n    const onChangeInput = (e: any) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={onEditMode}>{props.status || 'clear status'}</span>\r\n            </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus onChange={onChangeInput} value={status} onBlur={offEditMode}/>\r\n            </div>}\r\n        </div>)\r\n}\r\n    \r\n    \r\n\r\n","import {useDispatch} from \"react-redux\";\r\nimport {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {UpdateProfileType} from \"../../../api/profileAPI\";\r\nimport {updateProfile} from \"../../../redux/profile-reducer\";\r\n\r\ntype ProfileDataType = {\r\n    aboutMe: string\r\n    userId: number\r\n    fullName: string\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    contacts: {\r\n        facebook?: string\r\n        github?: string\r\n        instagram?: string\r\n        mainLink?: string\r\n        twitter?: string\r\n        vk?: string\r\n        website?: string\r\n        youtube?: string\r\n    }\r\n}\r\n\r\n\r\nexport const ProfileData = ({ aboutMe, userId, fullName, lookingForAJob, lookingForAJobDescription, contacts, ...props }: ProfileDataType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [profile, setProfile] = useState<UpdateProfileType>({\r\n        aboutMe,\r\n        userId,\r\n        fullName,\r\n        lookingForAJobDescription,\r\n        lookingForAJob,\r\n        contacts: {\r\n            github: contacts.github\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        setProfile(\r\n            {\r\n                aboutMe,\r\n                userId,\r\n                fullName,\r\n                lookingForAJobDescription,\r\n                lookingForAJob,\r\n                contacts: {\r\n                    github: contacts.github\r\n                }\r\n\r\n            })\r\n    }, [aboutMe, userId, fullName, lookingForAJob, lookingForAJobDescription, contacts])\r\n\r\n    const onValueChange = (e: ChangeEvent<HTMLInputElement>, name: string) => {\r\n        switch (name) {\r\n            case \"fullName\": {\r\n                return setProfile({ ...profile, fullName: e.currentTarget.value })\r\n            }\r\n            case \"aboutMe\": {\r\n                return setProfile({ ...profile, aboutMe: e.currentTarget.value })\r\n            }\r\n            case \"lookingForAJobDescription\": {\r\n                return setProfile({ ...profile, lookingForAJobDescription: e.currentTarget.value })\r\n            }\r\n            case \"lookingForAJob\": {\r\n                return setProfile({ ...profile, lookingForAJob: e.currentTarget.checked })\r\n            }\r\n            case \"contacts.github\": {\r\n                return setProfile({ ...profile, contacts: { ...contacts, github: e.currentTarget.value } })\r\n            }\r\n            default: {\r\n                return profile\r\n            }\r\n        }\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        dispatch(updateProfile({\r\n            aboutMe: profile.aboutMe,\r\n            userId: profile.userId,\r\n            fullName: profile.fullName,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            contacts: {\r\n                github: profile.contacts.github\r\n            }\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            {!editMode && <>\r\n                <div>\r\n                    About me: {aboutMe}\r\n                </div><div>\r\n                Fullname: {fullName}\r\n            </div><div>\r\n                lookingForAJobDescription: {lookingForAJobDescription}\r\n            </div><div>\r\n                lookingForAJob: {lookingForAJob ? 'yes' : 'no'}\r\n            </div><div>\r\n                contacts: <span><a href={contacts.github} target={'_blank'}>\r\n                        {contacts.github}</a></span>\r\n            </div>\r\n            </>}\r\n            {editMode && <>\r\n                <div>\r\n                    About me: <input type=\"text\" value={profile.aboutMe} onChange={(e) => onValueChange(e, 'aboutMe')} />\r\n                </div><div>\r\n                Fullname: <input type=\"text\" value={profile.fullName} onChange={(e) => onValueChange(e, 'fullName')} />\r\n            </div><div>\r\n                lookingForAJobDescription: <input type=\"text\" value={profile.lookingForAJobDescription}\r\n                                                  onChange={(e) => onValueChange(e, 'lookingForAJobDescription')} />\r\n            </div><div>\r\n                lookingForAJob: <input type='checkbox' checked={profile.lookingForAJob} onChange={(e) => onValueChange(e, \"lookingForAJob\")} />\r\n            </div><div>\r\n                contacts: <input type=\"text\" value={profile.contacts.github}\r\n                                 onChange={(e) => onValueChange(e, 'contacts.github')} />\r\n            </div>\r\n\r\n            </>}\r\n            {editMode ? <button onClick={offEditMode}>Save</button> : <button onClick={onEditMode}>Edit</button>}\r\n        </div>\r\n    )\r\n}","import Avatar from \"./Avatar/Avatar\";\r\nimport s from '../Profile.module.css';\r\nimport {APIProfileType, updateLargePhoto} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport { ChangeEvent} from \"react\";\r\nimport { ProfileStatusWithHooks } from \"./ProfileStatusWithHooks\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport { ProfileData } from \"./ProfileData\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: APIProfileType\r\n    status: string\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    if (!props.profile) {\r\n        <Preloader />\r\n    }\r\n    const addPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            dispatch(updateLargePhoto(e.target.files[0]))\r\n        }\r\n    }\r\n\r\n    return (<div className={s.wrapper}>\r\n        <Avatar imgAdress={props.profile.photos.large} />\r\n        <ProfileStatusWithHooks status={props.status} />\r\n        <input type='file' name=\"myImg\" onChange={addPhoto} />\r\n        <ProfileData {...props.profile} />\r\n    </div>)\r\n\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n\r\n\r\n\r\n","import React, {ReactNode, useEffect} from 'react';\r\nimport PostsContainer from './Posts/PostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport {APIProfileType, getProfile, getStatus} from '../../redux/profile-reducer';\r\nimport {UpdateProfileType} from \"../../api/profileAPI\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { useAppSelector} from \"../../redux/redux-store\";\r\nimport {\r\n  selectIsAuth,\r\n  selectMainUserId,\r\n  selectProfile,\r\n  selectProfileStatus\r\n} from \"../../utilits/selectors/profile-selector\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst Profile = () => {\r\n\r\n  const dispatch = useDispatch()\r\n  const isAuth = useAppSelector(selectIsAuth)\r\n  const profile = useAppSelector(selectProfile)\r\n  const status = useAppSelector(selectProfileStatus)\r\n  const mainUserId = useAppSelector(selectMainUserId)\r\n  let {userId}:any = useParams()\r\n\r\n  useEffect(()=>{\r\n  if(isAuth){\r\n    if(!userId){\r\n      userId = mainUserId\r\n    }\r\n    dispatch(getProfile(userId))\r\n    dispatch(getStatus(userId))\r\n  }}, [userId])\r\n\r\n  if (!isAuth) {\r\n    return <Redirect to={'/login'}/>\r\n  }\r\n\r\n  return <div>\r\n    <ProfileInfo\r\n        profile={profile}\r\n        status={status}\r\n    />\r\n        <PostsContainer/>\r\n  </div>\r\n}\r\n\r\nexport default Profile;","import React, { Suspense } from 'react';\r\nimport './App.css';\r\nimport NavbarLeft from './components/NavbarLeft/NavbarLeft';\r\nimport NavbarRight from './components/NavbarRight/NavbarRight';\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter } from 'react-router-dom'\r\nimport News from './components/News/News';\r\nimport Music from './components/Music/Music';\r\nimport Settings from './components/Settings/Settings';\r\nimport { DialogsDataType, ReduxStoreType, StateDataType, store } from './redux/store';\r\n// import DialogsContainer from './components/Dialogs/DialogsContainer';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Login from './components/Login/Login';\r\nimport { render } from '@testing-library/react';\r\nimport { authMe } from './redux/auth-reducer';\r\nimport { connect, ConnectedComponent } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { initializedTC } from './redux/app-reducer';\r\nimport { AppRootStateType } from './redux/redux-store';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport Profile from \"./components/Profile/Profile\";\r\nimport Dialogs from \"./components/Dialogs/Dialogs\";\r\n\r\ntype AppPropsType = {\r\n  initializedTC: () => void\r\n  friends: DialogsDataType[]\r\n  initialized: boolean\r\n}\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n\r\n  catchAllUnhandledErrors = (event:PromiseRejectionEvent) => {\r\n    alert('Some error')\r\n    console.error(event)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.initializedTC()\r\n    window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n  }\r\n  componentWillUnmount(){\r\n    window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n  }\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />\r\n    }\r\n    \r\n      return (\r\n\r\n        <div className='app-wrapper'>\r\n          <HeaderContainer />\r\n          <NavbarLeft />\r\n          <NavbarRight friends={this.props.friends} />\r\n          <div className='app-wrapper-content'>\r\n            <Suspense fallback={<Preloader />}>\r\n            <Switch>\r\n            <Route path='/profile/:userId?' render={() => <Profile />} />\r\n            <Route path='/dialogs' render={() => <Dialogs />} />\r\n            <Route path='/users' render={() => <UsersContainer />} />\r\n            <Route path='/login' render={() => <Login />} />\r\n            <Route exact path='*' render={() => <div>404 PAGE NOT FOUND</div>} />\r\n            {/* <Route path='/news' render={() => <News />}/> \r\n                <Route path='/music' render={() => <Music />}/>\r\n                <Route path='/settings' render={() => <Settings />}/>       */}\r\n                </Switch>\r\n            </Suspense>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => ({\r\n  friends: state.navbarRight.friends,\r\n  initialized: state.app.initialized\r\n})\r\n\r\nexport default compose<ConnectedComponent<(props: any) => JSX.Element, Omit<any, \"isAuth\" | \"dispatch\">>>(withRouter, connect(mapStateToProps, { initializedTC }))(App)\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/redux-store';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\n  ReactDOM.render(\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n  );\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import axios from \"axios\";\r\nimport {Items} from \"../components/Users/UsersContainer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials:true,\r\n    baseURL:`https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\"API-KEY\" : \"ed0fa8fa-ddbb-478a-b370-1f41a9c286be\"}\r\n})\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers (currentPage = 1, pageSize = 10)  {\r\n        return instance.get<Items>(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    },\r\n    setFollow (id:number) {\r\n        return instance.post(`follow/${id}`).then(response => response.data)\r\n    },\r\n    setUnFollow (id:number) {\r\n        return instance.delete(`follow/${id}`).then(response => response.data)\r\n    }\r\n}\r\n","import {NewUsersType} from \"../components/Users/Users\"\r\n\r\nimport {UsersStateType} from \"./store\"\r\nimport {usersAPI} from \"../api/usersAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkType} from \"./redux-store\";\r\n\r\nconst IS_FOLLOWING = 'lapa-app/users-reducer/IS_FOLLOWING'\r\nconst SET_USERS = 'lapa-app/users-reducer/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'lapa-app/users-reducer/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'lapa-app/users-reducer/SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'lapa-app/users-reducer/TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'lapa-app/users-reducer/TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\n//export type FollowActionCreatorType = ReturnType<typeof followActionCreator> + добавляем as const в сам AC\r\n\r\nexport type FollowACType = ReturnType<typeof isFollowing>\r\nexport type SetUsersACType = ReturnType<typeof setUsers>\r\nexport type SetCurrentPageACType = ReturnType<typeof setCurrentPage>\r\nexport type SetTotalUsersCountACType = ReturnType<typeof setTotalUsersCount>\r\nexport type ToggleIsFetchingACType = ReturnType<typeof toggleIsFetching>\r\nexport type ToggleIsFollowingProgress = ReturnType<typeof toggleIsFollowingProgress>\r\n\r\nexport type UsersActionType =\r\n    FollowACType\r\n    | SetUsersACType\r\n    | SetCurrentPageACType\r\n    | SetTotalUsersCountACType\r\n    | ToggleIsFetchingACType\r\n    | ToggleIsFollowingProgress\r\n\r\nconst initialUsersState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUserCounter: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followInProgress: []\r\n}\r\n\r\nexport const usersReducer = (state: UsersStateType = initialUsersState, action: UsersActionType) => {\r\n    switch (action.type) {\r\n        case IS_FOLLOWING : {\r\n            return {...state, users: state.users.map(u => u.id === action.userID ? {...u, followed: action.follow} : u)}\r\n        }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUserCounter: action.totalCount}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followInProgress: action.isFetching\r\n                    ? [...state.followInProgress, action.userId]\r\n                    : state.followInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const isFollowing = (userID: number, follow: boolean) => ({type: IS_FOLLOWING, userID, follow} as const)\r\nexport const setUsers = (users: Array<NewUsersType>) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setTotalUsersCount = (totalCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalCount: totalCount\r\n} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n} as const)\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId\r\n} as const)\r\n\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => {\r\n    return async (dispatch: Dispatch<UsersActionType>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nexport const getPage = (currentPage: number, pageSize: number): ThunkType => {\r\n    return async (dispatch: Dispatch<UsersActionType>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(currentPage))\r\n        const data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n    }\r\n}\r\nconst followUnfollow = async (dispatch: Dispatch,\r\n                              userId: number,\r\n                              apiMethod: (id: number) => Promise<any>,\r\n                              follow: boolean) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n    const data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(isFollowing(userId, follow))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\n\r\nexport const getFollow = (userId: number): ThunkType => {\r\n    return async (dispatch: Dispatch) => {\r\n        const apiMethod = usersAPI.setFollow.bind(usersAPI)\r\n\r\n        await followUnfollow(dispatch, userId, apiMethod, true)\r\n    }\r\n}\r\n\r\nexport const getUnFollow = (userId: number): ThunkType => {\r\n    return async (dispatch: Dispatch) => {\r\n        const apiMethod = usersAPI.setUnFollow.bind(usersAPI)\r\n\r\n        await followUnfollow(dispatch, userId, apiMethod, false)\r\n    }\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials:true,\r\n    baseURL:`https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\"API-KEY\" : \"ed0fa8fa-ddbb-478a-b370-1f41a9c286be\"}\r\n})\r\n\r\n\r\nexport const profileAPI = {\r\n    getProfile (userId:number){\r\n        return instance.get(`profile/${userId}`)\r\n    },\r\n    getProfileStatus (userId:number){\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus (status: string){\r\n        return instance.put(`profile/status`, {status})\r\n    },\r\n    updatePhoto (image: File){\r\n        debugger\r\n        const formData = new FormData()\r\n        formData.append('image', image)\r\n        return instance.put(`profile/photo`, formData , {headers:{\r\n            \"Content-type\": \"multipart/form-data\"\r\n        }})\r\n    },\r\n    updateProfile (profile: UpdateProfileType){\r\n        return instance.put(`profile`, profile)\r\n    },\r\n\r\n}\r\n\r\nexport type UpdateProfileType = {\r\n    aboutMe: string\r\n    userId: number\r\n    fullName: string\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    contacts:{\r\n        facebook?: string\r\n        github?: string\r\n        instagram?: string\r\n        mainLink?: string\r\n        twitter?: string\r\n        vk?: string\r\n        website?: string\r\n        youtube?: string\r\n    }\r\n}","\r\nimport { Dispatch } from \"redux\"\r\nimport { authAPI } from \"../api/authAPI\"\r\nimport { ThunkType } from \"./redux-store\"\r\n\r\nconst SET_LOGIN = 'lapa-app/login-reducer/SET_LOGIN'\r\nconst SET_CAPTCHA = 'lapa-app/login-reducer/SET_CAPTCHA'\r\n\r\n\r\nexport type LoginDataActionType = ReturnType<typeof setLoginData>\r\nexport type CaptchaActionType = ReturnType<typeof setCaptchaUrl>\r\n\r\nexport type LoginActionType = LoginDataActionType | CaptchaActionType\r\n\r\nexport type LoginType = {\r\n    data: {\r\n        login: string,\r\n        password: string\r\n    }\r\n    captchaUrl: string\r\n}\r\n\r\nconst initialProfileState = {\r\n    data: {\r\n        login:'',\r\n        password:'',\r\n    },\r\n    captchaUrl:''\r\n    \r\n}\r\n\r\nexport const setLoginData = (data: {login:string, password:string}) => ({ type: SET_LOGIN, data} as const)\r\nexport const setCaptchaUrl = (captchaUrl: string) => ({ type: SET_CAPTCHA, captchaUrl} as const)\r\n\r\nexport const loginReducer = (state:LoginType  = initialProfileState, action:LoginActionType ) => {\r\n    switch (action.type) {\r\n        case SET_LOGIN: {\r\n            return { ...state, data:action.data}\r\n        }\r\n        case SET_CAPTCHA:{\r\n            return {...state,captchaUrl: action.captchaUrl}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = ():ThunkType => {\r\n    return async (dispatch: Dispatch) => {\r\n        try{\r\n       const res = await authAPI.getCaptcha()\r\n            if (res.data.url) {\r\n                dispatch(setCaptchaUrl(res.data.url))\r\n            }\r\n        }\r\n        catch (error){\r\n            \r\n        }\r\n    }\r\n}\r\n\r\n","import {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {APIProfileType} from \"../../redux/profile-reducer\";\r\n\r\nexport const selectIsAuth = (state:AppRootStateType)=> {\r\n    return state.auth.isAuth\r\n}\r\n\r\nexport const selectMainUserId = (state:AppRootStateType)=> {\r\n    return state.auth.userId\r\n}\r\nexport const selectProfile = (state:AppRootStateType)=> {\r\n    //@ts-ignore\r\n    return state.profilePage.profile\r\n}\r\nexport const selectProfileStatus = (state:AppRootStateType)=> {\r\n    //@ts-ignore\r\n    return state.profilePage.status\r\n}\r\n\r\n","import * as yup from \"yup\";\r\n\r\nexport const postValidationSchema = yup.object().shape({\r\n    post: yup.string()\r\n        .max(100, 'Max length is 100 symbols!')\r\n        .required('Required field'),\r\n\r\n\r\n})\r\n\r\nexport const messageValidationSchema = yup.object().shape({\r\n    message: yup.string()\r\n        .max(100, 'Max length is 100 symbols!')\r\n        .required('Required field'),\r\n})\r\n\r\n\r\nexport const loginningValidationSchema = yup.object({\r\n    login: yup.string().email('Enter valid email'),\r\n    password: yup.string().min(6,'Min length is 6 symbols!' )\r\n}).required('Required field')","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL:`https://social-network.samuraijs.com/api/1.0/`,\r\n})\r\n\r\n\r\nexport const authAPI = {\r\n    getAuth (){\r\n        return instance.get(`auth/me`).then(response => response.data)\r\n    },\r\n    logining(params: {email: string, password: string, rememberMe?:boolean, captcha?: string}){\r\n        return instance.post(`auth/login`, {...params})\r\n    },\r\n    setUnlogging(){\r\n        return instance.delete(`auth/login`)\r\n    },\r\n    getCaptcha(){\r\n        return instance.get('security/get-captcha-url')\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemWrapper\":\"Posts_itemWrapper__2MnQT\",\"item\":\"Posts_item__97VEc\",\"postHeader\":\"Posts_postHeader__Zuu3v\",\"posts\":\"Posts_posts__346gk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2-tPI\",\"dialogItems\":\"Dialogs_dialogItems__3S14B\",\"messages\":\"Dialogs_messages__3Z4qp\"};","import { Dispatch } from \"redux\"\r\nimport { v1 } from \"uuid\"\r\nimport { DialogsType, } from \"./store\"\r\n\r\nconst ADD_MESSAGE = 'lapa-app/dialogs-reducer/ADD-MESSAGE'\r\n\r\n\r\n\r\nexport type DialogsActionType = AddMessageActionType\r\n\r\ntype AddMessageActionType = ReturnType<typeof addMessage>\r\n\r\n\r\nexport const addMessage = (message: string) => ({ type: ADD_MESSAGE, message } as const)\r\n\r\nconst initialDialogState = {\r\n  dialogs: [\r\n    { id: v1(), name: 'Pashka' },\r\n    { id: v1(), name: 'Maks' },\r\n    { id: v1(), name: 'Vlados' },\r\n    { id: v1(), name: 'Leha' },\r\n    { id: v1(), name: 'Dima' }\r\n  ],\r\n  messages: [\r\n    { id: v1(), message: 'Hi' },\r\n    { id: v1(), message: 'How are you?' },\r\n    { id: v1(), message: 'I am fine' }\r\n  ],\r\n\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsType = initialDialogState, action: DialogsActionType) => {\r\n  switch (action.type) {\r\n    case ADD_MESSAGE: {\r\n      let newMessage = {\r\n        id: v1(),\r\n        message: action.message\r\n      }\r\n      return {...state, messages: [...state.messages, newMessage] }\r\n\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default dialogsReducer;\r\n\r\n\r\nexport const addMessageTC = (message:string) => {\r\n  return (dispatch: Dispatch<DialogsActionType>) => {\r\n    dispatch(addMessage(message))\r\n  }\r\n}","import { Dispatch } from \"redux\";\r\nimport { AuthActionType, authMe } from \"./auth-reducer\";\r\nimport {ThunkType} from \"./redux-store\";\r\n\r\nconst SET_INITIALIZED = 'lapa-app/app-reducer/SET_INITIALIZED'\r\n\r\n\r\n\r\nexport type AppActionType = SetInitializedActionType | AuthActionType\r\n\r\nexport type SetInitializedActionType = ReturnType<typeof setInitialized>\r\n\r\n\r\n\r\nexport const setInitialized = (initialized:boolean)=> ({ type: SET_INITIALIZED, initialized } as const)\r\n\r\n\r\n\r\nconst initialAppState = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReduser = (state = initialAppState, action: AppActionType) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED: {\r\n            return { ...state, initialized:action.initialized}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializedTC = ():ThunkType => {\r\n    return (dispatch: Dispatch) => {\r\n      const promise = dispatch<any>(authMe())\r\n      promise.then(()=>{\r\n        dispatch(setInitialized(true))\r\n      })\r\n\r\n    }\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemLink\":\"Navigation_itemLink__3xkIX\",\"active\":\"Navigation_active__2yPBD\",\"item\":\"Navigation_item__1v-e7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selected\":\"Paginator_selected__VHOU2\",\"page\":\"Paginator_page__3O0AH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Users_wrapper__e2WZX\",\"info\":\"Users_info__2-r_M\",\"items\":\"Users_items__2iN-W\",\"selected\":\"Users_selected__168ae\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3XYVZ\",\"postLikes\":\"Post_postLikes__3K5NJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3kJfL\",\"widgets\":\"Header_widgets__1MpT7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__uI-V6\",\"active\":\"Dialog_active__1Vyxt\"};"],"sourceRoot":""}