{"version":3,"sources":["components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Forms/MessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Dialog","props","className","s","dialog","active","to","id","name","Message","message","MessageForm","addMessage","initialValues","validateOnBlur","validationSchema","messageValidationSchema","onSubmit","values","setSubmitting","isSubmitting","errors","touched","dirty","isValid","as","placeholder","component","type","disabled","Dialogs","dialogs","messages","dialogsElements","textareaChange","map","messageElements","dialogItems","item","DialogsContainer","compose","connect","state","dialogsPage","withAuthRedirect"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,yB,oBCA3DD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,SAAW,4B,oJCe5FC,EAV2B,SAACC,GAGvC,OACQ,qBAAKC,UAAWC,IAAEC,OAAS,GAAKD,IAAEE,OAAlC,SACI,cAAC,IAAD,CAASC,GAAI,YAAaL,EAAMM,GAAhC,SAAqCN,EAAMO,QADAP,EAAMM,K,oCCIlDE,EAT4B,SAACR,GAGxC,OACQ,qBAAKC,UAAWC,IAAEO,QAAlB,SAA4BT,EAAMS,W,gBCCjCC,EAAc,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,WAA2C,8BAQpE,OACI,cAAC,IAAD,CACIC,cAAe,CAACH,QAAS,IACzBI,gBAAc,EACdC,iBAAkBC,IAClBC,SAXW,SAACC,EAAD,GAAyF,IAAzDC,EAAwD,EAAxDA,cAC/CP,EAAWM,EAAOR,SAClBS,GAAc,IAKd,SAMK,gBAAEC,EAAF,EAAEA,aACGC,EADL,EACKA,OACAC,EAFL,EAEKA,QAFL,EAGKC,MAHL,EAIKC,QAJL,OAKG,eAAC,IAAD,WACI,cAAC,IAAD,CAAOhB,KAAK,UAAUiB,GAAG,WAAWvB,UAAU,gBAAgBwB,YAAY,uBACzEJ,EAAQZ,SAAWW,EAAOX,SAAW,cAAC,IAAD,CAAcF,KAAK,UAAUmB,UAAU,QAC7E,wBAAQC,KAAK,SAASC,SAAUT,EAAhC,yBCFLU,EAvB4B,SAAC,GAAkE,IAAhEC,EAA+D,EAA/DA,QAASC,EAAsD,EAAtDA,SAAUpB,EAA4C,EAA5CA,WAEvDqB,GAFmG,EAAhCC,eAAgC,oEAEjFH,EAAQI,KAAI,SAACJ,GAAD,OAAa,cAAC,EAAD,CAAyBxB,GAAIwB,EAAQxB,GAAIC,KAAMuB,EAAQvB,MAA1CuB,EAAQxB,QAChE6B,EAAkBJ,EAASG,KAAI,SAACzB,GAAD,OAAa,cAAC,EAAD,CAA0BA,QAASA,EAAQA,QAASH,GAAIG,EAAQH,IAAlDG,EAAQH,OAIxE,OACI,sBAAKL,UAAWC,IAAE4B,QAAlB,UACI,qBAAK7B,UAAWC,IAAEkC,YAAlB,SACKJ,IAEL,qBAAK/B,UAAWC,IAAE6B,SAAlB,SACKI,IAEL,qBAAKlC,UAAWC,IAAEmC,KAAlB,SACI,cAAC,EAAD,CAAa1B,WAAYA,UCJnC2B,EAAmBC,YACvBC,aAVkB,SAACC,GAEnB,MAAO,CACLX,QAASW,EAAMC,YAAYZ,QAC3BC,SAAUU,EAAMC,YAAYX,YAMP,CAACpB,iBACxBgC,IAFuBJ,CAELV,GAELS","file":"static/js/3.cdf3696e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__MV1s0\",\"active\":\"Dialog_active__1OIl0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2UMoM\",\"dialogItems\":\"Dialogs_dialogItems__3jzYh\",\"messages\":\"Dialogs_messages__1-kcy\"};","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { DialogsDataType} from '../../../redux/store'\r\nimport s from './Dialog.module.css'\r\n\r\n\r\nconst Dialog: React.FC<DialogsDataType> = (props) => {\r\n\r\n\r\n    return (\r\n            <div className={s.dialog + '' + s.active} key={props.id}>\r\n                <NavLink to={'/dialogs/'+ props.id}>{props.name}</NavLink>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React from 'react'\r\nimport { MessagesDataType } from '../../../redux/store';\r\nimport s from './Message.module.css'\r\n\r\n\r\nconst Message:React.FC<MessagesDataType> = (props) => {\r\n\r\n\r\n    return (\r\n            <div className={s.message}>{props.message}</div>\r\n\r\n    )\r\n}\r\n\r\nexport default Message;","import {ErrorMessage, Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport React from \"react\";\r\nimport {messageValidationSchema} from \"../../utilits/validations/validationScheme\";\r\n\r\ntype MessageFormValueType = {\r\n    message: string\r\n}\r\ntype MessageFormType = {\r\n    addMessage: (message: string) => void\r\n}\r\nexport const MessageForm = ({addMessage, ...props}: MessageFormType) => {\r\n\r\n    const formSubmit = (values: MessageFormValueType, {setSubmitting}: FormikHelpers<{ message: string; }>) => {\r\n        addMessage(values.message)\r\n        setSubmitting(false);\r\n\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{message: ''}}\r\n            validateOnBlur\r\n            validationSchema={messageValidationSchema}\r\n            onSubmit={formSubmit}\r\n        >\r\n            {({isSubmitting,\r\n                  errors,\r\n                  touched,\r\n                  dirty,\r\n                  isValid,}) => (\r\n                <Form>\r\n                    <Field name=\"message\" as=\"textarea\" className=\"form-textarea\" placeholder='Enter a message...'/>\r\n                    {touched.message && errors.message && <ErrorMessage name=\"message\" component=\"div\" />}\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Send\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}","import React from 'react'\r\nimport {PostMessageType} from '../../redux/store'\r\nimport Dialog from './Dialog/Dialog'\r\nimport s from './Dialogs.module.css'\r\nimport Message from './Message/Message'\r\nimport {MessageForm} from \"../Forms/MessageForm\";\r\n\r\n\r\nconst Dialogs: React.FC<PostMessageType> = ({ dialogs, messages, addMessage, textareaChange,  ...props }) => {\r\n\r\n    const dialogsElements = dialogs.map((dialogs) => <Dialog key={dialogs.id} id={dialogs.id} name={dialogs.name} />)\r\n    const messageElements = messages.map((message) => <Message key={message.id} message={message.message} id={message.id} />)\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageElements}\r\n            </div>\r\n            <div className={s.item}>\r\n                <MessageForm addMessage={addMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","import React from 'react'\r\nimport { connect, ConnectedComponent } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { compose } from 'redux'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { addMessage } from '../../redux/dialogs-reducer'\r\nimport { ActionType, StateDataType } from '../../redux/store'\r\nimport Dialogs from './Dialogs'\r\n\r\n\r\n\r\nlet mapStateProps = (state:StateDataType) => {\r\n\r\n  return {\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages,\r\n  }\r\n}\r\n\r\n\r\nconst DialogsContainer = compose<ConnectedComponent<(props: any) => JSX.Element, Omit<any, \"isAuth\" | \"dispatch\">>>(\r\n  connect (mapStateProps,{addMessage}),\r\n  withAuthRedirect)(Dialogs);\r\n\r\nexport default DialogsContainer;"],"sourceRoot":""}