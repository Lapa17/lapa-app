{"version":3,"sources":["components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","utilits/validations/validationScheme.ts","utilits/ga/useAnalyticsEventTracker.tsx","components/Forms/MessageForm.tsx","utilits/selectors/dialogs-selector.ts","components/Dialogs/Dialogs.tsx"],"names":["module","exports","Dialog","props","className","s","dialog","activeClassName","active","to","id","name","Message","message","messageValidationSchema","yup","shape","post","max","login","email","password","min","required","useAnalyticsEventTracker","category","eventTracker","action","label","ReactGA","event","MessageForm","gaEventTracker","dispatch","useDispatch","initialValues","validateOnBlur","validationSchema","onSubmit","values","setSubmitting","addMessage","isSubmitting","errors","touched","dirty","isValid","as","placeholder","component","type","disabled","selectDialogs","state","dialogsPage","dialogs","selectMessages","messages","Dialogs","isAuth","useAppSelector","selectIsAuth","dialogsElements","map","messageElements","dialogItems","item"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,yB,oBCA3DD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,SAAW,4B,wGCc5FC,EAV2B,SAACC,GAGvC,OACQ,qBAAKC,UAAWC,IAAEC,OAAlB,SACI,cAAC,IAAD,CAASC,gBAAiBF,IAAEG,OAAQC,GAAI,YAAaN,EAAMO,GAA3D,SAAgEP,EAAMQ,QAD3CR,EAAMO,K,oCCKlCE,EAT4B,SAACT,GAGxC,OACQ,qBAAKC,UAAWC,IAAEQ,QAAlB,SAA4BV,EAAMU,W,kBCAjCC,GAPuBC,MAAaC,MAAM,CACnDC,KAAMF,MACDG,IAAI,IAAK,gCAKqBH,MAAaC,MAAM,CACtDH,QAASE,MACJG,IAAI,IAAK,iC,GAIuBH,IAAW,CAChDI,MAAOJ,MAAaK,MAAM,qBAC1BC,SAAUN,MAAaO,IAAI,EAAE,8BAC9BC,SAAS,kB,yBCTGC,EANkB,WAA+B,IAA9BC,EAA6B,uDAApB,gBACjCC,EAAe,WAAmD,IAAlDC,EAAiD,uDAAxC,cAAeC,EAAyB,uDAAjB,aAClDC,IAAQC,MAAM,CAACL,WAAUE,SAAQC,WAErC,OAAOF,GCIEK,EAAc,WAEvB,IAAMC,EAAiBR,EAAyB,cAC1CS,EAAWC,cAQjB,OACI,cAAC,IAAD,CACIC,cAAe,CAACtB,QAAS,IACzBuB,gBAAc,EACdC,iBAAkBvB,EAClBwB,SAZW,SAACC,EAAD,GAAyF,IAAzDC,EAAwD,EAAxDA,cAC/CR,EAAe,QACfC,EAASQ,YAAWF,EAAO1B,UAC3B2B,GAAc,IAKd,SAMK,gBAAEE,EAAF,EAAEA,aACGC,EADL,EACKA,OACAC,EAFL,EAEKA,QAFL,EAGKC,MAHL,EAIKC,QAJL,OAKG,eAAC,IAAD,WACI,cAAC,IAAD,CAAOnC,KAAK,UAAUoC,GAAG,WAAW3C,UAAU,gBAAgB4C,YAAY,uBACzEJ,EAAQ/B,SAAW8B,EAAO9B,SAAW,cAAC,IAAD,CAAcF,KAAK,UAAUsC,UAAU,QAC7E,wBAAQC,KAAK,SAASC,SAAUT,EAAhC,yB,QClCPU,EAAgB,SAACC,GAC1B,OAAOA,EAAMC,YAAYC,SAGhBC,EAAiB,SAACH,GAC3B,OAAOA,EAAMC,YAAYG,U,gBCgCdC,UA7BC,WAEZ,IAAMC,EAASC,YAAeC,KACxBN,EAAUK,YAAeR,GACzBK,EAAWG,YAAeJ,GAE1BM,EAAkBP,EAAQQ,KAAI,SAACR,GAAD,OAAa,cAAC,EAAD,CAAyB7C,GAAI6C,EAAQ7C,GAAIC,KAAM4C,EAAQ5C,MAA1C4C,EAAQ7C,OAChEsD,EAAkBP,EAASM,KAAI,SAAClD,GAAD,OAAa,cAAC,EAAD,CAA0BA,QAASA,EAAQA,QAASH,GAAIG,EAAQH,IAAlDG,EAAQH,OAExE,OAAKiD,EAKD,sBAAKvD,UAAWC,IAAEkD,QAAlB,UACI,qBAAKnD,UAAWC,IAAE4D,YAAlB,SACKH,IAEL,qBAAK1D,UAAWC,IAAEoD,SAAlB,SACKO,IAEL,qBAAK5D,UAAWC,IAAE6D,KAAlB,SACI,cAAC,EAAD,SAZD,cAAC,IAAD,CAAUzD,GAAI","file":"static/js/4.10ba73c0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__uI-V6\",\"active\":\"Dialog_active__1Vyxt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2-tPI\",\"dialogItems\":\"Dialogs_dialogItems__3S14B\",\"messages\":\"Dialogs_messages__3Z4qp\"};","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { DialogsDataType} from '../../../redux/store'\r\nimport s from './Dialog.module.css'\r\n\r\nconst Dialog: React.FC<DialogsDataType> = (props) => {\r\n\r\n\r\n    return (\r\n            <div className={s.dialog} key={props.id}>\r\n                <NavLink activeClassName={s.active} to={'/dialogs/'+ props.id}>{props.name}</NavLink>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React from 'react'\r\nimport { MessagesDataType } from '../../../redux/store';\r\nimport s from './Message.module.css'\r\n\r\n\r\nconst Message:React.FC<MessagesDataType> = (props) => {\r\n\r\n\r\n    return (\r\n            <div className={s.message}>{props.message}</div>\r\n\r\n    )\r\n}\r\n\r\nexport default Message;","import * as yup from \"yup\";\r\n\r\nexport const postValidationSchema = yup.object().shape({\r\n    post: yup.string()\r\n        .max(100, 'Max length is 100 symbols!')\r\n\r\n\r\n})\r\n\r\nexport const messageValidationSchema = yup.object().shape({\r\n    message: yup.string()\r\n        .max(100, 'Max length is 100 symbols!')\r\n})\r\n\r\n\r\nexport const loginningValidationSchema = yup.object({\r\n    login: yup.string().email('Enter valid email'),\r\n    password: yup.string().min(6,'Min length is 6 symbols!' )\r\n}).required('Required field')","import React from \"react\";\r\nimport ReactGA from \"react-ga\";\r\n\r\nconst useAnalyticsEventTracker = (category=\"Blog category\") => {\r\n    const eventTracker = (action = \"test action\", label = \"test label\") => {\r\n        ReactGA.event({category, action, label});\r\n    }\r\n    return eventTracker;\r\n}\r\nexport default useAnalyticsEventTracker;","import {ErrorMessage, Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport React from \"react\";\r\nimport {messageValidationSchema} from \"../../utilits/validations/validationScheme\";\r\nimport {addMessage} from \"../../redux/dialogs-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport useAnalyticsEventTracker from \"../../utilits/ga/useAnalyticsEventTracker\";\r\n\r\ntype MessageFormValueType = {\r\n    message: string\r\n}\r\n\r\nexport const MessageForm = () => {\r\n\r\n    const gaEventTracker = useAnalyticsEventTracker('Contact us')\r\n    const dispatch = useDispatch()\r\n    const formSubmit = (values: MessageFormValueType, {setSubmitting}: FormikHelpers<{ message: string; }>) => {\r\n        gaEventTracker('call')\r\n        dispatch(addMessage(values.message))\r\n        setSubmitting(false);\r\n\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{message: ''}}\r\n            validateOnBlur\r\n            validationSchema={messageValidationSchema}\r\n            onSubmit={formSubmit}\r\n        >\r\n            {({isSubmitting,\r\n                  errors,\r\n                  touched,\r\n                  dirty,\r\n                  isValid,}) => (\r\n                <Form>\r\n                    <Field name=\"message\" as=\"textarea\" className=\"form-textarea\" placeholder='Enter a message...'/>\r\n                    {touched.message && errors.message && <ErrorMessage name=\"message\" component=\"div\" />}\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Send\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}","import {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {createSelector} from 'reselect'\r\n\r\nexport const selectDialogs = (state:AppRootStateType)=> {\r\n    return state.dialogsPage.dialogs\r\n}\r\n\r\nexport const selectMessages = (state:AppRootStateType)=> {\r\n    return state.dialogsPage.messages\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport Dialog from './Dialog/Dialog'\r\nimport s from './Dialogs.module.css'\r\nimport Message from './Message/Message'\r\nimport {MessageForm} from \"../Forms/MessageForm\";\r\nimport {useAppSelector} from \"../../redux/redux-store\";\r\nimport {selectDialogs, selectMessages} from \"../../utilits/selectors/dialogs-selector\";\r\nimport {selectIsAuth} from \"../../utilits/selectors/profile-selector\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nconst Dialogs = () => {\r\n\r\n    const isAuth = useAppSelector(selectIsAuth)\r\n    const dialogs = useAppSelector(selectDialogs)\r\n    const messages = useAppSelector(selectMessages)\r\n\r\n    const dialogsElements = dialogs.map((dialogs) => <Dialog key={dialogs.id} id={dialogs.id} name={dialogs.name} />)\r\n    const messageElements = messages.map((message) => <Message key={message.id} message={message.message} id={message.id} />)\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageElements}\r\n            </div>\r\n            <div className={s.item}>\r\n                <MessageForm />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;"],"sourceRoot":""}