{"version":3,"sources":["api/authAPI.ts","components/Users/Users.module.css","redux/app-reducer.ts","components/Profile/Profile.module.css","components/Profile/Posts/Posts.module.css","redux/dialogs-reducer.ts","components/Profile/Posts/Post/Post.module.css","components/Header/Widgets/Widgets.module.css","components/Login/Login.tsx","assets/images/loader.gif","components/common/Preloader/Preloader.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/Posts/Post/PostComment.tsx","components/Profile/Posts/Post/Post.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Posts/PostsContainer.tsx","components/Forms/PostForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Header/Widgets/Widget/Widget.tsx","components/Header/Widgets/Widgets.tsx","components/Header/Header.tsx","components/common/Paginator/Paginator.tsx","assets/images/user.png","components/Users/User.tsx","utilits/selectors/user-selector.ts","components/Users/Users.tsx","App.tsx","reportWebVitals.ts","index.tsx","redux/navbar-right-reduser.ts","redux/redux-store.tsx","redux/profile-reducer.ts","utilits/selectors/profile-selector.ts","redux/auth-reducer.ts","api/usersAPI.ts","redux/users-reducer.ts","api/profileAPI.ts","redux/login-reducer.ts"],"names":["instance","axios","create","withCredentials","baseURL","authAPI","getAuth","get","then","response","data","logining","params","post","setUnlogging","delete","getCaptcha","module","exports","SET_INITIALIZED","initialAppState","initialized","appReduser","state","action","type","initializedTC","dispatch","authMe","ADD_MESSAGE","addMessage","message","initialDialogState","dialogs","id","v1","name","messages","dialogsReducer","newMessage","connect","login","password","isAuth","auth","errorMessage","captchaUrl","setLoginData","setAuth","getCaptchaUrl","props","Form","useForm","form","loginRequest","email","rememberMe","captcha","to","justify","style","height","xs","span","offset","md","lg","xl","boxShadow","textAlign","onFinish","Item","rules","required","placeholder","src","width","htmlType","href","target","Preloader","loader","ProfileStatusWithHooks","useDispatch","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileData","aboutMe","userId","fullName","lookingForAJob","lookingForAJobDescription","contacts","Meta","Card","Typography","Paragraph","github","profile","setProfile","onValueChange","checked","marginBottom","title","fontSize","EditOutlined","onClick","hoverable","description","margin","borderRadius","updateProfile","PostComment","likes","setLikes","dislikes","setDislikes","setAction","actions","createElement","LikeFilled","LikeOutlined","className","React","DislikeFilled","DislikeOutlined","s","comment","author","content","Post","memo","avatar","photos","small","Posts","addPost","myPost","newPost","posts","postsElements","map","m","postMessage","PostsContainer","profilePage","PostForm","forceUpdate","TextArea","Input","values","console","log","resetFields","onFinishFailed","errorInfo","error","align","max","rows","setFieldsValue","icon","SendOutlined","buttonImg","buttonText","ProfileInfo","inRef","useRef","wrapper","large","paddingBottom","DownloadOutlined","size","current","click","ref","display","files","updateLargePhoto","avatarCard","count","Profile","useAppSelector","selectIsAuth","selectProfile","selectProfileStatus","mainUserId","selectMainUserId","useParams","getProfile","getStatus","direction","Widget","Widgets","widgets","smallPhoto","HeaderRC","Header","Layout","selectLogin","selectSmallPhoto","padding","position","right","zIndex","minWidth","setLogOut","Paginator","totalItemsCounter","pageSize","currentPage","onPageClick","portionSize","pagesCount","Math","ceil","pages","i","push","setPortionNumber","showSizeChanger","onShowSizeChange","defaultCurrent","total","page","User","user","followInProgress","items","img","userPhoto","followed","disabled","some","getUnFollow","marginTop","getFollow","info","getUser","users","getPageSize","getTotalUserCounter","totalUserCounter","getCurrentPage","getIsFetchingData","isFetching","getFollowInProgressData","Users","getUsers","u","getPage","Dialogs","lazy","App","catchAllUnhandledErrors","event","alert","this","window","addEventListener","ReactGA","pageview","location","pathname","search","removeEventListener","Content","Footer","Sider","hasSider","breakpoint","collapsedWidth","mode","defaultSelectedKeys","UserOutlined","VideoCameraOutlined","UploadOutlined","overflow","fallback","path","render","exact","background","Component","compose","withRouter","friends","navbarRight","app","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialize","ReactDOM","store","document","getElementById","initialNavbarState","navbarRightReduser","reducers","combineReducers","profileReducer","dialogsPage","usersReducer","authReducer","loginReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","createStore","applyMiddleware","thunkMiddleware","useSelector","ADD_POST","DELETE_POST","SET_USER_PROFILE","SET_STATUS","UPDATE_PHOTO","UPDATE_PROFILE","updatePhoto","photo","updateProfileAC","initialProfileState","filter","postId","profileUserId","a","profileAPI","getProfileStatus","resultCode","addPostAC","getState","SET_AUTH_DATA","SET_USER_PHOTO","SET_AUTH_CHANGE","GET_LOGIN_ERROR","setAuthData","setAuthChange","res","headers","usersAPI","setFollow","setUnFollow","IS_FOLLOWING","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialUsersState","userID","follow","totalCount","isFollowing","setUsers","setCurrentPage","toggleIsFetching","toggleIsFollowingProgress","followUnfollow","apiMethod","bind","put","image","formData","FormData","append","SET_LOGIN","SET_CAPTCHA","url"],"mappings":"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","file":"static/js/main.81351420.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL:`https://social-network.samuraijs.com/api/1.0/`,\r\n})\r\n\r\n\r\nexport const authAPI = {\r\n    getAuth (){\r\n        return instance.get(`auth/me`).then(response => response.data)\r\n    },\r\n    logining(params: {email: string, password: string, rememberMe?:boolean, captcha?: string}){\r\n        return instance.post(`auth/login`, {...params})\r\n    },\r\n    setUnlogging(){\r\n        return instance.delete(`auth/login`)\r\n    },\r\n    getCaptcha(){\r\n        return instance.get('security/get-captcha-url')\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Users_wrapper__e2WZX\",\"img\":\"Users_img__3zEQw\",\"info\":\"Users_info__2-r_M\",\"items\":\"Users_items__2iN-W\",\"selected\":\"Users_selected__168ae\"};","import { Dispatch } from \"redux\";\r\nimport { AuthActionType, authMe } from \"./auth-reducer\";\r\nimport {ThunkType} from \"./redux-store\";\r\n\r\nconst SET_INITIALIZED = 'lapa-app/app-reducer/SET_INITIALIZED'\r\n\r\n\r\n\r\nexport type AppActionType = SetInitializedActionType | AuthActionType\r\n\r\nexport type SetInitializedActionType = ReturnType<typeof setInitialized>\r\n\r\n\r\n\r\nexport const setInitialized = (initialized:boolean)=> ({ type: SET_INITIALIZED, initialized } as const)\r\n\r\n\r\n\r\nconst initialAppState = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReduser = (state = initialAppState, action: AppActionType) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED: {\r\n            return { ...state, initialized:action.initialized}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializedTC = ():ThunkType => {\r\n    return (dispatch: Dispatch) => {\r\n      const promise = dispatch<any>(authMe())\r\n      promise.then(()=>{\r\n        dispatch(setInitialized(true))\r\n      })\r\n\r\n    }\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatarCard\":\"Profile_avatarCard__3bNmH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comment\":\"Posts_comment__3RsT-\",\"buttonText\":\"Posts_buttonText__QTuMT\",\"buttonImg\":\"Posts_buttonImg__2m8j5\"};","import { Dispatch } from \"redux\"\r\nimport { v1 } from \"uuid\"\r\nimport { DialogsType, } from \"./store\"\r\n\r\nconst ADD_MESSAGE = 'lapa-app/dialogs-reducer/ADD-MESSAGE'\r\n\r\n\r\n\r\nexport type DialogsActionType = AddMessageActionType\r\n\r\ntype AddMessageActionType = ReturnType<typeof addMessage>\r\n\r\n\r\nexport const addMessage = (message: string) => ({ type: ADD_MESSAGE, message } as const)\r\n\r\nconst initialDialogState = {\r\n  dialogs: [\r\n    { id: v1(), name: 'Pashka' },\r\n    { id: v1(), name: 'Maks' },\r\n    { id: v1(), name: 'Vlados' },\r\n    { id: v1(), name: 'Leha' },\r\n    { id: v1(), name: 'Dima' }\r\n  ],\r\n  messages: [\r\n    { id: v1(), message: 'Hi' },\r\n    { id: v1(), message: 'How are you?' },\r\n    { id: v1(), message: 'I am fine' }\r\n  ],\r\n\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsType = initialDialogState, action: DialogsActionType) => {\r\n  switch (action.type) {\r\n    case ADD_MESSAGE: {\r\n      let newMessage = {\r\n        id: v1(),\r\n        message: action.message\r\n      }\r\n      return {...state, messages: [...state.messages, newMessage] }\r\n\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default dialogsReducer;\r\n\r\n\r\nexport const addMessageTC = (message:string) => {\r\n  return (dispatch: Dispatch<DialogsActionType>) => {\r\n    dispatch(addMessage(message))\r\n  }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3XYVZ\",\"postLikes\":\"Post_postLikes__3K5NJ\",\"comment\":\"Post_comment__2YaxH\",\"commentAction\":\"Post_commentAction__VcIJC\",\"comment-action\":\"Post_comment-action__1hGE4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"widgets\":\"Widgets_widgets__18IS7\"};","import React, {useEffect, useState} from 'react'\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { setAuth } from '../../redux/auth-reducer';\r\nimport { StateDataType } from '../../redux/store';\r\nimport { loginningValidationSchema } from '../../utilits/validations/validationScheme';\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport {getCaptchaUrl, setLoginData} from \"../../redux/login-reducer\";\r\nimport {Button, Card, Checkbox, Col, Form, Input, Row} from \"antd\";\r\n\r\ntype Inputs = {\r\n    login: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n    captcha?: string\r\n};\r\n\r\ntype LoginPropsType = {\r\n    isAuth: boolean\r\n    login: string,\r\n    password: string,\r\n    errorMessage?:string\r\n    setLoginData: (data: {\r\n        login: string,\r\n        password: string,\r\n    }) => void\r\n    setAuth: (email: string, password: string, rememberMe:boolean, captcha?: string) => void\r\n    getCaptchaUrl: ()=> void\r\n    captchaUrl: string\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    // const { register, handleSubmit, formState: { errors } } = useForm<Inputs>({\r\n    //     resolver: yupResolver (loginningValidationSchema)\r\n    // });\r\n    const [form] = Form.useForm()\r\n    const onSubmit: SubmitHandler<Inputs> = (data) => {\r\n        loginRequest(data.login, data.password, data.rememberMe, data.captcha);\r\n        props.setLoginData(data)\r\n    }\r\n    const loginRequest = (email: string, password: string, rememberMe:boolean, captcha?:string) => {\r\n        props.setAuth(email, password, rememberMe,captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n    // {pattern: /^[A-Za-z]+$/i , message: 'Incorrect symbols'},\r\n    return (\r\n        <Row justify={\"center\"} style={{height:'90vh'}}>\r\n        <Col xs={{ span: 23, offset: 1 }}\r\n             md={{ span: 23, offset: 1 }}\r\n             lg={{ span: 8, offset: 1 }}\r\n             xl={{ span: 8, offset: 1 }}>\r\n            <Card style={{boxShadow: 'rgb(0 0 0 / 50%) 5px 6px 10px -5px', textAlign:\"center\"}}>\r\n            <h1>LOGIN PAGE</h1>\r\n            <Form onFinish={onSubmit} form={form}>\r\n                <Form.Item name=\"login\" rules={[{required: true, message:'You need to write your Email'},\r\n                    {type:'email', message: 'Must be Email' }]}>\r\n                    <Input name=\"login\" placeholder={'Email'}/>\r\n                </Form.Item>\r\n                <Form.Item name=\"password\" rules={[{required: true, message:'You need to write your password'}]}>\r\n                    <Input name=\"password\" placeholder={'Password'}/>\r\n                </Form.Item>\r\n                <Form.Item name=\"rememberMe\">\r\n                    <Checkbox name=\"rememberMe\">Remember me</Checkbox>\r\n                </Form.Item>\r\n                {props.captchaUrl && <Form.Item name=\"captcha\">\r\n                    <img src={props.captchaUrl} style={{width:'200px'}}/>\r\n                    <Input type='text' name=\"captcha\"/>\r\n                </Form.Item>}\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n                <p>To log in get registered\r\n                    <a href={'https://social-network.samuraijs.com/'}\r\n                       target={'_blank'}> here\r\n                    </a>\r\n                </p>\r\n                <p>or use common test account credentials:</p>\r\n                <p>Email: free@samuraijs.com</p>\r\n                <p>Password: free</p>\r\n            </Form>\r\n            </Card>\r\n        </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: StateDataType) => ({\r\n    login: state.login.data.login,\r\n    password: state.login.data.password,\r\n    isAuth: state.auth.isAuth,\r\n    errorMessage: state.auth.errorMessage,\r\n    captchaUrl: state.login.captchaUrl\r\n})\r\n\r\nexport default connect(mapStateToProps, { setLoginData, setAuth, getCaptchaUrl })(Login);;\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/loader.07928bad.gif\";","import loader from '../../../assets/images/loader.gif'\r\n\r\n\r\nconst Preloader = () => {\r\n    return (<div>\r\n        <img src={loader} />\r\n    </div>)\r\n\r\n}\r\nexport default Preloader;","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport { updateStatus } from \"../../../redux/profile-reducer\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        dispatch(updateStatus(status))\r\n    }\r\n    const onChangeInput = (e: any) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={onEditMode}>{props.status || 'clear status'}</span>\r\n            </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus onChange={onChangeInput} value={status} onBlur={offEditMode}/>\r\n            </div>}\r\n        </div>)\r\n}\r\n    \r\n    \r\n\r\n","import { useDispatch } from \"react-redux\";\r\nimport { ChangeEvent, useEffect, useState } from \"react\";\r\nimport { UpdateProfileType } from \"../../../api/profileAPI\";\r\nimport { updateProfile } from \"../../../redux/profile-reducer\";\r\nimport { Card } from 'antd';\r\nimport { Checkbox, Radio, Typography, Divider } from 'antd';\r\nimport { CheckOutlined, HighlightOutlined, SmileOutlined, SmileFilled, EditOutlined } from '@ant-design/icons';\r\n\r\nimport { Button } from 'antd';\r\n\r\n\r\n\r\ntype ProfileDataType = {\r\n    aboutMe: string\r\n    userId: number\r\n    fullName: string\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    contacts: {\r\n        facebook?: string\r\n        github?: string\r\n        instagram?: string\r\n        mainLink?: string\r\n        twitter?: string\r\n        vk?: string\r\n        website?: string\r\n        youtube?: string\r\n    }\r\n}\r\n\r\n\r\nexport const ProfileData = ({ aboutMe, userId, fullName, lookingForAJob, lookingForAJobDescription, contacts, ...props }: ProfileDataType) => {\r\n\r\n    const { Meta } = Card;\r\n    const { Paragraph } = Typography;\r\n\r\n    const dispatch = useDispatch()\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [profile, setProfile] = useState<UpdateProfileType>({\r\n        aboutMe,\r\n        userId,\r\n        fullName,\r\n        lookingForAJobDescription,\r\n        lookingForAJob,\r\n        contacts: {\r\n            github: contacts.github\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        setProfile(\r\n            {\r\n                aboutMe,\r\n                userId,\r\n                fullName,\r\n                lookingForAJobDescription,\r\n                lookingForAJob,\r\n                contacts: {\r\n                    github: contacts.github\r\n                }\r\n\r\n            })\r\n    }, [aboutMe, userId, fullName, lookingForAJob, lookingForAJobDescription, contacts])\r\n\r\n    const onValueChange = (e: ChangeEvent<HTMLInputElement>, name: string) => {\r\n        switch (name) {\r\n            case \"fullName\": {\r\n                return setProfile({ ...profile, fullName: e.currentTarget.value })\r\n            }\r\n            case \"aboutMe\": {\r\n                return setProfile({ ...profile, aboutMe: e.currentTarget.value })\r\n            }\r\n            case \"lookingForAJobDescription\": {\r\n                return setProfile({ ...profile, lookingForAJobDescription: e.currentTarget.value })\r\n            }\r\n            case \"lookingForAJob\": {\r\n                return setProfile({ ...profile, lookingForAJob: e.currentTarget.checked })\r\n            }\r\n            case \"contacts.github\": {\r\n                return setProfile({ ...profile, contacts: { ...contacts, github: e.currentTarget.value } })\r\n            }\r\n            default: {\r\n                return profile\r\n            }\r\n        }\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        dispatch(updateProfile({\r\n            aboutMe: profile.aboutMe,\r\n            userId: profile.userId,\r\n            fullName: profile.fullName,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            contacts: {\r\n                github: profile.contacts.github\r\n            }\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            {!editMode &&\r\n            <>\r\n                <Card\r\n                    style={{ marginBottom: '10px', boxShadow:'rgb(0 0 0 / 50%) -6px 5px 10px -5px'}}\r\n                    title={<span style={{fontSize:20}}>{fullName}<EditOutlined onClick={onEditMode}></EditOutlined></span>}\r\n                    hoverable>\r\n                    <Meta\r\n                        title={aboutMe}\r\n                        description={`I'm ${lookingForAJobDescription} and ${lookingForAJob ? 'find' : 'dont find'} a job`} />                        \r\n                </Card>\r\n                <Card title='Contacts:' style={{ marginBottom: '10px', boxShadow:'rgb(0 0 0 / 50%) -6px 5px 10px -5px' }} >\r\n                    <Meta title={<span><a href={contacts.github} target={'_blank'}>\r\n                {contacts.github}</a></span>}/>\r\n                </Card>\r\n                </>}\r\n            {editMode &&\r\n                <Card style={{ margin: '10px', borderRadius: '5px' }}\r\n                    title={<span>\r\n                        Fullname: <input type=\"text\" value={profile.fullName} onChange={(e) => onValueChange(e, 'fullName')} />\r\n                    <Button type=\"primary\" onClick={offEditMode}>Save</Button></span>}\r\n                    hoverable>\r\n\r\n                    <Meta\r\n                        title={<div>\r\n                            About me: <input type=\"text\" value={profile.aboutMe} onChange={(e) => onValueChange(e, 'aboutMe')} />\r\n                        </div>}\r\n                        description={<div>I'm {<span>\r\n                            lookingForAJobDescription: <input type=\"text\" value={profile.lookingForAJobDescription}\r\n                                onChange={(e) => onValueChange(e, 'lookingForAJobDescription')} />\r\n                        </span>} and {<span>\r\n                            lookingForAJob: <input type='checkbox' checked={profile.lookingForAJob} onChange={(e) => onValueChange(e, \"lookingForAJob\")} />\r\n                        </span>} a job </div>} />\r\n\r\n                    <Meta\r\n                        title={<span><a href={contacts.github} target={'_blank'}>\r\n                            {<div>\r\n                                contacts: <input type=\"text\" value={profile.contacts.github}\r\n                                    onChange={(e) => onValueChange(e, 'contacts.github')} />\r\n                            </div>}</a></span>} />\r\n\r\n\r\n                </Card>}\r\n\r\n        </div>\r\n    )\r\n}","import {Comment, Tooltip, Avatar, Row} from 'antd';\r\nimport moment from 'moment';\r\nimport {DislikeOutlined, LikeOutlined, DislikeFilled, LikeFilled} from '@ant-design/icons';\r\nimport { createElement, useState } from 'react';\r\nimport React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype CommentPropsType ={\r\n    author: string\r\n    avatar: string\r\n    content: string\r\n}\r\n\r\nexport const PostComment = (props: CommentPropsType) => {\r\n    const [likes, setLikes] = useState(0);\r\n    const [dislikes, setDislikes] = useState(0);\r\n    const [action, setAction] = useState<'liked' | 'disliked' | null>(null);\r\n\r\n    const like = () => {\r\n        setLikes(1);\r\n        setDislikes(0);\r\n        setAction('liked');\r\n    };\r\n\r\n    const dislike = () => {\r\n        setLikes(0);\r\n        setDislikes(1);\r\n        setAction('disliked');\r\n    };\r\n\r\n    const actions = [\r\n        <Tooltip key=\"comment-basic-like\" title=\"Like\">\r\n      <span onClick={like}>\r\n        {createElement(action === 'liked' ? LikeFilled : LikeOutlined)}\r\n          <span className=\"comment-action\">{likes}</span>\r\n      </span>\r\n        </Tooltip>,\r\n        <Tooltip key=\"comment-basic-dislike\" title=\"Dislike\">\r\n      <span onClick={dislike}>\r\n        {React.createElement(action === 'disliked' ? DislikeFilled : DislikeOutlined)}\r\n          <span className=\"comment-action\">{dislikes}</span>\r\n      </span>\r\n        </Tooltip>\r\n    ];\r\n\r\n    return (\r\n        <Comment\r\n        className={s.comment}\r\n            actions={actions}\r\n            author={props.author}\r\n            content={\r\n                <p>\r\n                    {props.content}\r\n                </p>\r\n            }\r\n            style={{boxShadow:'rgb(0 0 0 / 50%) -6px 5px 10px -5px'}}\r\n            \r\n            // datetime={\r\n            //     <Tooltip title={moment().format('YYYY-MM-DD HH:mm:ss')}>\r\n            //         <span>{moment().fromNow()}</span>\r\n            //     </Tooltip>\r\n            // }\r\n        />\r\n    );\r\n};","import React from 'react';\r\nimport { PostMesageType } from '../../../../redux/store';\r\nimport {Col} from \"antd\";\r\nimport { PostComment } from './PostComment';\r\n\r\n\r\nconst Post:React.FC<PostMesageType> = React.memo((props) => { \r\n  return <Col span={24} style={{marginBottom: 10}}\r\n  >\r\n      <PostComment author={props.profile.fullName} avatar={props.profile.photos.small} content={props.message}/>\r\n  </Col>\r\n\r\n})\r\n\r\nexport default Post;","import React, {ChangeEventHandler, MouseEventHandler} from 'react';\r\nimport {AddPostType} from '../../../redux/store';\r\nimport Post from './Post/Post';\r\nimport s from './Posts.module.css'\r\nimport {PostForm} from \"../../Forms/PostForm\";\r\nimport {createElement, useState} from 'react';\r\nimport {Comment, Tooltip, Avatar, Row} from 'antd';\r\n\r\n\r\nconst Posts: React.FC<AddPostType> = React.memo(({addPost, myPost, newPost, posts, profile, ...props}) => {\r\n\r\n    const postsElements = posts.map((m) => <Post profile={profile} key={m.id} message={m.postMessage} likes={m.likes} id={m.id}/>)\r\n\r\n    return <div>\r\n                {postsElements}\r\n    </div>\r\n})\r\n\r\nexport default Posts;\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  addPost,\r\n} from '../../../redux/profile-reducer';\r\nimport { StateDataType } from '../../../redux/store';\r\nimport Posts from './Posts';\r\n\r\n\r\n\r\n\r\nconst mapStateProps = (state:StateDataType) =>{\r\n  return {  \r\n    myPost:state.profilePage.myPost,\r\n    newPost:state.profilePage.newPost,\r\n    posts: state.profilePage.posts,\r\n    profile: state.profilePage.profile\r\n  }\r\n}\r\n\r\n\r\nconst PostsContainer = connect (mapStateProps,{addPost}) (Posts);\r\n\r\nexport default PostsContainer;","import React, { ChangeEvent, useEffect, useState } from \"react\";\r\nimport { addPost } from \"../../redux/profile-reducer\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport s from '../Profile/Posts/Posts.module.css'\r\nimport { Col, Row } from \"antd\";\r\nimport { Form, Input, Button, message, Checkbox } from 'antd';\r\nimport {SendOutlined} from '@ant-design/icons'\r\n\r\nexport const PostForm = () => {\r\n\r\n    const [form] = Form.useForm();\r\n    const [, forceUpdate] = useState({});\r\n\r\n\r\n    useEffect(() => {\r\n        forceUpdate({});\r\n    }, []);\r\n\r\n    const { TextArea } = Input;\r\n    const dispatch = useDispatch()\r\n    const formSubmit = (values: { post: string }) => {\r\n        console.log('Success:', values);\r\n        dispatch(addPost(values.post))\r\n        form.resetFields()\r\n    }\r\n    const onFinishFailed = (errorInfo: any) => {\r\n        console.log('Failed:', errorInfo);\r\n        message.error('Post must be maximum 100 characters.')\r\n    };\r\n    const onChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        form.setFieldsValue({ post: e.currentTarget.value })\r\n    }\r\n\r\n    const addPostClass = `addPost`\r\n\r\n    return (\r\n        <Form onFinish={formSubmit} form={form}\r\n            onFinishFailed={onFinishFailed} >\r\n            <Row justify=\"center\" align=\"middle\">\r\n                <Col xs={{ span: 17, offset: 1 }}\r\n                        md={{ span: 17, offset: 1 }}\r\n                        lg={{ span: 17, offset: 1 }}\r\n                        xl={{ span: 17, offset: 1 }}>\r\n                    <Form.Item\r\n                        rules={[{ max: 100, message: 'Post must be maximum 100 characters.' }]}\r\n                        name='post'\r\n                        style={{marginBottom: 0}}>\r\n                        <TextArea rows={2} name='post' onChange={onChange} required style={{borderRadius: 10}}/>\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col xs={{ span: 5, offset: 1 }}\r\n                        md={{ span: 5, offset: 1 }}\r\n                        lg={{ span: 5, offset: 1 }}\r\n                        xl={{ span: 5, offset: 1 }}>\r\n                    <Form.Item style={{marginBottom: 0}}>\r\n                        <Button type=\"primary\" className={addPostClass} htmlType=\"submit\" icon={<SendOutlined className={s.buttonImg}/>}>\r\n                            <span className={s.buttonText}>Add post</span>\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    )\r\n}","import s from '../Profile.module.css';\r\nimport { APIProfileType, updateLargePhoto } from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport { ChangeEvent, useRef } from \"react\";\r\nimport { ProfileStatusWithHooks } from \"./ProfileStatusWithHooks\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ProfileData } from \"./ProfileData\";\r\nimport { Avatar, Card, Col, Row } from \"antd\";\r\nimport { Image } from 'antd';\r\nimport { Button, Space, Badge  } from 'antd';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\n\r\nimport PostsContainer from '../Posts/PostsContainer';\r\nimport { PostForm } from '../../Forms/PostForm';\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: APIProfileType\r\n    status: string\r\n\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n\r\n    const inRef = useRef<HTMLInputElement>(null);\r\n    const { Meta } = Card;\r\n    const dispatch = useDispatch()\r\n\r\n    if (!props.profile) {\r\n        <Preloader />\r\n    }\r\n    const addPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            dispatch(updateLargePhoto(e.target.files[0]))\r\n        }\r\n    }\r\n\r\n    return (<div className={s.wrapper}>\r\n\r\n        <Row >\r\n            <Col xs={{ span: 24, offset: 1 }}\r\n                md={{ span: 24, offset: 1 }}\r\n                lg={{ span: 10, offset: 1 }}\r\n                xl={{ span: 8, offset: 1 }}\r\n            >\r\n                <Card style={{ marginBottom: '10px', boxShadow: 'rgb(0 0 0 / 50%) 5px 6px 10px -5px', textAlign: 'center' }}>\r\n                    <Col><Image src={props.profile.photos.large} style={{ borderRadius: '10px', paddingBottom:10 }} /></Col>\r\n                    <Button type='primary' icon={<DownloadOutlined />} size={'large'} onClick={() => inRef && inRef.current && inRef.current.click()}>Add image</Button>\r\n                    <input\r\n                        ref={inRef}\r\n                        type={'file'}\r\n                        style={{ display: 'none' }}\r\n                        onChange={addPhoto}\r\n                    />\r\n                    </Card>\r\n                    <Card hoverable style={{ marginBottom: '10px', boxShadow: 'rgb(0 0 0 / 50%) 5px 6px 10px -5px' }}><ProfileStatusWithHooks status={props.status} /></Card>\r\n               \r\n\r\n            </Col>\r\n            <Col xs={{ span: 24, offset: 1 }}\r\n                md={{ span: 24, offset: 1 }}\r\n                lg={{ span: 12, offset: 1 }}\r\n                xl={{ span: 14, offset: 1 }}\r\n\r\n            >\r\n                <ProfileData {...props.profile} />\r\n                <Card style={{ boxShadow: 'rgb(0 0 0 / 50%) -6px 5px 10px -5px', marginBottom: '10px' }} hoverable\r\n                >\r\n                    <PostForm />\r\n                </Card>\r\n            </Col>\r\n\r\n        </Row>\r\n        {props.profile.userId === 21095 && <Row>\r\n            <Col xs={{ span: 24, offset: 1 }}\r\n                md={{ span: 18, offset: 1 }}\r\n                lg={{ span: 10, offset: 1 }}\r\n                xl={{ span: 8, offset: 1 }}\r\n\r\n            >\r\n                <Card title='Friends' className={s.avatarCard}>\r\n                    <Row align='middle' justify='center'>\r\n                    <Col xs={{ span: 3, offset: 1 }}\r\n                        md={{ span: 3, offset: 1 }}\r\n                        lg={{ span: 10, offset: 1 }}\r\n                        xl={{ span: 7, offset: 1 }}>\r\n                            <Avatar size={80} src=\"https://joeschmoe.io/api/v1/random\" />\r\n                            <span>Friend</span>\r\n                    </Col>\r\n                    <Col xs={{ span: 3, offset: 1 }}\r\n                        md={{ span: 3, offset: 1 }}\r\n                        lg={{ span: 10, offset: 1 }}\r\n                        xl={{ span: 7, offset: 1 }}>\r\n                            <Avatar size={80} src=\"https://joeschmoe.io/api/v1/random\" />\r\n                            <span>Friend</span>\r\n                    </Col>\r\n                    <Col xs={{ span: 3, offset: 1 }}\r\n                        md={{ span: 3, offset: 1 }}\r\n                        lg={{ span: 10, offset: 1 }}\r\n                        xl={{ span: 7, offset: 1 }}>\r\n                            <Avatar size={80} src=\"https://joeschmoe.io/api/v1/random\" />\r\n                            <span>Friend</span>\r\n                    </Col>\r\n                    <Col xs={{ span: 3, offset: 1 }}\r\n                        md={{ span: 3, offset: 1 }}\r\n                        lg={{ span: 10, offset: 1 }}\r\n                        xl={{ span: 7, offset: 1 }}>\r\n                            <Avatar size={80} src=\"https://joeschmoe.io/api/v1/random\" />\r\n                            <span>Friend</span>\r\n                    </Col>\r\n                    <Col xs={{ span: 3, offset: 1 }}\r\n                        md={{ span: 3, offset: 1 }}\r\n                        lg={{ span: 10, offset: 1 }}\r\n                        xl={{ span: 7, offset: 1 }}>\r\n                            <Avatar size={80} src=\"https://joeschmoe.io/api/v1/random\" />\r\n                            <span>Friend</span>\r\n                    </Col>\r\n                    <Col xs={{ span: 3, offset: 1 }}\r\n                        md={{ span: 3, offset: 1 }}\r\n                        lg={{ span: 10, offset: 1 }}\r\n                        xl={{ span: 7, offset: 1 }}>\r\n                            <Badge count={1}>\r\n                            <Avatar size={80} src=\"https://joeschmoe.io/api/v1/random\" />\r\n                            </Badge>\r\n                            <span>Friend</span>\r\n                    </Col>\r\n                    </Row>\r\n                </Card>\r\n            </Col>\r\n            <Col xs={{ span: 24, offset: 1 }}\r\n                md={{ span: 24, offset: 1 }}\r\n                lg={{ span: 12, offset: 1 }}\r\n                xl={{ span: 14, offset: 1 }}>\r\n                <PostsContainer />\r\n            </Col>\r\n        </Row>}\r\n    </div>)\r\n\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport PostsContainer from './Posts/PostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport { getProfile, getStatus } from '../../redux/profile-reducer';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useAppSelector } from \"../../redux/redux-store\";\r\nimport {\r\n  selectIsAuth,\r\n  selectMainUserId,\r\n  selectProfile,\r\n  selectProfileStatus\r\n} from \"../../utilits/selectors/profile-selector\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport { EditOutlined, EllipsisOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport { Space, Card } from 'antd';\r\n\r\n\r\n\r\n\r\n\r\nconst Profile = () => {\r\n\r\n\r\n\r\n  const dispatch = useDispatch()\r\n  const isAuth = useAppSelector(selectIsAuth)\r\n  const profile = useAppSelector(selectProfile)\r\n  const status = useAppSelector(selectProfileStatus)\r\n  const mainUserId = useAppSelector(selectMainUserId)\r\n  let { userId }: any = useParams()\r\n\r\n  useEffect(() => {\r\n    if (isAuth) {\r\n      if (!userId) {\r\n        if(mainUserId !== 0){\r\n          userId = mainUserId\r\n        }\r\n        else userId = 21095\r\n      }\r\n      dispatch(getProfile(userId))\r\n      dispatch(getStatus(userId))\r\n    }\r\n  }, [userId])\r\n\r\n  if (!isAuth) {\r\n    return <Redirect to={'/login'} />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Space direction=\"vertical\" size=\"middle\" style={{ display: 'flex' }} >\r\n        <ProfileInfo profile={profile} status={status} />\r\n        \r\n      </Space>\r\n    </div>)\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { WidgetsType } from '../../../../redux/store';\r\nimport s from './Widget.module.css'\r\n\r\n\r\n\r\nconst Widget = (props: WidgetsType) => {\r\n    return (\r\n        <img src={props.src}/>\r\n        )\r\n}\r\n\r\nexport default Widget;","import React from 'react';\r\nimport Widget from './Widget/Widget';\r\nimport s from './Widgets.module.css'\r\n\r\n\r\ntype WidgetsPropsType = {\r\n    smallPhoto: string\r\n}\r\n\r\nconst Widgets = (props:WidgetsPropsType) => {\r\n    return (\r\n        <div className={s.widgets}>\r\n             <Widget src={props.smallPhoto}/> \r\n        </div>\r\n    )\r\n    }\r\nexport default Widgets;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Header.module.css'\r\nimport Logo from './Logo/Logo';\r\nimport Search from './Search/Search';\r\nimport Widgets from './Widgets/Widgets';\r\nimport {useAppSelector} from \"../../redux/redux-store\";\r\nimport {selectIsAuth, selectLogin, selectSmallPhoto} from \"../../utilits/selectors/profile-selector\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setLogOut} from '../../redux/auth-reducer';\r\nimport {Button, Col, Layout, Row} from \"antd\";\r\n\r\nexport const HeaderRC = () => {\r\n    const {Header} = Layout;\r\n\r\n    const dispatch = useDispatch()\r\n    const login = useAppSelector(selectLogin)\r\n    const isAuth = useAppSelector(selectIsAuth)\r\n    const smallPhoto = useAppSelector(selectSmallPhoto)\r\n\r\n    const logOut = () => {\r\n        dispatch(setLogOut())\r\n    }\r\n\r\n\r\n    return (\r\n        <Header style={{padding: 0, boxShadow: 'rgb(0 0 0 / 50%) -5px 8px 10px -5px', position:'fixed', right:0, zIndex:20, minWidth:300, textAlign:'center',borderRadius: 10, margin:5}}>\r\n                {isAuth ? <Row>\r\n                        <Col span={8}>{login}</Col>\r\n                        <Col span={8}> <Widgets smallPhoto={smallPhoto}/></Col>\r\n                        <Col span={8}><Button type='primary' onClick={logOut}>Log out</Button></Col>\r\n                    </Row>\r\n                    : <Col span={24}><NavLink to={'/login'}>Login</NavLink></Col>}\r\n\r\n        </Header>\r\n    )\r\n\r\n\r\n    // <header className={s.header}>\r\n    //     <Logo />\r\n    //     <Search />\r\n    //     {isAuth ?\r\n    //         <div className={s.widgets}>\r\n    //             {login}\r\n    //             <Widgets smallPhoto={smallPhoto} />\r\n    //             <button onClick={logOut}>Log out</button>\r\n    //         </div>\r\n    //         : <NavLink to={'/login'}>Login</NavLink>}\r\n    //\r\n    // </header>\r\n}\r\n","import s from './Paginator.module.css'\r\nimport {useEffect, useState} from \"react\";\r\nimport cn from 'classnames';\r\nimport {Pagination} from \"antd\";\r\n\r\ntype PaginatorPropsType = {\r\n    totalItemsCounter: number\r\n    pageSize: number\r\n    currentPage: number\r\n    portionSize?: number\r\n    onPageClick: (currentPage: number) => void\r\n\r\n}\r\n\r\n\r\nexport const Paginator = ({\r\n                              totalItemsCounter,\r\n                              pageSize,\r\n                              currentPage,\r\n                              onPageClick,\r\n                              portionSize = 10\r\n                          }: PaginatorPropsType) => {\r\n\r\n\r\n    const pagesCount = Math.ceil(totalItemsCounter / pageSize)\r\n    const pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pagesCount / portionSize)\r\n    const [portionNumber, setPortionNumber] = useState(1)\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    useEffect(() => {\r\n        setPortionNumber(Math.ceil(currentPage / portionSize))\r\n    }, [currentPage, portionSize])\r\n\r\n    function onShowSizeChange(current:number, pageSize:number) {\r\n        console.log(current, pageSize);\r\n    }\r\n\r\n    const onChangePage = (page: number, pageSize: number) => {\r\n        onPageClick(page)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        {/*<div>*/}\r\n        {/*    {portionNumber > 1 && <button onClick={()=> setPortionNumber(portionNumber -1 )}>Prev</button>}*/}\r\n        {/*        {pages*/}\r\n        {/*            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)*/}\r\n        {/*            .map(p => <span className={currentPage === p ? cn(s.selected, s.page) : s.page}*/}\r\n        {/*                      onClick={() => onPageClick(p)}>{p}</span> )}*/}\r\n        {/*    {portionNumber < portionCount && <button onClick={()=> setPortionNumber(portionNumber +1 )}>Next</button>}*/}\r\n        {/*</div>*/}\r\n            <Pagination\r\n                showSizeChanger={false}\r\n                onShowSizeChange={onShowSizeChange}\r\n                defaultCurrent={1}\r\n                current={currentPage}\r\n                total={pagesCount}\r\n                onChange={onChangePage}\r\n            />\r\n        </div>)\r\n}","export default __webpack_public_path__ + \"static/media/user.3b87c899.png\";","import s from './Users.module.css'\r\nimport * as axios from 'axios'\r\nimport userPhoto from './../../assets/images/user.png'\r\nimport React from \"react\";\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {bool} from \"yup\";\r\nimport {Paginator} from '../common/Paginator/Paginator';\r\nimport {NewUsersType} from './Users';\r\nimport {getFollow, getUnFollow} from '../../redux/users-reducer';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Button, Card, Col} from \"antd\";\r\n\r\ntype UserPropsType = {\r\n    user: NewUsersType\r\n    followInProgress: Array<number>\r\n}\r\n\r\n\r\nexport const User = ({user, followInProgress}: UserPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n\r\n            <Col xs={{ span: 23, offset: 1 }}\r\n                 md={{ span: 23, offset: 1 }}\r\n                 lg={{ span: 12, offset: 1 }}\r\n                 xl={{ span: 12, offset: 1 }}>\r\n                <Card style={{boxShadow:'rgb(0 0 0 / 50%) 5px 5px 10px -5px', marginBottom:10}}>\r\n                <div className={s.wrapper}>\r\n                    <div className={s.items}>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                            <img className={s.img} src={user.photos.small != null ? user.photos.small : userPhoto}/>\r\n                        </NavLink>\r\n                        {user.followed\r\n                            ? <Button disabled={followInProgress.some(id => id === user.id)} onClick={() => {\r\n                                dispatch(getUnFollow(user.id))\r\n                            }} style={{marginTop:10}}>Unfollow</Button>\r\n                            : <Button disabled={followInProgress.some(id => id === user.id)} onClick={() => {\r\n                                dispatch(getFollow(user.id))\r\n                            }}\r\n                                      style={{marginTop:10}}>Follow</Button>}\r\n\r\n                    </div>\r\n                    <div className={s.info}>\r\n                        <h2>{user.name}</h2>\r\n                        <div>{user.status}</div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n                </Card>\r\n            </Col>\r\n        )\r\n}","import {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {createSelector} from 'reselect'\r\n\r\nexport const getUser = (state:AppRootStateType)=> {\r\n    return state.users.users\r\n}\r\n\r\n// export const getUserSelector = createSelector (getUser, (users)=> { //example of selector with reselect\r\n//     return users.filter((u: any)=> u)\r\n// })\r\n\r\nexport const getPageSize = (state:AppRootStateType)=> {\r\n    return state.users.pageSize\r\n}\r\n\r\nexport const getTotalUserCounter = (state:AppRootStateType)=> {\r\n    return state.users.totalUserCounter\r\n}\r\n\r\nexport const getCurrentPage = (state:AppRootStateType)=> {\r\n    return state.users.currentPage\r\n}\r\n\r\nexport const getIsFetchingData = (state:AppRootStateType)=> {\r\n    return state.users.isFetching\r\n}\r\n\r\nexport const getFollowInProgressData = (state:AppRootStateType)=> {\r\n    return state.users.followInProgress\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport {Paginator} from '../common/Paginator/Paginator';\r\nimport {User} from './User';\r\nimport {\r\n    getCurrentPage, getFollowInProgressData,\r\n    getIsFetchingData,\r\n    getPageSize,\r\n    getTotalUserCounter,\r\n    getUser\r\n} from \"../../utilits/selectors/user-selector\";\r\nimport {useAppSelector} from \"../../redux/redux-store\";\r\nimport {getPage, getUsers} from '../../redux/users-reducer';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Row} from \"antd\";\r\n\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type NewUsersType = {\r\n    id: number;\r\n    name: string;\r\n    photos: PhotosType\r\n    uniqueUrlName: string\r\n    status: string\r\n    followed: boolean\r\n}\r\n\r\n\r\nconst Users = () => {\r\n    const dispatch = useDispatch()\r\n    const users = useAppSelector(getUser)\r\n    const pageSize = useAppSelector(getPageSize)\r\n    const totalUserCounter = useAppSelector(getTotalUserCounter)\r\n    const currentPage = useAppSelector(getCurrentPage)\r\n    const isFetching = useAppSelector(getIsFetchingData)\r\n    const followInProgress = useAppSelector(getFollowInProgressData)\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsers(currentPage, pageSize))\r\n    }, [])\r\n\r\n    const onPageClick = (currentPage: number) => {\r\n        dispatch(getPage(currentPage, pageSize))\r\n    }\r\n\r\n    return (<div>\r\n            {isFetching ? <Preloader/> : null}\r\n\r\n            <Row justify={'center'}>\r\n                {users.map(u => <User key={u.id} user={u} followInProgress={followInProgress}/>)}\r\n            </Row>\r\n            <Row justify={'center'}>\r\n                <Paginator pageSize={pageSize}\r\n                           totalItemsCounter={totalUserCounter}\r\n                           currentPage={currentPage}\r\n                           onPageClick={onPageClick}/>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users;","import React, { Suspense } from 'react';\r\n// import './App.css';\r\nimport { NavLink, Redirect, Route, Switch, withRouter } from 'react-router-dom'\r\nimport { DialogsDataType } from './redux/store';\r\nimport Login from './components/Login/Login';\r\nimport { connect, ConnectedComponent } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { initializedTC } from './redux/app-reducer';\r\nimport { AppRootStateType } from './redux/redux-store';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport Profile from \"./components/Profile/Profile\";\r\nimport { HeaderRC } from './components/Header/Header';\r\nimport Users from \"./components/Users/Users\";\r\nimport 'antd/dist/antd.css';\r\nimport './App.less'\r\nimport { Layout, Menu} from \"antd\";\r\nimport { UploadOutlined, UserOutlined, VideoCameraOutlined } from \"@ant-design/icons\";\r\nimport ReactGA from 'react-ga';\r\n\r\ntype AppPropsType = {\r\n    initializedTC: () => void\r\n    friends: DialogsDataType[]\r\n    initialized: boolean\r\n}\r\n\r\nconst Dialogs = React.lazy(() => import('./components/Dialogs/Dialogs'));\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n\r\n    catchAllUnhandledErrors = (event: PromiseRejectionEvent) => {\r\n        alert('Some error')\r\n        console.error(event)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializedTC()\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n        ReactGA.pageview(window.location.pathname + window.location.search);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader />\r\n        }\r\n        const { Content, Footer, Sider } = Layout;\r\n\r\n        return (\r\n\r\n            <Layout hasSider>\r\n                <Sider \r\n                    breakpoint=\"md\"\r\n                    collapsedWidth=\"0\"\r\n                    className='sider'\r\n                >\r\n                    <div className=\"logo\" />\r\n                    <Menu mode=\"inline\" defaultSelectedKeys={['4']}>\r\n                        <Menu.Item key=\"1\" icon={<UserOutlined />}>\r\n                            <NavLink to={'/profile'}>Profile</NavLink>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"2\" icon={<VideoCameraOutlined />}>\r\n                            <NavLink to={'/dialogs'}>Dialogs</NavLink>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"3\" icon={<UploadOutlined />}>\r\n                            <NavLink to={'/users'}>Users</NavLink>\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                </Sider>\r\n\r\n                <Layout className=\"site-layout\">\r\n                    <HeaderRC />\r\n                    <Content style={{ margin: '24px 16px 0', overflow: 'initial' }}>\r\n                        <div className=\"site-layout-background\" style={{ padding: '60px 20px' }}>\r\n                            <Suspense fallback={<Preloader />}>\r\n                                <Switch>\r\n                                    <Route path='/profile/:userId?' render={() => <Profile />} />\r\n                                    <Route path='/dialogs' render={() => <Dialogs />} />\r\n                                    <Route path='/users' render={() => <Users />} />\r\n                                    <Route path='/login' render={() => <Login />} />\r\n                                    <Route path='/' render={() => <Redirect to={'/profile'} />} />\r\n                                    <Route exact path='*' render={() => <div>404 PAGE NOT FOUND</div>} />\r\n                                </Switch>\r\n                            </Suspense>\r\n                        </div>\r\n                    </Content>\r\n                    <Footer style={{background:'linear-gradient(5deg, #d7edfc 30%, #ffecb2 60%)'}}>Designed by Lapa17</Footer>\r\n                </Layout>\r\n\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => ({\r\n    friends: state.navbarRight.friends,\r\n    initialized: state.app.initialized\r\n})\r\n\r\nexport default compose<ConnectedComponent<(props: any) => JSX.Element, Omit<any, \"isAuth\" | \"dispatch\">>>(withRouter, connect(mapStateToProps, { initializedTC }))(App)\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/redux-store';\r\nimport {BrowserRouter, HashRouter} from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport TagManager from 'react-gtm-module';\r\nimport ReactGA from 'react-ga';\r\n\r\n// const tagManagerArgs = {\r\n//   gtmId: 'GTM-WF95T4J'\r\n// }\r\n// TagManager.initialize(tagManagerArgs)\r\n\r\nconst TRACKING_ID = \"UA-156420292-2\";\r\nReactGA.initialize(TRACKING_ID);\r\n\r\n\r\n\r\n  ReactDOM.render(\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n  );\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { v1 } from \"uuid\"\r\nimport { ActionType,NavbarRightType } from \"./store\"\r\n\r\n\r\nconst initialNavbarState = {\r\n    friends: [\r\n      { id: v1(), name: 'Pashka' },\r\n      { id: v1(), name: 'Maks' },\r\n      { id: v1(), name: 'Vlad' },\r\n      { id: v1(), name: 'Leha' }\r\n    ]\r\n  }\r\n\r\nconst navbarRightReduser = (state: NavbarRightType = initialNavbarState, action: ActionType) => {\r\n    \r\n        return state;\r\n    }\r\n\r\nexport default navbarRightReduser;","import {applyMiddleware, combineReducers, createStore, compose} from 'redux'\r\nimport {AuthActionType, authReducer} from './auth-reducer';\r\nimport dialogsReducer, {DialogsActionType} from './dialogs-reducer';\r\nimport navbarRightReduser from './navbar-right-reduser';\r\nimport {APIProfileType, ProfileActionType, profileReducer} from './profile-reducer';\r\nimport {UsersActionType, usersReducer} from './users-reducer';\r\nimport thunkMiddleware, { ThunkAction, ThunkDispatch } from 'redux-thunk'\r\nimport {LoginActionType, loginReducer} from './login-reducer';\r\nimport {AppActionType, appReduser} from './app-reducer';\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\n\r\n\r\nconst reducers = combineReducers({\r\n    profilePage:profileReducer,\r\n    dialogsPage:dialogsReducer,\r\n    navbarRight:navbarRightReduser,\r\n    users:usersReducer,\r\n    auth:authReducer,\r\n    login:loginReducer,\r\n    app: appReduser\r\n})\r\n\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers,composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n  ));\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>\r\n\r\nexport type GeneralAppActionType = AppActionType\r\n    | AuthActionType\r\n    | ProfileActionType\r\n    | DialogsActionType\r\n    | LoginActionType\r\n    | UsersActionType\r\n\r\nexport type ThunkType = ThunkAction<any, AppRootStateType, unknown, GeneralAppActionType>\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\nexport default store;\r\n\r\n\r\n","import { v1 } from \"uuid\"\r\nimport { PostsDataType } from \"./store\"\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, UpdateProfileType} from \"../api/profileAPI\";\r\nimport {ThunkType} from \"./redux-store\";\r\n\r\n\r\nexport type ProfileStateType = {\r\n    posts: Array<PostsDataType>;\r\n    profile: APIProfileType\r\n    status:string\r\n}\r\n\r\nexport type APIProfileType = {\r\n    aboutMe: string\r\n    userId: number\r\n    fullName: string\r\n    contacts:{\r\n        facebook?: string\r\n        github?: string\r\n        instagram?: string\r\n        mainLink?: string\r\n        twitter?: string\r\n        vk?: string\r\n        website?: string\r\n        youtube?: string\r\n    }\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nexport type UserProfileACType = ReturnType<typeof setUserProfile>\r\nexport type UserStatusACType = ReturnType<typeof setStatus>\r\nexport type AddPostACType = ReturnType<typeof addPostAC>\r\nexport type UpdatePhotoACType = ReturnType<typeof updatePhoto>\r\nexport type DeletePostACType = ReturnType<typeof deletePostAC>\r\nexport type UpdateProfileACType = ReturnType<typeof updateProfileAC>\r\n\r\nexport type ProfileActionType = UserProfileACType | AddPostACType | UserStatusACType | UpdatePhotoACType | DeletePostACType | UpdateProfileACType\r\n\r\nconst ADD_POST = 'lapa-app/profile-reducer/ADD-POST'\r\nconst DELETE_POST = 'lapa-app/profile-reducer/DELETE-POST'\r\nconst SET_USER_PROFILE = 'lapa-app/profile-reducer/SET_USER_PROFILE'\r\nconst SET_STATUS = 'lapa-app/profile-reducer/SET_STATUS'\r\nconst UPDATE_PHOTO = 'lapa-app/profile-reducer/UPDATE_PHOTO'\r\nconst UPDATE_PROFILE = 'lapa-app/profile-reducer/UPDATE_PROFILE'\r\n\r\nexport const addPostAC = (post:string) => ({ type: ADD_POST, post } as const)\r\nexport const deletePostAC = (postId:string) => ({ type: DELETE_POST, postId } as const)\r\nexport const setUserProfile = (profile: APIProfileType) => ({ type: SET_USER_PROFILE, profile } as const)\r\nexport const setStatus = (status: string) => ({ type: SET_STATUS, status } as const)\r\nexport const updatePhoto = (photo: File)=> ({ type: UPDATE_PHOTO, photo } as const)\r\nexport const updateProfileAC = (profile: UpdateProfileType)=> ({ type: UPDATE_PROFILE, profile } as const)\r\n\r\n\r\nconst initialProfileState:ProfileStateType = {\r\n    posts: [\r\n        { id: v1(), postMessage: \"Hi, I'm Pavel\", likes: 10 },\r\n        { id: v1(), postMessage: \"Let's go to learn a React\", likes: 9 },\r\n        { id: v1(), postMessage: \"Also we need improve our html/css skills\", likes: 11 },\r\n        { id: v1(), postMessage: \"Then we'll learn Redux\", likes: 22 }\r\n    ],\r\n    profile: { \r\n        aboutMe: '', \r\n        userId: 0, \r\n        fullName: '', \r\n        photos: { small: '', large: '' }, \r\n        contacts: {},\r\n        lookingForAJobDescription: '',\r\n        lookingForAJob: false,\r\n    },\r\n    status:'',\r\n}\r\n\r\nexport const profileReducer = (state = initialProfileState, action: ProfileActionType) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: v1(),\r\n                postMessage: action.post,\r\n                likes: 0\r\n            }\r\n            return { ...state, posts: [...state.posts, newPost]}\r\n        }\r\n        case DELETE_POST:{\r\n            return {...state, posts: state.posts.filter(post => post.id !== action.postId)}\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return { ...state, profile: action.profile }\r\n        }\r\n        case SET_STATUS: {\r\n            return { ...state, status: action.status  }\r\n        }\r\n        case UPDATE_PHOTO: {\r\n            return {...state, profile: {...state.profile, photos:action.photo}}\r\n        }\r\n        case UPDATE_PROFILE: {\r\n            return {...state, profile: {...state.profile, ...action.profile}}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getProfile = (profileUserId: number) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n        const response = await profileAPI.getProfile(profileUserId)\r\n            dispatch(setUserProfile(response.data))\r\n    }\r\n}\r\n\r\nexport const getStatus = (profileUserId: number) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n        const response = await profileAPI.getProfileStatus(profileUserId)\r\n            dispatch(setStatus(response.data))\r\n    }\r\n}\r\n\r\nexport const updateStatus = (status: string) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n       const response = await profileAPI.updateStatus(status)\r\n            if (response.data.resultCode === 0){\r\n                dispatch(setStatus(status))\r\n            }\r\n    }\r\n}\r\n\r\nexport const updateLargePhoto = (photo: File) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n        const response = await profileAPI.updatePhoto(photo)\r\n            if (response.data.resultCode === 0){\r\n                dispatch(updatePhoto(response.data.data.photos))\r\n            }\r\n    }\r\n}\r\n\r\nexport const addPost = (post: string) => {\r\n    return (dispatch: Dispatch<ProfileActionType>) => {\r\n                dispatch(addPostAC(post))\r\n    }\r\n}\r\n\r\nexport const updateProfile = (profile: UpdateProfileType):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await profileAPI.updateProfile(profile)\r\n        if (response.data.resultCode === 0){\r\n            dispatch(updateProfileAC(profile))\r\n            dispatch(getProfile(getState().auth.userId))\r\n        }\r\n    }\r\n}\r\n","import {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {APIProfileType} from \"../../redux/profile-reducer\";\r\n\r\nexport const selectIsAuth = (state:AppRootStateType)=> {\r\n    return state.auth.isAuth\r\n}\r\n\r\nexport const selectMainUserId = (state:AppRootStateType)=> {\r\n    return state.auth.userId\r\n}\r\nexport const selectProfile = (state:AppRootStateType)=> {\r\n    //@ts-ignore\r\n    return state.profilePage.profile\r\n}\r\nexport const selectProfileStatus = (state:AppRootStateType)=> {\r\n    //@ts-ignore\r\n    return state.profilePage.status\r\n}\r\n\r\nexport const selectLogin = (state:AppRootStateType)=> {\r\n    return state.auth.login\r\n}\r\n\r\nexport const selectSmallPhoto = (state:AppRootStateType)=> {\r\n    return state.auth.photos.small\r\n}\r\n\r\n","import {getCaptchaUrl} from './login-reducer';\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/usersAPI\";\r\nimport {setCurrentPage, setUsers, toggleIsFetching, UsersActionType} from \"./users-reducer\";\r\nimport {authAPI} from \"../api/authAPI\";\r\nimport {profileAPI} from \"../api/profileAPI\";\r\nimport {ThunkType} from \"./redux-store\";\r\nimport {ThunkDispatch} from 'redux-thunk';\r\n\r\nconst SET_AUTH_DATA = 'lapa-app/auth-reducer/SET_AUTH_DATA'\r\nconst SET_USER_PHOTO = 'lapa-app/auth-reducer/SET_USER_PHOTO'\r\nconst SET_AUTH_CHANGE = 'lapa-app/auth-reducer/SET_AUTH_CHANGE'\r\nconst GET_LOGIN_ERROR = 'lapa-app/auth-reducer/GET_LOGIN_ERROR'\r\n\r\n\r\nexport type AuthActionType = AuthDataActionType | UserPhotoActionType | AuthChangeActionType | LoginErrorDataActionType\r\n\r\nexport type LoginErrorDataActionType = ReturnType<typeof getLoginError>\r\nexport type AuthDataActionType = ReturnType<typeof setAuthData>\r\nexport type UserPhotoActionType = ReturnType<typeof setUserPhoto>\r\nexport type AuthChangeActionType = ReturnType<typeof setAuthChange>\r\n\r\nexport type AuthDataType = {\r\n    userId: number\r\n    login: string\r\n    email: string\r\n    isAuth: boolean\r\n    photos: {\r\n        large: string\r\n        small: string\r\n    }\r\n    errorMessage?: string\r\n}\r\n\r\n\r\nexport const setAuthData = (userId: number, login: string, email: string) => ({\r\n    type: SET_AUTH_DATA, data: {userId, login, email}\r\n} as const)\r\nexport const setUserPhoto = (photos: { large: string, small: string }) => ({type: SET_USER_PHOTO, photos} as const)\r\nexport const setAuthChange = (isAuth: boolean) => ({type: SET_AUTH_CHANGE, isAuth} as const)\r\nexport const getLoginError = (message: string) => ({type: GET_LOGIN_ERROR, message} as const)\r\n\r\n\r\nconst initialProfileState = {\r\n    userId: 0,\r\n    login: '',\r\n    email: '',\r\n    isAuth: false,\r\n    photos: {\r\n        large: '',\r\n        small: ''\r\n    }\r\n}\r\n\r\nexport const authReducer = (state: AuthDataType = initialProfileState, action: AuthActionType) => {\r\n    switch (action.type) {\r\n        case SET_AUTH_DATA: {\r\n            return {...state, ...action.data, isAuth: true}\r\n        }\r\n        case SET_USER_PHOTO: {\r\n            return {...state, photos: {...action.photos}}\r\n\r\n        }\r\n        case SET_AUTH_CHANGE: {\r\n            return {...state, isAuth: action.isAuth}\r\n        }\r\n        case GET_LOGIN_ERROR: {\r\n            return {...state, errorMessage: action.message}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const authMe = (): ThunkType => {\r\n    return async (dispatch: Dispatch<AuthActionType>) => {\r\n        try {\r\n            const data = await authAPI.getAuth();\r\n            if (data.resultCode === 0) {\r\n                const {id, login, email} = data.data\r\n                dispatch(setAuthData(id, login, email))\r\n                const response = await profileAPI.getProfile(id)\r\n                dispatch(setUserPhoto(response.data.photos))\r\n            }\r\n            return data\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport const setAuth = (email: string, password: string, rememberMe: boolean, captcha?: string): ThunkType => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const res = await authAPI.logining({email, password, rememberMe, captcha})\r\n            if (res.data.data.userId) {\r\n                dispatch(setAuthChange(true))\r\n            } else {\r\n                if (res.data.resultCode === 10) {\r\n                    dispatch(getCaptchaUrl())\r\n                }\r\n                dispatch(getLoginError(res.data.messages[0]))\r\n            }\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport const setLogOut = (): ThunkType => {\r\n    return async (dispatch: Dispatch<AuthActionType>) => {\r\n        try {\r\n            const res = await authAPI.setUnlogging()\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAuthChange(false))\r\n            }\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n}\r\n","import axios from \"axios\";\r\nimport {Items} from \"../components/Users/UsersContainer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials:true,\r\n    baseURL:`https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\"API-KEY\" : \"a60fb14a-6f41-481f-9441-d849223c43b5\"}\r\n})\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers (currentPage = 1, pageSize = 10)  {\r\n        return instance.get<Items>(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    },\r\n    setFollow (id:number) {\r\n        return instance.post(`follow/${id}`).then(response => response.data)\r\n    },\r\n    setUnFollow (id:number) {\r\n        return instance.delete(`follow/${id}`).then(response => response.data)\r\n    }\r\n}\r\n","import {NewUsersType} from \"../components/Users/Users\"\r\n\r\nimport {UsersStateType} from \"./store\"\r\nimport {usersAPI} from \"../api/usersAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkType} from \"./redux-store\";\r\n\r\nconst IS_FOLLOWING = 'lapa-app/users-reducer/IS_FOLLOWING'\r\nconst SET_USERS = 'lapa-app/users-reducer/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'lapa-app/users-reducer/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'lapa-app/users-reducer/SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'lapa-app/users-reducer/TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'lapa-app/users-reducer/TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\n//export type FollowActionCreatorType = ReturnType<typeof followActionCreator> + добавляем as const в сам AC\r\n\r\nexport type FollowACType = ReturnType<typeof isFollowing>\r\nexport type SetUsersACType = ReturnType<typeof setUsers>\r\nexport type SetCurrentPageACType = ReturnType<typeof setCurrentPage>\r\nexport type SetTotalUsersCountACType = ReturnType<typeof setTotalUsersCount>\r\nexport type ToggleIsFetchingACType = ReturnType<typeof toggleIsFetching>\r\nexport type ToggleIsFollowingProgress = ReturnType<typeof toggleIsFollowingProgress>\r\n\r\nexport type UsersActionType =\r\n    FollowACType\r\n    | SetUsersACType\r\n    | SetCurrentPageACType\r\n    | SetTotalUsersCountACType\r\n    | ToggleIsFetchingACType\r\n    | ToggleIsFollowingProgress\r\n\r\nconst initialUsersState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUserCounter: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followInProgress: []\r\n}\r\n\r\nexport const usersReducer = (state: UsersStateType = initialUsersState, action: UsersActionType) => {\r\n    switch (action.type) {\r\n        case IS_FOLLOWING : {\r\n            return {...state, users: state.users.map(u => u.id === action.userID ? {...u, followed: action.follow} : u)}\r\n        }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUserCounter: action.totalCount}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followInProgress: action.isFetching\r\n                    ? [...state.followInProgress, action.userId]\r\n                    : state.followInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const isFollowing = (userID: number, follow: boolean) => ({type: IS_FOLLOWING, userID, follow} as const)\r\nexport const setUsers = (users: Array<NewUsersType>) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setTotalUsersCount = (totalCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalCount: totalCount\r\n} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n} as const)\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId\r\n} as const)\r\n\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => {\r\n    return async (dispatch: Dispatch<UsersActionType>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nexport const getPage = (currentPage: number, pageSize: number): ThunkType => {\r\n    return async (dispatch: Dispatch<UsersActionType>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(currentPage))\r\n        const data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n    }\r\n}\r\nconst followUnfollow = async (dispatch: Dispatch,\r\n                              userId: number,\r\n                              apiMethod: (id: number) => Promise<any>,\r\n                              follow: boolean) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n    const data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(isFollowing(userId, follow))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\n\r\nexport const getFollow = (userId: number): ThunkType => {\r\n    return async (dispatch: Dispatch) => {\r\n        const apiMethod = usersAPI.setFollow.bind(usersAPI)\r\n\r\n        await followUnfollow(dispatch, userId, apiMethod, true)\r\n    }\r\n}\r\n\r\nexport const getUnFollow = (userId: number): ThunkType => {\r\n    return async (dispatch: Dispatch) => {\r\n        const apiMethod = usersAPI.setUnFollow.bind(usersAPI)\r\n\r\n        await followUnfollow(dispatch, userId, apiMethod, false)\r\n    }\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials:true,\r\n    baseURL:`https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\"API-KEY\" : \"a60fb14a-6f41-481f-9441-d849223c43b5\"}\r\n})\r\n\r\n\r\nexport const profileAPI = {\r\n    getProfile (userId:number){\r\n        return instance.get(`profile/${userId}`)\r\n    },\r\n    getProfileStatus (userId:number){\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus (status: string){\r\n        return instance.put(`profile/status`, {status})\r\n    },\r\n    updatePhoto (image: File){\r\n        debugger\r\n        const formData = new FormData()\r\n        formData.append('image', image)\r\n        return instance.put(`profile/photo`, formData , {headers:{\r\n            \"Content-type\": \"multipart/form-data\"\r\n        }})\r\n    },\r\n    updateProfile (profile: UpdateProfileType){\r\n        return instance.put(`profile`, profile)\r\n    },\r\n\r\n}\r\n\r\nexport type UpdateProfileType = {\r\n    aboutMe: string\r\n    userId: number\r\n    fullName: string\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    contacts:{\r\n        facebook?: string\r\n        github?: string\r\n        instagram?: string\r\n        mainLink?: string\r\n        twitter?: string\r\n        vk?: string\r\n        website?: string\r\n        youtube?: string\r\n    }\r\n}","\r\nimport { Dispatch } from \"redux\"\r\nimport { authAPI } from \"../api/authAPI\"\r\nimport { ThunkType } from \"./redux-store\"\r\n\r\nconst SET_LOGIN = 'lapa-app/login-reducer/SET_LOGIN'\r\nconst SET_CAPTCHA = 'lapa-app/login-reducer/SET_CAPTCHA'\r\n\r\n\r\nexport type LoginDataActionType = ReturnType<typeof setLoginData>\r\nexport type CaptchaActionType = ReturnType<typeof setCaptchaUrl>\r\n\r\nexport type LoginActionType = LoginDataActionType | CaptchaActionType\r\n\r\nexport type LoginType = {\r\n    data: {\r\n        login: string,\r\n        password: string\r\n    }\r\n    captchaUrl: string\r\n}\r\n\r\nconst initialProfileState = {\r\n    data: {\r\n        login:'',\r\n        password:'',\r\n    },\r\n    captchaUrl:''\r\n    \r\n}\r\n\r\nexport const setLoginData = (data: {login:string, password:string}) => ({ type: SET_LOGIN, data} as const)\r\nexport const setCaptchaUrl = (captchaUrl: string) => ({ type: SET_CAPTCHA, captchaUrl} as const)\r\n\r\nexport const loginReducer = (state:LoginType  = initialProfileState, action:LoginActionType ) => {\r\n    switch (action.type) {\r\n        case SET_LOGIN: {\r\n            return { ...state, data:action.data}\r\n        }\r\n        case SET_CAPTCHA:{\r\n            return {...state,captchaUrl: action.captchaUrl}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = ():ThunkType => {\r\n    return async (dispatch: Dispatch) => {\r\n        try{\r\n       const res = await authAPI.getCaptcha()\r\n            if (res.data.url) {\r\n                dispatch(setCaptchaUrl(res.data.url))\r\n            }\r\n        }\r\n        catch (error){\r\n            \r\n        }\r\n    }\r\n}\r\n\r\n"],"sourceRoot":""}