{"version":3,"sources":["hoc/withAuthRedirect.tsx","redux/dialogs-reducer.ts","components/NavbarLeft/Navigations/Navigations.module.css","components/NavbarRight/Friend/Friend.module.css","components/NavbarRight/NavbarRight.module.css","components/Profile/ProfileInfo/Avatar/Avatar.module.css","components/Profile/Profile.module.css","components/Header/Logo/Logo.module.css","components/Header/Search/Search.module.css","components/Header/Widgets/Widgets.module.css","components/NavbarLeft/Navigations/Navigation/Navigation.tsx","components/NavbarLeft/Navigations/Navigations.tsx","components/NavbarLeft/NavbarLeft.tsx","components/NavbarRight/Friend/Friend.tsx","components/NavbarRight/NavbarRight.tsx","api/usersAPI.ts","redux/users-reducer.ts","assets/images/loader.gif","components/common/Preloader/Preloader.tsx","components/common/Paginator/Paginator.tsx","assets/images/user.png","components/Users/User.tsx","components/Users/Users.tsx","utilits/selectors/user-selector.ts","components/Users/UsersContainer.tsx","api/profileAPI.ts","redux/profile-reducer.ts","components/Profile/Posts/Post/Post.tsx","components/Forms/PostForm.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Posts/PostsContainer.tsx","components/Profile/ProfileInfo/Avatar/Avatar.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","api/authAPI.ts","redux/login-reducer.ts","redux/auth-reducer.ts","components/Header/Logo/Logo.tsx","components/Header/Search/Search.tsx","components/Header/Widgets/Widget/Widget.tsx","components/Header/Widgets/Widgets.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/app-reducer.ts","App.tsx","reportWebVitals.ts","redux/navbar-right-reduser.ts","redux/redux-store.tsx","index.tsx","components/Profile/Posts/Posts.module.css","utilits/validations/validationScheme.ts","components/NavbarLeft/Navigations/Navigation/Navigation.module.css","components/common/Paginator/Paginator.module.css","components/Users/Users.module.css","components/Profile/Posts/Post/Post.module.css","components/Header/Header.module.css"],"names":["mapStateWithAuthProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","to","ADD_MESSAGE","addMessage","message","type","initialDialogState","dialogs","id","v1","name","messages","dialogsReducer","action","newMessage","module","exports","Navigation","className","s","item","link","activeClassName","active","itemLink","menu","Navigations","nav","NavbarLeft","Friend","NavbarRight","friendList","friends","map","friend","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","setFollow","post","setUnFollow","delete","IS_FOLLOWING","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialUsersState","users","totalUserCounter","isFetching","followInProgress","isFollowing","userID","follow","setUsers","setCurrentPage","setTotalUsersCount","totalCount","toggleIsFetching","toggleIsFollowingProgress","userId","followUnfollow","dispatch","apiMethod","a","resultCode","Preloader","src","loader","Paginator","totalItemsCounter","onPageClick","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","useEffect","selectedPage","selected","page","onClick","filter","p","User","user","getUnFollow","getFollow","wrapper","items","photos","small","userPhoto","followed","disabled","some","info","status","Users","u","getUser","getPageSize","getTotalUserCounter","getCurrentPage","getIsFetchingData","getFollowInProgressData","UsersClassContainer","getPage","this","React","UsersContainer","bind","profileAPI","put","image","formData","FormData","append","profile","ADD_POST","DELETE_POST","SET_USER_PROFILE","SET_STATUS","UPDATE_PHOTO","UPDATE_PROFILE","setUserProfile","setStatus","updatePhoto","photo","updateProfileAC","initialProfileState","posts","postMessage","likes","aboutMe","fullName","large","contacts","lookingForAJobDescription","lookingForAJob","getProfile","profileUserId","Post","memo","postLikes","PostForm","addPost","initialValues","validateOnBlur","validationSchema","postValidationSchema","onSubmit","values","setSubmitting","isSubmitting","errors","touched","dirty","isValid","as","placeholder","component","Posts","myPost","newPost","postsElements","m","postHeader","itemWrapper","PostsContainer","profilePage","addPostAC","Avatar","avatarWrapper","imgAdress","ProfileStatusWithHooks","editMode","setEditMode","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileInfo","target","files","updateLargePhoto","updateProfile","ProfileData","github","setProfile","onValueChange","checked","href","Profile","ProfileContainer","match","params","getStatus","compose","getState","withRouter","authAPI","SET_LOGIN","SET_CAPTCHA","login","password","captchaUrl","getCaptchaUrl","res","url","SET_AUTH_DATA","SET_USER_PHOTO","SET_AUTH_CHANGE","GET_LOGIN_ERROR","setAuthData","email","setUserPhoto","setAuthChange","Logo","logo","alt","Search","search","Widget","Widgets","widgets","smallPhoto","Header","setLogOut","header","HeaderContainer","errorMessage","setLoginData","setAuth","rememberMe","captcha","useForm","resolver","yupResolver","loginningValidationSchema","register","handleSubmit","formState","loginRequest","defaultValue","required","pattern","style","width","SET_INITIALIZED","initialAppState","initialized","DialogsContainer","lazy","App","initializedTC","fallback","path","render","navbarRight","app","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialNavbarState","navbarRightReduser","reducers","combineReducers","postId","dialogsPage","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","yup","shape","max","messageValidationSchema","min"],"mappings":"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","file":"static/js/main.17ea514a.chunk.js","sourcesContent":["import { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { StateDataType } from \"../redux/store\"\r\n\r\n\r\nlet mapStateWithAuthProps = (state:StateDataType) => {\r\n    return {\r\n      isAuth: state.auth.isAuth\r\n    }\r\n  }\r\n\r\nexport let withAuthRedirect = (Component:any) => {\r\n\r\n    let wiathAuthContainer  = (props:any)=> {\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...props}/>\r\n      }\r\n\r\n    return  connect(mapStateWithAuthProps)(wiathAuthContainer);\r\n}","import { Dispatch } from \"redux\"\r\nimport { v1 } from \"uuid\"\r\nimport { DialogsType, } from \"./store\"\r\n\r\nconst ADD_MESSAGE = 'lapa-app/dialogs-reducer/ADD-MESSAGE'\r\n\r\n\r\n\r\nexport type DialogsActionType = AddMessageActionType\r\n\r\ntype AddMessageActionType = ReturnType<typeof addMessage>\r\n\r\n\r\nexport const addMessage = (message: string) => ({ type: ADD_MESSAGE, message } as const)\r\n\r\nconst initialDialogState = {\r\n  dialogs: [\r\n    { id: v1(), name: 'Pashka' },\r\n    { id: v1(), name: 'Maks' },\r\n    { id: v1(), name: 'Vlados' },\r\n    { id: v1(), name: 'Leha' },\r\n    { id: v1(), name: 'Dima' }\r\n  ],\r\n  messages: [\r\n    { id: v1(), message: 'Hi' },\r\n    { id: v1(), message: 'How are you?' },\r\n    { id: v1(), message: 'I am fine' }\r\n  ],\r\n\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsType = initialDialogState, action: DialogsActionType) => {\r\n  switch (action.type) {\r\n    case ADD_MESSAGE: {\r\n      let newMessage = {\r\n        id: v1(),\r\n        message: action.message\r\n      }\r\n      return {...state, messages: [...state.messages, newMessage] }\r\n\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default dialogsReducer;\r\n\r\n\r\nexport const AddMessage = (message:string) => {\r\n  return (dispatch: Dispatch<DialogsActionType>) => {\r\n    dispatch(addMessage(message))\r\n  }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigations_nav__i3OCr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Friend_item__2ZHma\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavbarRight_nav__3hk_H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatarWrapper\":\"Avatar_avatarWrapper__3kRML\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__2KngV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Logo_logo__3fZgA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"Search_search__3XdfZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"widgets\":\"Widgets_widgets__EfZB_\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Navigation.module.css'\r\nimport {NavigationType} from '../../../../redux/store'\r\n\r\n\r\n\r\nconst Navigation: React.FC<NavigationType> = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <NavLink to={props.link} activeClassName={s.active} className={s.itemLink}>{props.menu}</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Navigation from './Navigation/Navigation';\r\nimport s from './Navigations.module.css'\r\n\r\nconst Navigations = () => {\r\n  return <nav className={s.nav}>\r\n    <Navigation menu='Profile' link='/profile'/>\r\n    <Navigation menu='Messages' link='/dialogs'/>\r\n    <Navigation menu='Users' link='/users'/>\r\n    <Navigation menu='News' link='/news'/>\r\n    <Navigation menu='Music' link='/music'/>\r\n    <Navigation menu='Settings' link='/settings'/>\r\n    </nav>\r\n}\r\n\r\nexport default Navigations;","import React from 'react';\r\nimport s from './NavbarLeft.module.css'\r\nimport Navigations from './Navigations/Navigations';\r\n\r\nconst NavbarLeft = () => {\r\n  return (\r\n    <Navigations />\r\n\r\n  )\r\n}\r\n\r\nexport default NavbarLeft;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { DialogsDataType } from '../../../redux/store';\r\nimport s from './Friend.module.css'\r\n\r\n\r\n\r\nconst Friend:React.FC<DialogsDataType> = (props) => {\r\n  return <div className={s.item} key={props.id}>\r\n      <NavLink to={props.name}>{props.name}</NavLink>\r\n      </div>\r\n\r\n}\r\n\r\nexport default Friend;","import React from 'react';\r\nimport { NavbarRightType } from '../../redux/store';\r\nimport Friend from './Friend/Friend';\r\nimport s from './NavbarRight.module.css'\r\n\r\nconst NavbarRight:React.FC<NavbarRightType> = (props) => {\r\n\r\n  const friendList = props.friends.map((friend)=> <Friend key={friend.id} id={friend.id} name={friend.name}/>)\r\n\r\n  return <nav className={s.nav}>\r\n      {friendList}\r\n  </nav>\r\n}\r\n\r\nexport default NavbarRight;","import axios from \"axios\";\r\nimport {Items} from \"../components/Users/UsersContainer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials:true,\r\n    baseURL:`https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\"API-KEY\" : \"ed0fa8fa-ddbb-478a-b370-1f41a9c286be\"}\r\n})\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers (currentPage = 1, pageSize = 10)  {\r\n        return instance.get<Items>(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    },\r\n    setFollow (id:number) {\r\n        return instance.post(`follow/${id}`).then(response => response.data)\r\n    },\r\n    setUnFollow (id:number) {\r\n        return instance.delete(`follow/${id}`).then(response => response.data)\r\n    }\r\n}\r\n","import {NewUsersType} from \"../components/Users/Users\"\r\n\r\nimport {UsersStateType} from \"./store\"\r\nimport {usersAPI} from \"../api/usersAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkType} from \"./redux-store\";\r\n\r\nconst IS_FOLLOWING = 'lapa-app/users-reducer/IS_FOLLOWING'\r\nconst SET_USERS = 'lapa-app/users-reducer/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'lapa-app/users-reducer/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'lapa-app/users-reducer/SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'lapa-app/users-reducer/TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'lapa-app/users-reducer/TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\n//export type FollowActionCreatorType = ReturnType<typeof followActionCreator> + добавляем as const в сам AC\r\n\r\nexport type FollowACType = ReturnType<typeof isFollowing>\r\nexport type SetUsersACType = ReturnType<typeof setUsers>\r\nexport type SetCurrentPageACType = ReturnType<typeof setCurrentPage>\r\nexport type SetTotalUsersCountACType = ReturnType<typeof setTotalUsersCount>\r\nexport type ToggleIsFetchingACType = ReturnType<typeof toggleIsFetching>\r\nexport type ToggleIsFollowingProgress = ReturnType<typeof toggleIsFollowingProgress>\r\n\r\nexport type UsersActionType =\r\n    FollowACType\r\n    | SetUsersACType\r\n    | SetCurrentPageACType\r\n    | SetTotalUsersCountACType\r\n    | ToggleIsFetchingACType\r\n    | ToggleIsFollowingProgress\r\n\r\nconst initialUsersState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUserCounter: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followInProgress: []\r\n}\r\n\r\nexport const usersReducer = (state: UsersStateType = initialUsersState, action: UsersActionType) => {\r\n    switch (action.type) {\r\n        case IS_FOLLOWING : {\r\n            return {...state, users: state.users.map(u => u.id === action.userID ? {...u, followed: action.follow} : u)}\r\n        }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUserCounter: action.totalCount}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followInProgress: action.isFetching\r\n                    ? [...state.followInProgress, action.userId]\r\n                    : state.followInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const isFollowing = (userID: number, follow: boolean) => ({type: IS_FOLLOWING, userID, follow} as const)\r\nexport const setUsers = (users: Array<NewUsersType>) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setTotalUsersCount = (totalCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalCount: totalCount\r\n} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n} as const)\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId\r\n} as const)\r\n\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => {\r\n    return async (dispatch: Dispatch<UsersActionType>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nexport const getPage = (currentPage: number, pageSize: number): ThunkType => {\r\n    return async (dispatch: Dispatch<UsersActionType>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(currentPage))\r\n        const data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n    }\r\n}\r\nconst followUnfollow = async (dispatch: Dispatch,\r\n                              userId: number,\r\n                              apiMethod: (id: number) => Promise<any>,\r\n                              follow: boolean) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n    const data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(isFollowing(userId, follow))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\n\r\nexport const getFollow = (userId: number): ThunkType => {\r\n    return async (dispatch: Dispatch) => {\r\n        const apiMethod = usersAPI.setFollow.bind(usersAPI)\r\n\r\n        await followUnfollow(dispatch, userId, apiMethod, true)\r\n    }\r\n}\r\n\r\nexport const getUnFollow = (userId: number): ThunkType => {\r\n    return async (dispatch: Dispatch) => {\r\n        const apiMethod = usersAPI.setUnFollow.bind(usersAPI)\r\n\r\n        await followUnfollow(dispatch, userId, apiMethod, false)\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/loader.07928bad.gif\";","import loader from '../../../assets/images/loader.gif'\r\n\r\n\r\nconst Preloader = () => {\r\n    return (<div>\r\n        <img src={loader} />\r\n    </div>)\r\n\r\n}\r\nexport default Preloader;","import s from './Paginator.module.css'\r\nimport {useEffect, useState} from \"react\";\r\n\r\ntype PaginatorPropsType = {\r\n    totalItemsCounter: number\r\n    pageSize: number\r\n    currentPage: number\r\n    portionSize?: number\r\n    onPageClick: (currentPage: number) => void\r\n\r\n}\r\n\r\n\r\nexport const Paginator = ({\r\n                              totalItemsCounter,\r\n                              pageSize,\r\n                              currentPage,\r\n                              onPageClick,\r\n                              portionSize = 10\r\n                          }: PaginatorPropsType) => {\r\n\r\n    const pagesCount = Math.ceil(totalItemsCounter / pageSize)\r\n    const pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pagesCount / portionSize)\r\n    const [portionNumber, setPortionNumber] = useState(1)\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    useEffect(() => {\r\n        setPortionNumber(Math.ceil(currentPage / portionSize))\r\n    }, [currentPage, portionSize])\r\n\r\n    const selectedPage = `${s.selected} ${s.page}`\r\n\r\n    return (\r\n        <div>\r\n            {portionNumber > 1 && <button onClick={()=> setPortionNumber(portionNumber -1 )}>Prev</button>}\r\n                {pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map(p => <span className={currentPage === p ? selectedPage : s.page}\r\n                              onClick={() => onPageClick(p)}>{p}</span> )}\r\n            {portionNumber < portionCount && <button onClick={()=> setPortionNumber(portionNumber +1 )}>Next</button>}\r\n        </div>)\r\n}","export default __webpack_public_path__ + \"static/media/user.3b87c899.png\";","import s from './Users.module.css'\r\nimport * as axios from 'axios'\r\nimport userPhoto from './../../assets/images/user.png'\r\nimport React from \"react\";\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { bool } from \"yup\";\r\nimport { Paginator } from '../common/Paginator/Paginator';\r\nimport { NewUsersType } from './Users';\r\n\r\ntype UserPropsType = {\r\n    user: NewUsersType\r\n    followInProgress: Array<number>\r\n    getUnFollow:(userId: number) => void\r\n    getFollow:(userId: number) => void\r\n}\r\n\r\n\r\nexport const User = ({user,followInProgress, getUnFollow, getFollow }: UserPropsType) => {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.items}>\r\n                <NavLink to={'/profile/' + user.id}>\r\n                    <img src={user.photos.small != null ? user.photos.small : userPhoto} />\r\n                </NavLink>\r\n                {user.followed\r\n                    ? <button disabled={followInProgress.some(id => id === user.id)} onClick={() => {\r\n                        getUnFollow(user.id)\r\n\r\n                    }}>Unfollow</button>\r\n                    : <button disabled={followInProgress.some(id => id === user.id)} onClick={() => {\r\n                        getFollow(user.id)\r\n\r\n                    }}>Follow</button>}\r\n\r\n            </div>\r\n            <div className={s.info}>\r\n                <div>{user.name}</div>\r\n                <div>{user.status}</div>\r\n\r\n            </div>\r\n\r\n        </div>)\r\n}","import s from './Users.module.css'\r\nimport * as axios from 'axios'\r\nimport userPhoto from './../../assets/images/user.png'\r\nimport React from \"react\";\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { bool } from \"yup\";\r\nimport { Paginator } from '../common/Paginator/Paginator';\r\nimport { User } from './User';\r\n\r\n\r\n\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type NewUsersType = {\r\n    id: number;\r\n    name: string;\r\n    photos: PhotosType\r\n    uniqueUrlName: string\r\n    status: string\r\n    followed: boolean\r\n}\r\n\r\n\r\ntype UsersPropsType = {\r\n    users: Array<NewUsersType>\r\n    pageSize: number\r\n    totalUserCounter: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    onPageClick: (currentPage: number) => void\r\n    toggleIsFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    followInProgress: Array<number>\r\n    getFollow: (userId: number) => void\r\n    getUnFollow: (userId: number) => void\r\n}\r\n\r\nconst Users = ({ users,\r\n    pageSize,\r\n    totalUserCounter,\r\n    currentPage,\r\n    isFetching,\r\n    onPageClick,\r\n    toggleIsFollowingProgress,\r\n    followInProgress,\r\n    getFollow,\r\n    getUnFollow,\r\n}: UsersPropsType) => {\r\n\r\n    return (<div>\r\n        {isFetching ? <Preloader /> : null}\r\n        <Paginator pageSize={pageSize} totalItemsCounter={totalUserCounter} currentPage={currentPage} onPageClick={onPageClick} />\r\n        {users.map(u => <User key={u.id} user={u} followInProgress={followInProgress} getFollow={getFollow} getUnFollow={getUnFollow} />\r\n        )}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Users;","import {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {createSelector} from 'reselect'\r\n\r\nexport const getUser = (state:AppRootStateType)=> {\r\n    return state.users.users\r\n}\r\n\r\n// export const getUserSelector = createSelector (getUser, (users)=> { //example of selector with reselect\r\n//     return users.filter((u: any)=> u)\r\n// })\r\n\r\nexport const getPageSize = (state:AppRootStateType)=> {\r\n    return state.users.pageSize\r\n}\r\n\r\nexport const getTotalUserCounter = (state:AppRootStateType)=> {\r\n    return state.users.totalUserCounter\r\n}\r\n\r\nexport const getCurrentPage = (state:AppRootStateType)=> {\r\n    return state.users.currentPage\r\n}\r\n\r\nexport const getIsFetchingData = (state:AppRootStateType)=> {\r\n    return state.users.isFetching\r\n}\r\n\r\nexport const getFollowInProgressData = (state:AppRootStateType)=> {\r\n    return state.users.followInProgress\r\n}\r\n","import { connect } from \"react-redux\";\r\nimport { StateDataType } from \"../../redux/store\";\r\nimport {\r\n    getFollow, getPage, getUnFollow, getUsers, isFollowing,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    toggleIsFollowingProgress,\r\n\r\n} from \"../../redux/users-reducer\";\r\nimport Users, { NewUsersType } from \"./Users\";\r\nimport React from \"react\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getCurrentPage, getFollowInProgressData,\r\n    getIsFetchingData,\r\n    getPageSize,\r\n    getTotalUserCounter,\r\n    getUser\r\n} from \"../../utilits/selectors/user-selector\";\r\n\r\n\r\nexport interface Items {\r\n    items: Array<NewUsersType>\r\n    totalCount: number\r\n}\r\n\r\n\r\nexport type UsersComponentPropsType = {\r\n    users: Array<NewUsersType>\r\n    pageSize: number\r\n    totalUserCounter: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFollowingProgress:(isFetching:boolean, userId:number) => void\r\n    followInProgress: Array<number>\r\n    getUsers: (currentPage: number,pageSize: number) => void\r\n    getPage: (currentPage: number,pageSize: number) => void\r\n    getFollow: (userId: number) => void\r\n    getUnFollow: (userId: number) => void\r\n}\r\n\r\n\r\nclass UsersClassContainer extends React.Component<UsersComponentPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n    onPageClick = (currentPage: number) => {\r\n        this.props.getPage(currentPage, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <Users users={this.props.users}\r\n            pageSize={this.props.pageSize}\r\n            totalUserCounter={this.props.totalUserCounter}\r\n            currentPage={this.props.currentPage}\r\n            onPageClick={this.onPageClick}\r\n            isFetching={this.props.isFetching}\r\n            toggleIsFollowingProgress={this.props.toggleIsFollowingProgress}\r\n            followInProgress={this.props.followInProgress}\r\n                      getFollow={this.props.getFollow}\r\n                      getUnFollow={this.props.getUnFollow}\r\n\r\n        />\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlet mapStateProps = (state: AppRootStateType) => {\r\n    return {\r\n        users: getUser(state),\r\n        pageSize: getPageSize(state),\r\n        totalUserCounter: getTotalUserCounter(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetchingData(state),\r\n        followInProgress: getFollowInProgressData(state)\r\n    }\r\n}\r\n\r\n\r\nconst UsersContainer = connect(mapStateProps,\r\n    {\r\n        setCurrentPage,\r\n        setTotalUsersCount,\r\n        toggleIsFollowingProgress,\r\n        getUsers,\r\n        getPage,\r\n        getFollow,\r\n        getUnFollow\r\n    })(UsersClassContainer);\r\n\r\nexport default UsersContainer;","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials:true,\r\n    baseURL:`https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\"API-KEY\" : \"ed0fa8fa-ddbb-478a-b370-1f41a9c286be\"}\r\n})\r\n\r\n\r\nexport const profileAPI = {\r\n    getProfile (userId:string){\r\n        return instance.get(`profile/${userId}`)\r\n    },\r\n    getProfileStatus (userId:string){\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus (status: string){\r\n        return instance.put(`profile/status`, {status})\r\n    },\r\n    updatePhoto (image: File){\r\n        debugger\r\n        const formData = new FormData()\r\n        formData.append('image', image)\r\n        return instance.put(`profile/photo`, formData , {headers:{\r\n            \"Content-type\": \"multipart/form-data\"\r\n        }})\r\n    },\r\n    updateProfile (profile: UpdateProfileType){\r\n        return instance.put(`profile`, profile)\r\n    },\r\n\r\n}\r\n\r\nexport type UpdateProfileType = {\r\n    aboutMe: string\r\n    userId: number\r\n    fullName: string\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    contacts:{\r\n        facebook?: string\r\n        github?: string\r\n        instagram?: string\r\n        mainLink?: string\r\n        twitter?: string\r\n        vk?: string\r\n        website?: string\r\n        youtube?: string\r\n    }\r\n}","import { v1 } from \"uuid\"\r\nimport { PostsDataType } from \"./store\"\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, UpdateProfileType} from \"../api/profileAPI\";\r\nimport {ThunkType} from \"./redux-store\";\r\n\r\n\r\nexport type ProfileStateType = {\r\n    posts: Array<PostsDataType>;\r\n    profile: APIProfileType\r\n    status:string\r\n}\r\n\r\nexport type APIProfileType = {\r\n    aboutMe: string\r\n    userId: number\r\n    fullName: string\r\n    contacts:{\r\n        facebook?: string\r\n        github?: string\r\n        instagram?: string\r\n        mainLink?: string\r\n        twitter?: string\r\n        vk?: string\r\n        website?: string\r\n        youtube?: string\r\n    }\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nexport type UserProfileACType = ReturnType<typeof setUserProfile>\r\nexport type UserStatusACType = ReturnType<typeof setStatus>\r\nexport type AddPostACType = ReturnType<typeof addPostAC>\r\nexport type UpdatePhotoACType = ReturnType<typeof updatePhoto>\r\nexport type DeletePostACType = ReturnType<typeof deletePostAC>\r\nexport type UpdateProfileACType = ReturnType<typeof updateProfileAC>\r\n\r\nexport type ProfileActionType = UserProfileACType | AddPostACType | UserStatusACType | UpdatePhotoACType | DeletePostACType | UpdateProfileACType\r\n\r\nconst ADD_POST = 'lapa-app/profile-reducer/ADD-POST'\r\nconst DELETE_POST = 'lapa-app/profile-reducer/DELETE-POST'\r\nconst SET_USER_PROFILE = 'lapa-app/profile-reducer/SET_USER_PROFILE'\r\nconst SET_STATUS = 'lapa-app/profile-reducer/SET_STATUS'\r\nconst UPDATE_PHOTO = 'lapa-app/profile-reducer/UPDATE_PHOTO'\r\nconst UPDATE_PROFILE = 'lapa-app/profile-reducer/UPDATE_PROFILE'\r\n\r\nexport const addPostAC = (post:string) => ({ type: ADD_POST, post } as const)\r\nexport const deletePostAC = (postId:string) => ({ type: DELETE_POST, postId } as const)\r\nexport const setUserProfile = (profile: APIProfileType) => ({ type: SET_USER_PROFILE, profile } as const)\r\nexport const setStatus = (status: string) => ({ type: SET_STATUS, status } as const)\r\nexport const updatePhoto = (photo: File)=> ({ type: UPDATE_PHOTO, photo } as const)\r\nexport const updateProfileAC = (profile: UpdateProfileType)=> ({ type: UPDATE_PROFILE, profile } as const)\r\n\r\n\r\nconst initialProfileState = {\r\n    posts: [\r\n        { id: v1(), postMessage: \"Hi, I'm Pavel\", likes: 10 },\r\n        { id: v1(), postMessage: \"Let's go to learn a React\", likes: 9 },\r\n        { id: v1(), postMessage: \"Also we need improve our html/css skills\", likes: 11 },\r\n        { id: v1(), postMessage: \"Then we'll learn Redux\", likes: 22 }\r\n    ],\r\n    profile: { \r\n        aboutMe: '', \r\n        userId: 0, \r\n        fullName: '', \r\n        photos: { small: '', large: '' }, \r\n        contacts: {},\r\n        lookingForAJobDescription: '',\r\n        lookingForAJob: false,\r\n    },\r\n    status:'',\r\n}\r\n\r\nexport const profileReducer = (state: ProfileStateType = initialProfileState, action: ProfileActionType) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: v1(),\r\n                postMessage: action.post,\r\n                likes: 0\r\n            }\r\n            return { ...state, posts: [...state.posts, newPost]}\r\n        }\r\n        case DELETE_POST:{\r\n            return {...state, posts: state.posts.filter(post => post.id !== action.postId)}\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return { ...state, profile: action.profile }\r\n        }\r\n        case SET_STATUS: {\r\n            return { ...state, status: action.status  }\r\n        }\r\n        case UPDATE_PHOTO: {\r\n            return {...state, profile: {...state.profile, photos:action.photo}}\r\n        }\r\n        case UPDATE_PROFILE: {\r\n            return {...state, profile: {...state.profile, ...action.profile}}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getProfile = (profileUserId: string) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n        const response = await profileAPI.getProfile(profileUserId)\r\n            dispatch(setUserProfile(response.data))\r\n    }\r\n}\r\n\r\nexport const getStatus = (profileUserId: string) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n        const response = await profileAPI.getProfileStatus(profileUserId)\r\n            dispatch(setStatus(response.data))\r\n    }\r\n}\r\n\r\nexport const updateStatus = (status: string) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n       const response = await profileAPI.updateStatus(status)\r\n            if (response.data.resultCode === 0){\r\n                dispatch(setStatus(status))\r\n            }\r\n    }\r\n}\r\n\r\nexport const updateLargePhoto = (photo: File) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n        const response = await profileAPI.updatePhoto(photo)\r\n            if (response.data.resultCode === 0){\r\n                dispatch(updatePhoto(response.data.data.photos))\r\n            }\r\n    }\r\n}\r\n\r\nexport const addPost = (post: string) => {\r\n    return (dispatch: Dispatch<ProfileActionType>) => {\r\n                dispatch(addPostAC(post))\r\n    }\r\n}\r\n\r\nexport const updateProfile = (profile: UpdateProfileType):ThunkType => {\r\n    return async (dispatch: Dispatch, getState) => {\r\n        const response = await profileAPI.updateProfile(profile)\r\n        if (response.data.resultCode === 0){\r\n            dispatch(updateProfileAC(profile))\r\n            // @ts-ignore\r\n            dispatch(getProfile(getState().auth.userId))\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { PostMesageType } from '../../../../redux/store';\r\nimport s from './Post.module.css'\r\n\r\n\r\nconst Post:React.FC<PostMesageType> = React.memo((props) => { \r\n  return <div className={s.item} key={props.id}>\r\n     <div className={s.postMessage}>{props.message}</div>\r\n     <div className={s.postLikes}>Likes: {props.likes}</div>\r\n    </div>\r\n  \r\n})\r\n\r\nexport default Post;","import {ErrorMessage, Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport * as yup from 'yup'\r\nimport React from \"react\";\r\nimport {postValidationSchema} from \"../../utilits/validations/validationScheme\";\r\n\r\ntype PostFormValueType = {\r\n    post: string\r\n}\r\n\r\ntype PostFormType = {\r\n    addPost: (post: string) => void\r\n}\r\n\r\n\r\n\r\nexport const PostForm = ({addPost, ...props}: PostFormType) => {\r\n\r\n    const formSubmit = (values: PostFormValueType, {setSubmitting}: FormikHelpers<{ post: string; }>) => {\r\n        addPost(values.post)\r\n        setSubmitting(false);\r\n\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{post: ''}}\r\n            validateOnBlur\r\n            validationSchema={postValidationSchema}\r\n            onSubmit={formSubmit}\r\n        >\r\n            {({isSubmitting,\r\n                  errors,\r\n                  touched,\r\n                  dirty,\r\n                  isValid,\r\n\r\n            }) => (\r\n                <Form>\r\n                    <Field name=\"post\"\r\n                           as=\"textarea\"\r\n                           className=\"form-textarea\"\r\n                           placeholder='Enter a post...'\r\n                    />\r\n                    {touched.post && errors.post && <ErrorMessage name=\"post\" component=\"div\" />}\r\n                    <button type=\"submit\"\r\n                            disabled={isSubmitting && !isValid && !dirty}\r\n                    >\r\n                        Send\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}","import React, { ChangeEventHandler, MouseEventHandler } from 'react';\r\nimport { AddPostType} from '../../../redux/store';\r\nimport Post from './Post/Post';\r\nimport s from './Posts.module.css'\r\nimport {PostForm} from \"../../Forms/PostForm\";\r\nimport {addPost} from \"../../../redux/profile-reducer\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Posts: React.FC<AddPostType> = React.memo(({addPost, myPost, newPost, posts, ...props}) => {\r\n\r\n  const postsElements = posts.map((m) => <Post key={m.id} message={m.postMessage} likes={m.likes} id={m.id} />)\r\n\r\n  return <div>\r\n    <div className={s.postHeader}>\r\n      <div className={s.itemWrapper}>\r\n        <h2 >{myPost} </h2>\r\n      </div>\r\n      <div className={s.item}>\r\n        <PostForm addPost={addPost}/>\r\n      </div>\r\n    </div>\r\n    <div className={s.posts}>\r\n      {postsElements}\r\n\r\n    </div>\r\n  </div>\r\n})\r\n\r\nexport default Posts;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  addPost,\r\n} from '../../../redux/profile-reducer';\r\nimport { StateDataType } from '../../../redux/store';\r\nimport Posts from './Posts';\r\n\r\n\r\n\r\n\r\nconst mapStateProps = (state:StateDataType) =>{\r\n  return {  \r\n    myPost:state.profilePage.myPost,\r\n    newPost:state.profilePage.newPost,\r\n    posts: state.profilePage.posts,\r\n\r\n  }\r\n}\r\n\r\n\r\nconst PostsContainer = connect (mapStateProps,{addPost}) (Posts);\r\n\r\nexport default PostsContainer;","import React from 'react';\r\nimport { AvatarType } from '../../../../redux/store';\r\nimport s from './Avatar.module.css'\r\n\r\n\r\n\r\nconst Avatar:React.FC<AvatarType> = (props) => {\r\n  return <div className={s.avatarWrapper}>\r\n     <img src={props.imgAdress} />\r\n  </div>\r\n}\r\n\r\nexport default Avatar;","import React, {useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onChangeInput = (e: any) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={onEditMode}>{props.status || 'clear status'}</span>\r\n            </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus onChange={onChangeInput} value={status} onBlur={offEditMode}/>\r\n            </div>}\r\n        </div>)\r\n}\r\n    \r\n    \r\n\r\n","import Avatar from \"./Avatar/Avatar\";\r\nimport s from '../Profile.module.css';\r\nimport { APIProfileType, updateLargePhoto } from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport { ChangeEvent, useEffect, useState } from \"react\";\r\nimport { ProfileStatusWithHooks } from \"./ProfileStatusWithHooks\";\r\nimport { UpdateProfileType } from \"../../../api/profileAPI\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: APIProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    updateLargePhoto: (photo: File) => void\r\n    updateProfile: (profile: UpdateProfileType) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n\r\n    if (!props.profile) {\r\n        <Preloader />\r\n    }\r\n    const addPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            props.updateLargePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    return (<div className={s.wrapper}>\r\n        <Avatar imgAdress={props.profile.photos.large} />\r\n        <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n        <input type='file' name=\"myImg\" onChange={addPhoto} />\r\n        <ProfileData {...props.profile} updateProfile={props.updateProfile} />\r\n    </div>)\r\n\r\n}\r\n\r\n\r\nexport default ProfileInfo;\r\n\r\ntype ProfileDataType = {\r\n    aboutMe: string\r\n    userId: number\r\n    fullName: string\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    contacts: {\r\n        facebook?: string\r\n        github?: string\r\n        instagram?: string\r\n        mainLink?: string\r\n        twitter?: string\r\n        vk?: string\r\n        website?: string\r\n        youtube?: string\r\n    }\r\n    updateProfile: (profile: UpdateProfileType) => void\r\n}\r\n\r\n\r\nconst ProfileData = ({ aboutMe, userId, fullName, lookingForAJob, lookingForAJobDescription, contacts, ...props }: ProfileDataType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [profile, setProfile] = useState<UpdateProfileType>({\r\n        aboutMe,\r\n        userId,\r\n        fullName,\r\n        lookingForAJobDescription,\r\n        lookingForAJob,\r\n        contacts: {\r\n            github: contacts.github\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        setProfile(\r\n            {\r\n                aboutMe,\r\n                userId,\r\n                fullName,\r\n                lookingForAJobDescription,\r\n                lookingForAJob,\r\n                contacts: {\r\n                    github: contacts.github\r\n                }\r\n\r\n            })\r\n    }, [aboutMe, userId, fullName, lookingForAJob, lookingForAJobDescription, contacts])\r\n\r\n    const onValueChange = (e: ChangeEvent<HTMLInputElement>, name: string) => {\r\n        switch (name) {\r\n            case \"fullName\": {\r\n                return setProfile({ ...profile, fullName: e.currentTarget.value })\r\n            }\r\n            case \"aboutMe\": {\r\n                return setProfile({ ...profile, aboutMe: e.currentTarget.value })\r\n            }\r\n            case \"lookingForAJobDescription\": {\r\n                return setProfile({ ...profile, lookingForAJobDescription: e.currentTarget.value })\r\n            }\r\n            case \"lookingForAJob\": {\r\n                return setProfile({ ...profile, lookingForAJob: e.currentTarget.checked })\r\n            }\r\n            case \"contacts.github\": {\r\n                return setProfile({ ...profile, contacts: { ...contacts, github: e.currentTarget.value } })\r\n            }\r\n            default: {\r\n                return profile\r\n            }\r\n        }\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateProfile({\r\n            aboutMe: profile.aboutMe,\r\n            userId: profile.userId,\r\n            fullName: profile.fullName,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            contacts: {\r\n                github: profile.contacts.github\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            {!editMode && <>\r\n                <div>\r\n                    About me: {aboutMe}\r\n                </div><div>\r\n                    Fullname: {fullName}\r\n                </div><div>\r\n                    lookingForAJobDescription: {lookingForAJobDescription}\r\n                </div><div>\r\n                    lookingForAJob: {lookingForAJob ? 'yes' : 'no'}\r\n                </div><div>\r\n                    contacts: <span><a href={contacts.github} target={'_blank'}>\r\n                        {contacts.github}</a></span>\r\n                </div>\r\n            </>}\r\n            {editMode && <>\r\n                <div>\r\n                    About me: <input type=\"text\" value={profile.aboutMe} onChange={(e) => onValueChange(e, 'aboutMe')} />\r\n                </div><div>\r\n                    Fullname: <input type=\"text\" value={profile.fullName} onChange={(e) => onValueChange(e, 'fullName')} />\r\n                </div><div>\r\n                    lookingForAJobDescription: <input type=\"text\" value={profile.lookingForAJobDescription}\r\n                        onChange={(e) => onValueChange(e, 'lookingForAJobDescription')} />\r\n                </div><div>\r\n                    lookingForAJob: <input type='checkbox' checked={profile.lookingForAJob} onChange={(e) => onValueChange(e, \"lookingForAJob\")} />\r\n                </div><div>\r\n                    contacts: <input type=\"text\" value={profile.contacts.github}\r\n                        onChange={(e) => onValueChange(e, 'contacts.github')} />\r\n                </div>\r\n\r\n            </>}\r\n            {editMode ? <button onClick={offEditMode}>Save</button> : <button onClick={onEditMode}>Edit</button>}\r\n        </div>\r\n    )\r\n}","import React, { ReactNode } from 'react';\r\nimport PostsContainer from './Posts/PostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport {APIProfileType} from '../../redux/profile-reducer';\r\nimport {UpdateProfileType} from \"../../api/profileAPI\";\r\n\r\n\r\n\r\ntype ProfilePropsType ={\r\n  children?: ReactNode\r\n  profile:APIProfileType\r\n  status: string\r\n  updateStatus:(status:string)=> void\r\n  updateLargePhoto: (photo:File)=> void\r\n  updateProfile: (profile:UpdateProfileType)=>void\r\n}\r\n\r\n\r\n\r\nconst Profile = (props:ProfilePropsType) => {\r\n \r\n  return <div>\r\n    <ProfileInfo\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        updateLargePhoto={props.updateLargePhoto}\r\n        updateProfile={props.updateProfile}\r\n    />\r\n        <PostsContainer/>\r\n  </div>\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport * as axios from 'axios'\r\nimport { connect, ConnectedComponent } from 'react-redux';\r\nimport {\r\n  APIProfileType,\r\n  getProfile,\r\n  getStatus,\r\n  setUserProfile, updateLargePhoto, updateProfile,\r\n  updateStatus\r\n} from '../../redux/profile-reducer';\r\nimport { StateDataType } from '../../redux/store';\r\nimport { RouteComponentProps, StaticContext, withRouter, WithRouterStatics } from 'react-router';\r\nimport {profileAPI, UpdateProfileType} from \"../../api/profileAPI\";\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\ntype UserId = {\r\n  userId:string\r\n}\r\n\r\ntype ProfileContainerType ={\r\n  profile: APIProfileType\r\n  setUserProfile:(profile:APIProfileType) => void\r\n}\r\ntype RouterPropType = RouteComponentProps<UserId> & {\r\n  profile: APIProfileType\r\n  isAuth: boolean\r\n  status:string\r\n  setUserProfile:(profile:APIProfileType) => void\r\n  getProfile:(profileUserId: string)=> void\r\n  getStatus:(profileUserId: string) => void\r\n  updateStatus:(status:string)=> void\r\n  updateLargePhoto:(photo: File)=> void\r\n  updateProfile:(profile:UpdateProfileType)=>void\r\n}\r\n\r\nclass ProfileContainer extends React.Component<RouterPropType> {\r\n  \r\n  componentDidMount() {\r\n    let userId = this.props.match.params.userId\r\n    if(!userId){\r\n      userId = '21095'\r\n    }\r\n    this.props.getProfile(userId)\r\n    this.props.getStatus(userId)\r\n}\r\n\r\n  render()\r\n  {\r\n    return <Profile\r\n        {...this.props}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        updateLargePhoto={this.props.updateLargePhoto}\r\n        updateProfile={this.props.updateProfile}\r\n    />\r\n  }\r\n}\r\n\r\nlet mapStateToProps= (state:StateDataType) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\nexport default compose<React.ComponentClass<Pick<RouteComponentProps<any, StaticContext, unknown>, never>, any> & WithRouterStatics<ConnectedComponent<(props: any) => JSX.Element, Omit<any, \"isAuth\" | \"dispatch\">>>>(\r\n  connect(mapStateToProps, {setUserProfile, getProfile, getStatus, updateStatus, updateLargePhoto, updateProfile}),\r\n  withRouter,\r\n  withAuthRedirect,\r\n)(ProfileContainer)","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL:`https://social-network.samuraijs.com/api/1.0/`,\r\n})\r\n\r\n\r\nexport const authAPI = {\r\n    getAuth (){\r\n        return instance.get(`auth/me`).then(response => response.data)\r\n    },\r\n    logining(params: {email: string, password: string, rememberMe?:boolean, captcha?: string}){\r\n        return instance.post(`auth/login`, {...params})\r\n    },\r\n    setUnlogging(){\r\n        return instance.delete(`auth/login`)\r\n    },\r\n    getCaptcha(){\r\n        return instance.get('security/get-captcha-url')\r\n    }\r\n}\r\n","\r\nimport { Dispatch } from \"redux\"\r\nimport { authAPI } from \"../api/authAPI\"\r\nimport { ThunkType } from \"./redux-store\"\r\n\r\nconst SET_LOGIN = 'lapa-app/login-reducer/SET_LOGIN'\r\nconst SET_CAPTCHA = 'lapa-app/login-reducer/SET_CAPTCHA'\r\n\r\n\r\nexport type LoginDataActionType = ReturnType<typeof setLoginData>\r\nexport type CaptchaActionType = ReturnType<typeof setCaptchaUrl>\r\n\r\nexport type LoginActionType = LoginDataActionType | CaptchaActionType\r\n\r\nexport type LoginType = {\r\n    data: {\r\n        login: string,\r\n        password: string\r\n    }\r\n    captchaUrl: string\r\n}\r\n\r\nconst initialProfileState = {\r\n    data: {\r\n        login:'',\r\n        password:'',\r\n    },\r\n    captchaUrl:''\r\n    \r\n}\r\n\r\nexport const setLoginData = (data: {login:string, password:string}) => ({ type: SET_LOGIN, data} as const)\r\nexport const setCaptchaUrl = (captchaUrl: string) => ({ type: SET_CAPTCHA, captchaUrl} as const)\r\n\r\nexport const loginReducer = (state:LoginType  = initialProfileState, action:LoginActionType ) => {\r\n    switch (action.type) {\r\n        case SET_LOGIN: {\r\n            return { ...state, data:action.data}\r\n        }\r\n        case SET_CAPTCHA:{\r\n            return {...state,captchaUrl: action.captchaUrl}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = ():ThunkType => {\r\n    return async (dispatch: Dispatch) => {\r\n       const res = await authAPI.getCaptcha()\r\n            if (res.data.url) {\r\n                dispatch(setCaptchaUrl(res.data.url))\r\n            }\r\n           \r\n    }\r\n}\r\n\r\n","import {  getCaptchaUrl } from './login-reducer';\r\nimport { Dispatch } from \"redux\";\r\nimport { usersAPI } from \"../api/usersAPI\";\r\nimport { setCurrentPage, setUsers, toggleIsFetching, UsersActionType } from \"./users-reducer\";\r\nimport { authAPI } from \"../api/authAPI\";\r\nimport { profileAPI } from \"../api/profileAPI\";\r\nimport { ThunkType} from \"./redux-store\";\r\nimport { ThunkDispatch } from 'redux-thunk';\r\n\r\nconst SET_AUTH_DATA = 'lapa-app/auth-reducer/SET_AUTH_DATA'\r\nconst SET_USER_PHOTO = 'lapa-app/auth-reducer/SET_USER_PHOTO'\r\nconst SET_AUTH_CHANGE = 'lapa-app/auth-reducer/SET_AUTH_CHANGE'\r\nconst GET_LOGIN_ERROR = 'lapa-app/auth-reducer/GET_LOGIN_ERROR'\r\n\r\n\r\nexport type AuthActionType = AuthDataActionType | UserPhotoActionType | AuthChangeActionType | LoginErrorDataActionType\r\n\r\nexport type LoginErrorDataActionType = ReturnType<typeof getLoginError>\r\nexport type AuthDataActionType = ReturnType<typeof setAuthData>\r\nexport type UserPhotoActionType = ReturnType<typeof setUserPhoto>\r\nexport type AuthChangeActionType = ReturnType<typeof setAuthChange>\r\n\r\nexport type AuthDataType = {\r\n    userId: number\r\n    login: string\r\n    email: string\r\n    isAuth: boolean\r\n    photos: {\r\n        large: string\r\n        small: string\r\n    }\r\n    errorMessage?:string\r\n}\r\n\r\n\r\n\r\nexport const setAuthData = (userId: number, login: string, email: string) => ({\r\n    type: SET_AUTH_DATA, data: { userId, login, email } } as const)\r\nexport const setUserPhoto = (photos: { large: string, small: string }) => ({ type: SET_USER_PHOTO, photos } as const)\r\nexport const setAuthChange = (isAuth: boolean) => ({ type: SET_AUTH_CHANGE, isAuth } as const)\r\nexport const getLoginError = (message:string) => ({ type: GET_LOGIN_ERROR, message } as const)\r\n\r\n\r\nconst initialProfileState = {\r\n    userId: 0,\r\n    login: '',\r\n    email: '',\r\n    isAuth: false,\r\n    photos: {\r\n        large: '',\r\n        small: ''\r\n    }\r\n}\r\n\r\nexport const authReducer = (state: AuthDataType = initialProfileState, action: AuthActionType) => {\r\n    switch (action.type) {\r\n        case SET_AUTH_DATA: {\r\n            return { ...state, ...action.data, isAuth: true }\r\n        }\r\n        case SET_USER_PHOTO: {\r\n            return { ...state, photos: { ...action.photos } }\r\n\r\n        }\r\n        case SET_AUTH_CHANGE: {\r\n            return { ...state, isAuth: action.isAuth }\r\n        }\r\n        case GET_LOGIN_ERROR: {\r\n            return {...state, errorMessage: action.message}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const authMe = ():ThunkType => {\r\n    return async (dispatch: Dispatch<AuthActionType>) => {\r\n            const data = await authAPI.getAuth();\r\n                if (data.resultCode === 0) {\r\n                    const { id, login, email } = data.data\r\n                    dispatch(setAuthData(id, login, email))\r\n                    const response = await profileAPI.getProfile(id)\r\n                        dispatch(setUserPhoto(response.data.photos))\r\n                }\r\n                return data\r\n    }\r\n}\r\n\r\nexport const setAuth = (email: string, password: string, rememberMe:boolean, captcha?: string):ThunkType => {\r\n    return async (dispatch) => {\r\n       const res = await authAPI.logining({ email, password, rememberMe, captcha})\r\n            if (res.data.data.userId === 21095) {\r\n                dispatch(setAuthChange(true))\r\n            }\r\n            else{\r\n                if(res.data.resultCode === 10){\r\n                    dispatch(getCaptchaUrl())\r\n                }\r\n                dispatch(getLoginError(res.data.messages[0]))\r\n            }\r\n    }\r\n}\r\n\r\nexport const setLogOut = ():ThunkType => {\r\n    return async (dispatch: Dispatch<AuthActionType>) => {\r\n       const res = await authAPI.setUnlogging()\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAuthChange(false))\r\n            }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport s from './Logo.module.css'\r\n\r\nconst Logo = () => {\r\n    return (\r\n    <div className={s.logo}>\r\n        <img src=\"https://2.downloader.disk.yandex.by/preview/c33abbeedf2544813e8e194dd20f17c49c8525bc8a4c13ff54fdcd76e6970467/inf/IQDoTQ9-t0Oyj8Xx04QwfQH0J1DSOU1BptY6p8aNSydwwkexzhJIMwjoKhSTi3zbr8IWPXiHulTJPGfOwk4Wpw%3D%3D?uid=1108277722&filename=lapa-logo.png&disposition=inline&hash=&limit=0&content_type=image%2Fpng&owner_uid=1108277722&tknv=v2&size=1898x830\" alt=\"\" />\r\n    </div>)\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport s from './Search.module.css'\r\n\r\nconst Search = () => {\r\n    return (\r\n        <div className={s.search}>\r\n            <input type=\"text\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport { WidgetsType } from '../../../../redux/store';\r\nimport s from './Widget.module.css'\r\n\r\n\r\n\r\nconst Widget = (props: WidgetsType) => {\r\n    return (\r\n        <img src={props.src}/>\r\n        )\r\n}\r\n\r\nexport default Widget;","import React from 'react';\r\nimport Widget from './Widget/Widget';\r\nimport s from './Widgets.module.css'\r\n\r\n\r\ntype WidgetsPropsType = {\r\n    smallPhoto: string\r\n}\r\n\r\nconst Widgets = (props:WidgetsPropsType) => {\r\n    return (\r\n        <div className={s.widgets}>\r\n             <Widget src={'https://icon-library.com/images/send-message-icon-png/send-message-icon-png-29.jpg'}/>\r\n             <Widget src={'https://png.pngtree.com/png-vector/20190411/ourlarge/pngtree-vector-bell-icon-png-image_927119.jpg'}/>\r\n             <Widget src={props.smallPhoto}/> \r\n\r\n       \r\n        </div>\r\n    )\r\n    }\r\nexport default Widgets;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { authAPI } from '../../api/authAPI';\r\nimport s from './Header.module.css'\r\nimport Logo from './Logo/Logo';\r\nimport Search from './Search/Search';\r\nimport Widgets from './Widgets/Widgets';\r\n\r\n\r\ntype HeaderPropsType = {\r\n    children?: React.ReactNode\r\n    login: string\r\n    isAuth: boolean\r\n    smallPhoto: string\r\n    setLogOut: ()=> void\r\n}\r\n\r\nconst Header = ({setLogOut, ...props}: HeaderPropsType) => {\r\n\r\n    const logOut = () => {\r\n        setLogOut()\r\n    }\r\n\r\n\r\n    return <header className={s.header}>\r\n        <Logo />\r\n        <Search />\r\n        {props.isAuth ?\r\n            <div className={s.widgets}>\r\n                {props.login}\r\n                <Widgets smallPhoto={props.smallPhoto} />\r\n                <button onClick={logOut}>Log out</button>\r\n            </div>\r\n            : <NavLink to={'/login'}>Login</NavLink>}\r\n\r\n    </header>\r\n}\r\n\r\nexport default Header;","import * as axios from 'axios'\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {AuthDataType, authMe, setAuthData, setLogOut, setUserPhoto} from '../../redux/auth-reducer';\r\nimport { StateDataType } from '../../redux/store';\r\nimport Header from './Header';\r\nimport {authAPI} from \"../../api/authAPI\";\r\nimport {profileAPI} from \"../../api/profileAPI\";\r\n\r\n\r\ntype HeaderContainerPropsType = {\r\n    setAuthData: (userId: number, login: string, email: string) => void\r\n    setUserPhoto:(photos: {large:string, small:string}) => void\r\n    login: string\r\n    isAuth: boolean\r\n    smallPhoto: string\r\n    setLogOut: ()=> void\r\n}\r\n\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType>  {\r\n\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props} login={this.props.login} isAuth={this.props.isAuth} smallPhoto={this.props.smallPhoto} setLogOut={this.props.setLogOut}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateDataType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n    smallPhoto: state.auth.photos.small\r\n})\r\n\r\nexport default connect(mapStateToProps, { setAuthData, setUserPhoto , setLogOut})(HeaderContainer)\r\n","import React, { useState } from 'react'\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { setAuth } from '../../redux/auth-reducer';\r\nimport { StateDataType } from '../../redux/store';\r\nimport { loginningValidationSchema } from '../../utilits/validations/validationScheme';\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport {getCaptchaUrl, setLoginData} from \"../../redux/login-reducer\";\r\n\r\ntype Inputs = {\r\n    login: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n    captcha?: string\r\n};\r\n\r\ntype LoginPropsType = {\r\n    isAuth: boolean\r\n    login: string,\r\n    password: string,\r\n    errorMessage?:string\r\n    setLoginData: (data: {\r\n        login: string,\r\n        password: string,\r\n    }) => void\r\n    setAuth: (email: string, password: string, rememberMe:boolean, captcha?: string) => void\r\n    getCaptchaUrl: ()=> void\r\n    captchaUrl: string\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    const { register, handleSubmit, formState: { errors } } = useForm<Inputs>({\r\n        resolver: yupResolver (loginningValidationSchema)\r\n    });\r\n\r\n    const onSubmit: SubmitHandler<Inputs> = (data) => {\r\n        loginRequest(data.login, data.password, data.rememberMe, data.captcha);\r\n        props.setLoginData(data)\r\n    }\r\n    const loginRequest = (email: string, password: string, rememberMe:boolean, captcha?:string) => {\r\n        props.setAuth(email, password, rememberMe,captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n    \r\n    return (\r\n        \r\n        <div>\r\n            <h1>LOGIN PAGE</h1>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div>\r\n                    <input defaultValue={''} {...register(\"login\", { required: true, pattern: /^[A-Za-z]+$/i })} />\r\n                </div>\r\n                {props.errorMessage && <span>{props.errorMessage}</span>}\r\n                {errors.login && <span>This field is required</span>}\r\n                <div>\r\n                    <input defaultValue={''} type='password' {...register(\"password\", { required: true })} />\r\n                </div>\r\n                {errors.password && <span>{errors.password.message}</span>}\r\n                <div>\r\n                    <input type='checkbox' {...register(\"rememberMe\")} />\r\n                </div>\r\n                {props.captchaUrl && <div>\r\n                    <img src={props.captchaUrl} style={{width:'200px'}}/>\r\n                    <input type='text' {...register(\"captcha\")}/>\r\n                </div>}\r\n                <div>\r\n                    <input type=\"submit\" />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: StateDataType) => ({\r\n    login: state.login.data.login,\r\n    password: state.login.data.password,\r\n    isAuth: state.auth.isAuth,\r\n    errorMessage: state.auth.errorMessage,\r\n    captchaUrl: state.login.captchaUrl\r\n})\r\n\r\nexport default connect(mapStateToProps, { setLoginData, setAuth, getCaptchaUrl })(Login);;\r\n\r\n\r\n","import { Dispatch } from \"redux\";\r\nimport { AuthActionType, authMe } from \"./auth-reducer\";\r\nimport {ThunkType} from \"./redux-store\";\r\n\r\nconst SET_INITIALIZED = 'lapa-app/app-reducer/SET_INITIALIZED'\r\n\r\n\r\n\r\nexport type AppActionType = SetInitializedActionType | AuthActionType\r\n\r\nexport type SetInitializedActionType = ReturnType<typeof setInitialized>\r\n\r\n\r\n\r\nexport const setInitialized = (initialized:boolean)=> ({ type: SET_INITIALIZED, initialized } as const)\r\n\r\n\r\n\r\nconst initialAppState = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReduser = (state = initialAppState, action: AppActionType) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED: {\r\n            return { ...state, initialized:action.initialized}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializedTC = ():ThunkType => {\r\n    return (dispatch: Dispatch) => {\r\n        //@ts-ignore\r\n      const promise = dispatch(authMe())\r\n      promise.then(()=>{\r\n        dispatch(setInitialized(true))\r\n      })\r\n\r\n    }\r\n}\r\n\r\n","import React, { Suspense } from 'react';\r\nimport './App.css';\r\nimport NavbarLeft from './components/NavbarLeft/NavbarLeft';\r\nimport NavbarRight from './components/NavbarRight/NavbarRight';\r\nimport { BrowserRouter, Route, withRouter } from 'react-router-dom'\r\nimport News from './components/News/News';\r\nimport Music from './components/Music/Music';\r\nimport Settings from './components/Settings/Settings';\r\nimport { DialogsDataType, ReduxStoreType, StateDataType, store } from './redux/store';\r\n// import DialogsContainer from './components/Dialogs/DialogsContainer';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Login from './components/Login/Login';\r\nimport { render } from '@testing-library/react';\r\nimport { authMe } from './redux/auth-reducer';\r\nimport { connect, ConnectedComponent } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { initializedTC } from './redux/app-reducer';\r\nimport { AppRootStateType } from './redux/redux-store';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\n\r\ntype AppPropsType = {\r\n  initializedTC: () => void\r\n  friends: DialogsDataType[]\r\n  initialized: boolean\r\n}\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n  componentDidMount() {\r\n    this.props.initializedTC()\r\n  }\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />\r\n    }\r\n    \r\n      return (\r\n\r\n        <div className='app-wrapper'>\r\n          <HeaderContainer />\r\n          <NavbarLeft />\r\n          <NavbarRight friends={this.props.friends} />\r\n          <div className='app-wrapper-content'>\r\n            <Suspense fallback={<Preloader />}>\r\n            <Route path='/profile/:userId?' render={() => <ProfileContainer />} />\r\n            <Route path='/dialogs' render={() => <DialogsContainer />} />\r\n            <Route path='/users' render={() => <UsersContainer />} />\r\n            <Route path='/login' render={() => <Login />} />\r\n            {/* <Route path='/news' render={() => <News />}/> \r\n                <Route path='/music' render={() => <Music />}/>\r\n                <Route path='/settings' render={() => <Settings />}/>       */}\r\n            </Suspense>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => ({\r\n  friends: state.navbarRight.friends,\r\n  initialized: state.app.initialized\r\n})\r\n\r\nexport default compose<ConnectedComponent<(props: any) => JSX.Element, Omit<any, \"isAuth\" | \"dispatch\">>>(withRouter, connect(mapStateToProps, { initializedTC }))(App)\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { v1 } from \"uuid\"\r\nimport { ActionType,NavbarRightType } from \"./store\"\r\n\r\n\r\nconst initialNavbarState = {\r\n    friends: [\r\n      { id: v1(), name: 'Pashka' },\r\n      { id: v1(), name: 'Maks' },\r\n      { id: v1(), name: 'Vlad' },\r\n      { id: v1(), name: 'Leha' }\r\n    ]\r\n  }\r\n\r\nconst navbarRightReduser = (state: NavbarRightType = initialNavbarState, action: ActionType) => {\r\n    \r\n        return state;\r\n    }\r\n\r\nexport default navbarRightReduser;","import {applyMiddleware, combineReducers, createStore, compose} from 'redux'\r\nimport {AuthActionType, authReducer} from './auth-reducer';\r\nimport dialogsReducer, {DialogsActionType} from './dialogs-reducer';\r\nimport navbarRightReduser from './navbar-right-reduser';\r\nimport {ProfileActionType, profileReducer} from './profile-reducer';\r\nimport {UsersActionType, usersReducer} from './users-reducer';\r\nimport thunkMiddleware, { ThunkAction, ThunkDispatch } from 'redux-thunk'\r\nimport {LoginActionType, loginReducer} from './login-reducer';\r\nimport {AppActionType, appReduser} from './app-reducer';\r\n\r\n\r\nconst reducers = combineReducers({\r\n    profilePage:profileReducer,\r\n    dialogsPage:dialogsReducer,\r\n    navbarRight:navbarRightReduser,\r\n    users:usersReducer,\r\n    auth:authReducer,\r\n    login:loginReducer,\r\n    app: appReduser\r\n})\r\n\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers,composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n  ));\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>\r\n\r\nexport type GeneralAppActionType = AppActionType\r\n    | AuthActionType\r\n    | ProfileActionType\r\n    | DialogsActionType\r\n    | LoginActionType\r\n    | UsersActionType\r\n\r\nexport type ThunkType = ThunkAction<void, AppRootStateType, unknown, GeneralAppActionType>\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/redux-store';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\n  ReactDOM.render(\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n  );\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemWrapper\":\"Posts_itemWrapper__3cvvo\",\"item\":\"Posts_item__3jmKr\",\"postHeader\":\"Posts_postHeader__LmL7p\",\"posts\":\"Posts_posts__12nHS\"};","import * as yup from \"yup\";\r\n\r\nexport const postValidationSchema = yup.object().shape({\r\n    post: yup.string()\r\n        .max(100, 'Max length is 100 symbols!')\r\n        .required('Required field'),\r\n\r\n\r\n})\r\n\r\nexport const messageValidationSchema = yup.object().shape({\r\n    message: yup.string()\r\n        .max(100, 'Max length is 100 symbols!')\r\n        .required('Required field'),\r\n})\r\n\r\n\r\nexport const loginningValidationSchema = yup.object({\r\n    login: yup.string().email('Enter valid email'),\r\n    password: yup.string().min(6,'Min length is 6 symbols!' )\r\n}).required('Required field')","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemLink\":\"Navigation_itemLink__1CLZX\",\"active\":\"Navigation_active__ZKPNN\",\"item\":\"Navigation_item__1Lphm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selected\":\"Paginator_selected__2XwE6\",\"page\":\"Paginator_page__1xWmB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Users_wrapper__IPgt-\",\"info\":\"Users_info__1grIT\",\"items\":\"Users_items__26q9j\",\"selected\":\"Users_selected__322Qs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__5yp1L\",\"postLikes\":\"Post_postLikes__1z3U8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2yJqB\",\"widgets\":\"Header_widgets__2xYpZ\"};"],"sourceRoot":""}