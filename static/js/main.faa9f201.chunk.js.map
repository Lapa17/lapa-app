{"version":3,"sources":["api/authAPI.ts","components/Users/Users.module.css","utilits/validations/validationScheme.ts","redux/app-reducer.ts","components/common/Paginator/Paginator.module.css","components/Profile/Profile.module.css","components/Profile/Posts/Posts.module.css","redux/dialogs-reducer.ts","components/Profile/Posts/Post/Post.module.css","components/Header/Widgets/Widgets.module.css","redux/navbar-right-reduser.ts","redux/redux-store.tsx","components/Login/Login.tsx","assets/images/loader.gif","components/common/Preloader/Preloader.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Forms/PostForm.tsx","components/Profile/Posts/Post/PostComment.tsx","components/Profile/Posts/Post/Post.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Posts/PostsContainer.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Header/Widgets/Widget/Widget.tsx","components/Header/Widgets/Widgets.tsx","components/Header/Header.tsx","components/common/Paginator/Paginator.tsx","assets/images/user.png","components/Users/User.tsx","utilits/selectors/user-selector.ts","components/Users/Users.tsx","App.tsx","reportWebVitals.ts","index.tsx","redux/profile-reducer.ts","utilits/selectors/profile-selector.ts","redux/auth-reducer.ts","api/usersAPI.ts","redux/users-reducer.ts","api/profileAPI.ts","redux/login-reducer.ts"],"names":["instance","axios","create","withCredentials","baseURL","authAPI","getAuth","get","then","response","data","logining","params","post","setUnlogging","delete","getCaptcha","module","exports","postValidationSchema","yup","shape","max","messageValidationSchema","message","loginningValidationSchema","login","email","password","min","required","SET_INITIALIZED","initialAppState","initialized","appReduser","state","action","type","initializedTC","dispatch","authMe","ADD_MESSAGE","addMessage","initialDialogState","dialogs","id","v1","name","messages","dialogsReducer","newMessage","initialNavbarState","friends","navbarRightReduser","reducers","combineReducers","profilePage","profileReducer","dialogsPage","navbarRight","users","usersReducer","auth","authReducer","loginReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","useAppSelector","useSelector","connect","isAuth","errorMessage","captchaUrl","setLoginData","setAuth","getCaptchaUrl","props","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","loginRequest","rememberMe","captcha","to","onSubmit","defaultValue","pattern","src","style","width","Preloader","loader","ProfileStatusWithHooks","useDispatch","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileData","aboutMe","userId","fullName","lookingForAJob","lookingForAJobDescription","contacts","Meta","Card","Typography","Paragraph","github","profile","setProfile","onValueChange","checked","marginBottom","boxShadow","title","fontSize","EditOutlined","onClick","hoverable","description","href","target","margin","borderRadius","updateProfile","PostForm","initialValues","validateOnBlur","validationSchema","values","setSubmitting","addPost","isSubmitting","touched","dirty","isValid","xs","span","offset","md","lg","xl","as","placeholder","className","s","formTextarea","component","disabled","formButton","PostComment","likes","setLikes","dislikes","setDislikes","setAction","actions","createElement","LikeFilled","LikeOutlined","React","DislikeFilled","DislikeOutlined","comment","author","content","Post","memo","avatar","photos","small","Posts","myPost","newPost","posts","postsElements","map","m","postMessage","PostsContainer","ProfileInfo","inRef","useRef","wrapper","textAlign","large","paddingBottom","icon","DownloadOutlined","size","current","click","ref","display","files","updateLargePhoto","avatarCard","align","justify","count","Profile","selectIsAuth","selectProfile","selectProfileStatus","mainUserId","selectMainUserId","useParams","getProfile","getStatus","direction","Widget","Widgets","widgets","smallPhoto","HeaderRC","Header","Layout","selectLogin","selectSmallPhoto","padding","position","right","zIndex","minWidth","setLogOut","Paginator","totalItemsCounter","pageSize","currentPage","onPageClick","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","filter","p","cn","selected","page","User","user","followInProgress","items","img","userPhoto","followed","some","getUnFollow","getFollow","info","getUser","getPageSize","getTotalUserCounter","totalUserCounter","getCurrentPage","getIsFetchingData","isFetching","getFollowInProgressData","Users","getUsers","getPage","u","Dialogs","lazy","App","catchAllUnhandledErrors","event","alert","console","error","this","addEventListener","removeEventListener","Content","Sider","Footer","hasSider","breakpoint","collapsedWidth","mode","defaultSelectedKeys","Item","UserOutlined","VideoCameraOutlined","UploadOutlined","overflow","fallback","path","render","exact","Component","withRouter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","ADD_POST","DELETE_POST","SET_USER_PROFILE","SET_STATUS","UPDATE_PHOTO","UPDATE_PROFILE","updatePhoto","photo","updateProfileAC","initialProfileState","postId","profileUserId","a","profileAPI","getProfileStatus","resultCode","addPostAC","getState","SET_AUTH_DATA","SET_USER_PHOTO","SET_AUTH_CHANGE","GET_LOGIN_ERROR","setAuthData","setAuthChange","res","headers","usersAPI","setFollow","setUnFollow","IS_FOLLOWING","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialUsersState","userID","follow","totalCount","isFollowing","setUsers","setCurrentPage","toggleIsFetching","toggleIsFollowingProgress","followUnfollow","apiMethod","bind","put","image","formData","FormData","append","SET_LOGIN","SET_CAPTCHA","url"],"mappings":"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","file":"static/js/main.faa9f201.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL:`https://social-network.samuraijs.com/api/1.0/`,\r\n})\r\n\r\n\r\nexport const authAPI = {\r\n    getAuth (){\r\n        return instance.get(`auth/me`).then(response => response.data)\r\n    },\r\n    logining(params: {email: string, password: string, rememberMe?:boolean, captcha?: string}){\r\n        return instance.post(`auth/login`, {...params})\r\n    },\r\n    setUnlogging(){\r\n        return instance.delete(`auth/login`)\r\n    },\r\n    getCaptcha(){\r\n        return instance.get('security/get-captcha-url')\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Users_wrapper__IPgt-\",\"img\":\"Users_img__34U24\",\"info\":\"Users_info__1grIT\",\"items\":\"Users_items__26q9j\",\"selected\":\"Users_selected__322Qs\"};","import * as yup from \"yup\";\r\n\r\nexport const postValidationSchema = yup.object().shape({\r\n    post: yup.string()\r\n        .max(100, 'Max length is 100 symbols!')\r\n\r\n\r\n})\r\n\r\nexport const messageValidationSchema = yup.object().shape({\r\n    message: yup.string()\r\n        .max(100, 'Max length is 100 symbols!')\r\n})\r\n\r\n\r\nexport const loginningValidationSchema = yup.object({\r\n    login: yup.string().email('Enter valid email'),\r\n    password: yup.string().min(6,'Min length is 6 symbols!' )\r\n}).required('Required field')","import { Dispatch } from \"redux\";\r\nimport { AuthActionType, authMe } from \"./auth-reducer\";\r\nimport {ThunkType} from \"./redux-store\";\r\n\r\nconst SET_INITIALIZED = 'lapa-app/app-reducer/SET_INITIALIZED'\r\n\r\n\r\n\r\nexport type AppActionType = SetInitializedActionType | AuthActionType\r\n\r\nexport type SetInitializedActionType = ReturnType<typeof setInitialized>\r\n\r\n\r\n\r\nexport const setInitialized = (initialized:boolean)=> ({ type: SET_INITIALIZED, initialized } as const)\r\n\r\n\r\n\r\nconst initialAppState = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReduser = (state = initialAppState, action: AppActionType) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED: {\r\n            return { ...state, initialized:action.initialized}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializedTC = ():ThunkType => {\r\n    return (dispatch: Dispatch) => {\r\n      const promise = dispatch<any>(authMe())\r\n      promise.then(()=>{\r\n        dispatch(setInitialized(true))\r\n      })\r\n\r\n    }\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selected\":\"Paginator_selected__2XwE6\",\"page\":\"Paginator_page__1xWmB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatarCard\":\"Profile_avatarCard__3lS5N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comment\":\"Posts_comment__2T6y2\",\"formTextarea\":\"Posts_formTextarea__eBhpa\",\"formButton\":\"Posts_formButton__3u2wp\"};","import { Dispatch } from \"redux\"\r\nimport { v1 } from \"uuid\"\r\nimport { DialogsType, } from \"./store\"\r\n\r\nconst ADD_MESSAGE = 'lapa-app/dialogs-reducer/ADD-MESSAGE'\r\n\r\n\r\n\r\nexport type DialogsActionType = AddMessageActionType\r\n\r\ntype AddMessageActionType = ReturnType<typeof addMessage>\r\n\r\n\r\nexport const addMessage = (message: string) => ({ type: ADD_MESSAGE, message } as const)\r\n\r\nconst initialDialogState = {\r\n  dialogs: [\r\n    { id: v1(), name: 'Pashka' },\r\n    { id: v1(), name: 'Maks' },\r\n    { id: v1(), name: 'Vlados' },\r\n    { id: v1(), name: 'Leha' },\r\n    { id: v1(), name: 'Dima' }\r\n  ],\r\n  messages: [\r\n    { id: v1(), message: 'Hi' },\r\n    { id: v1(), message: 'How are you?' },\r\n    { id: v1(), message: 'I am fine' }\r\n  ],\r\n\r\n}\r\n\r\nconst dialogsReducer = (state: DialogsType = initialDialogState, action: DialogsActionType) => {\r\n  switch (action.type) {\r\n    case ADD_MESSAGE: {\r\n      let newMessage = {\r\n        id: v1(),\r\n        message: action.message\r\n      }\r\n      return {...state, messages: [...state.messages, newMessage] }\r\n\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default dialogsReducer;\r\n\r\n\r\nexport const addMessageTC = (message:string) => {\r\n  return (dispatch: Dispatch<DialogsActionType>) => {\r\n    dispatch(addMessage(message))\r\n  }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__5yp1L\",\"postLikes\":\"Post_postLikes__1z3U8\",\"comment\":\"Post_comment__3NEPh\",\"commentAction\":\"Post_commentAction__jphb5\",\"comment-action\":\"Post_comment-action__JeqJE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"widgets\":\"Widgets_widgets__EfZB_\"};","import { v1 } from \"uuid\"\r\nimport { ActionType,NavbarRightType } from \"./store\"\r\n\r\n\r\nconst initialNavbarState = {\r\n    friends: [\r\n      { id: v1(), name: 'Pashka' },\r\n      { id: v1(), name: 'Maks' },\r\n      { id: v1(), name: 'Vlad' },\r\n      { id: v1(), name: 'Leha' }\r\n    ]\r\n  }\r\n\r\nconst navbarRightReduser = (state: NavbarRightType = initialNavbarState, action: ActionType) => {\r\n    \r\n        return state;\r\n    }\r\n\r\nexport default navbarRightReduser;","import {applyMiddleware, combineReducers, createStore, compose} from 'redux'\r\nimport {AuthActionType, authReducer} from './auth-reducer';\r\nimport dialogsReducer, {DialogsActionType} from './dialogs-reducer';\r\nimport navbarRightReduser from './navbar-right-reduser';\r\nimport {APIProfileType, ProfileActionType, profileReducer} from './profile-reducer';\r\nimport {UsersActionType, usersReducer} from './users-reducer';\r\nimport thunkMiddleware, { ThunkAction, ThunkDispatch } from 'redux-thunk'\r\nimport {LoginActionType, loginReducer} from './login-reducer';\r\nimport {AppActionType, appReduser} from './app-reducer';\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\n\r\n\r\nconst reducers = combineReducers({\r\n    profilePage:profileReducer,\r\n    dialogsPage:dialogsReducer,\r\n    navbarRight:navbarRightReduser,\r\n    users:usersReducer,\r\n    auth:authReducer,\r\n    login:loginReducer,\r\n    app: appReduser\r\n})\r\n\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers,composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n  ));\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>\r\n\r\nexport type GeneralAppActionType = AppActionType\r\n    | AuthActionType\r\n    | ProfileActionType\r\n    | DialogsActionType\r\n    | LoginActionType\r\n    | UsersActionType\r\n\r\nexport type ThunkType = ThunkAction<any, AppRootStateType, unknown, GeneralAppActionType>\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\nexport default store;\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { setAuth } from '../../redux/auth-reducer';\r\nimport { StateDataType } from '../../redux/store';\r\nimport { loginningValidationSchema } from '../../utilits/validations/validationScheme';\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport {getCaptchaUrl, setLoginData} from \"../../redux/login-reducer\";\r\n\r\ntype Inputs = {\r\n    login: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n    captcha?: string\r\n};\r\n\r\ntype LoginPropsType = {\r\n    isAuth: boolean\r\n    login: string,\r\n    password: string,\r\n    errorMessage?:string\r\n    setLoginData: (data: {\r\n        login: string,\r\n        password: string,\r\n    }) => void\r\n    setAuth: (email: string, password: string, rememberMe:boolean, captcha?: string) => void\r\n    getCaptchaUrl: ()=> void\r\n    captchaUrl: string\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    const { register, handleSubmit, formState: { errors } } = useForm<Inputs>({\r\n        resolver: yupResolver (loginningValidationSchema)\r\n    });\r\n\r\n    const onSubmit: SubmitHandler<Inputs> = (data) => {\r\n        loginRequest(data.login, data.password, data.rememberMe, data.captcha);\r\n        props.setLoginData(data)\r\n    }\r\n    const loginRequest = (email: string, password: string, rememberMe:boolean, captcha?:string) => {\r\n        props.setAuth(email, password, rememberMe,captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n    \r\n    return (\r\n        \r\n        <div>\r\n            <h1>LOGIN PAGE</h1>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div>\r\n                    <input defaultValue={''} {...register(\"login\", { required: true, pattern: /^[A-Za-z]+$/i })} />\r\n                </div>\r\n                {props.errorMessage && <span>{props.errorMessage}</span>}\r\n                {errors.login && <span>This field is required</span>}\r\n                <div>\r\n                    <input defaultValue={''} type='password' {...register(\"password\", { required: true })} />\r\n                </div>\r\n                {errors.password && <span>{errors.password.message}</span>}\r\n                <div>\r\n                    <input type='checkbox' {...register(\"rememberMe\")} />\r\n                </div>\r\n                {props.captchaUrl && <div>\r\n                    <img src={props.captchaUrl} style={{width:'200px'}}/>\r\n                    <input type='text' {...register(\"captcha\")}/>\r\n                </div>}\r\n                <div>\r\n                    <input type=\"submit\" />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: StateDataType) => ({\r\n    login: state.login.data.login,\r\n    password: state.login.data.password,\r\n    isAuth: state.auth.isAuth,\r\n    errorMessage: state.auth.errorMessage,\r\n    captchaUrl: state.login.captchaUrl\r\n})\r\n\r\nexport default connect(mapStateToProps, { setLoginData, setAuth, getCaptchaUrl })(Login);;\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/loader.07928bad.gif\";","import loader from '../../../assets/images/loader.gif'\r\n\r\n\r\nconst Preloader = () => {\r\n    return (<div>\r\n        <img src={loader} />\r\n    </div>)\r\n\r\n}\r\nexport default Preloader;","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport { updateStatus } from \"../../../redux/profile-reducer\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        dispatch(updateStatus(status))\r\n    }\r\n    const onChangeInput = (e: any) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={onEditMode}>{props.status || 'clear status'}</span>\r\n            </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus onChange={onChangeInput} value={status} onBlur={offEditMode}/>\r\n            </div>}\r\n        </div>)\r\n}\r\n    \r\n    \r\n\r\n","import { useDispatch } from \"react-redux\";\r\nimport { ChangeEvent, useEffect, useState } from \"react\";\r\nimport { UpdateProfileType } from \"../../../api/profileAPI\";\r\nimport { updateProfile } from \"../../../redux/profile-reducer\";\r\nimport { Card } from 'antd';\r\nimport { Checkbox, Radio, Typography, Divider } from 'antd';\r\nimport { CheckOutlined, HighlightOutlined, SmileOutlined, SmileFilled, EditOutlined } from '@ant-design/icons';\r\n\r\nimport { Button } from 'antd';\r\n\r\n\r\n\r\ntype ProfileDataType = {\r\n    aboutMe: string\r\n    userId: number\r\n    fullName: string\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    contacts: {\r\n        facebook?: string\r\n        github?: string\r\n        instagram?: string\r\n        mainLink?: string\r\n        twitter?: string\r\n        vk?: string\r\n        website?: string\r\n        youtube?: string\r\n    }\r\n}\r\n\r\n\r\nexport const ProfileData = ({ aboutMe, userId, fullName, lookingForAJob, lookingForAJobDescription, contacts, ...props }: ProfileDataType) => {\r\n\r\n    const { Meta } = Card;\r\n    const { Paragraph } = Typography;\r\n\r\n    const dispatch = useDispatch()\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [profile, setProfile] = useState<UpdateProfileType>({\r\n        aboutMe,\r\n        userId,\r\n        fullName,\r\n        lookingForAJobDescription,\r\n        lookingForAJob,\r\n        contacts: {\r\n            github: contacts.github\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        setProfile(\r\n            {\r\n                aboutMe,\r\n                userId,\r\n                fullName,\r\n                lookingForAJobDescription,\r\n                lookingForAJob,\r\n                contacts: {\r\n                    github: contacts.github\r\n                }\r\n\r\n            })\r\n    }, [aboutMe, userId, fullName, lookingForAJob, lookingForAJobDescription, contacts])\r\n\r\n    const onValueChange = (e: ChangeEvent<HTMLInputElement>, name: string) => {\r\n        switch (name) {\r\n            case \"fullName\": {\r\n                return setProfile({ ...profile, fullName: e.currentTarget.value })\r\n            }\r\n            case \"aboutMe\": {\r\n                return setProfile({ ...profile, aboutMe: e.currentTarget.value })\r\n            }\r\n            case \"lookingForAJobDescription\": {\r\n                return setProfile({ ...profile, lookingForAJobDescription: e.currentTarget.value })\r\n            }\r\n            case \"lookingForAJob\": {\r\n                return setProfile({ ...profile, lookingForAJob: e.currentTarget.checked })\r\n            }\r\n            case \"contacts.github\": {\r\n                return setProfile({ ...profile, contacts: { ...contacts, github: e.currentTarget.value } })\r\n            }\r\n            default: {\r\n                return profile\r\n            }\r\n        }\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        dispatch(updateProfile({\r\n            aboutMe: profile.aboutMe,\r\n            userId: profile.userId,\r\n            fullName: profile.fullName,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            contacts: {\r\n                github: profile.contacts.github\r\n            }\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            {!editMode &&\r\n            <>\r\n                <Card\r\n                    style={{ marginBottom: '10px', boxShadow:'rgb(0 0 0 / 50%) -6px 5px 10px -5px'}}\r\n                    title={<span style={{fontSize:20}}>{fullName}<EditOutlined onClick={onEditMode}></EditOutlined></span>}\r\n                    hoverable>\r\n                    <Meta\r\n                        title={aboutMe}\r\n                        description={`I'm ${lookingForAJobDescription} and ${lookingForAJob ? 'find' : 'dont find'} a job`} />                        \r\n                </Card>\r\n                <Card title='Contacts:' style={{ marginBottom: '10px', boxShadow:'rgb(0 0 0 / 50%) -6px 5px 10px -5px' }} >\r\n                    <Meta title={<span><a href={contacts.github} target={'_blank'}>\r\n                {contacts.github}</a></span>}/>\r\n                </Card>\r\n                </>}\r\n            {editMode &&\r\n                <Card style={{ margin: '10px', borderRadius: '5px' }}\r\n                    title={<span>\r\n                        Fullname: <input type=\"text\" value={profile.fullName} onChange={(e) => onValueChange(e, 'fullName')} />\r\n                    <Button type=\"primary\" onClick={offEditMode}>Save</Button></span>}\r\n                    hoverable>\r\n\r\n                    <Meta\r\n                        title={<div>\r\n                            About me: <input type=\"text\" value={profile.aboutMe} onChange={(e) => onValueChange(e, 'aboutMe')} />\r\n                        </div>}\r\n                        description={<div>I'm {<span>\r\n                            lookingForAJobDescription: <input type=\"text\" value={profile.lookingForAJobDescription}\r\n                                onChange={(e) => onValueChange(e, 'lookingForAJobDescription')} />\r\n                        </span>} and {<span>\r\n                            lookingForAJob: <input type='checkbox' checked={profile.lookingForAJob} onChange={(e) => onValueChange(e, \"lookingForAJob\")} />\r\n                        </span>} a job </div>} />\r\n\r\n                    <Meta\r\n                        title={<span><a href={contacts.github} target={'_blank'}>\r\n                            {<div>\r\n                                contacts: <input type=\"text\" value={profile.contacts.github}\r\n                                    onChange={(e) => onValueChange(e, 'contacts.github')} />\r\n                            </div>}</a></span>} />\r\n\r\n\r\n                </Card>}\r\n\r\n        </div>\r\n    )\r\n}","import { ErrorMessage, Field, Form, Formik, FormikHelpers } from \"formik\";\r\nimport * as yup from 'yup'\r\nimport React from \"react\";\r\nimport { postValidationSchema } from \"../../utilits/validations/validationScheme\";\r\nimport { addPost } from \"../../redux/profile-reducer\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport s from '../Profile/Posts/Posts.module.css'\r\nimport { Col, Row } from \"antd\";\r\n\r\ntype PostFormValueType = {\r\n    post: string\r\n}\r\n\r\n\r\n\r\n\r\nexport const PostForm = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const formSubmit = (values: PostFormValueType, { setSubmitting }: FormikHelpers<{ post: string; }>) => {\r\n        dispatch(addPost(values.post))\r\n        setSubmitting(false);\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ post: '' }}\r\n            validateOnBlur\r\n            validationSchema={postValidationSchema}\r\n            onSubmit={formSubmit}\r\n        >\r\n            {({ isSubmitting,\r\n                errors,\r\n                touched,\r\n                dirty,\r\n                isValid,\r\n\r\n            }) => (\r\n                <Form>\r\n                    <Row>\r\n                        <Col xs={{ span: 24, offset: 1 }}\r\n                            md={{ span: 24, offset: 1 }}\r\n                            lg={{ span: 18, offset: 1 }}\r\n                            xl={{ span: 18, offset: 1 }}>\r\n                            <Field name=\"post\"\r\n                                as=\"textarea\"\r\n                                placeholder='Enter a post...'\r\n                                className={s.formTextarea}\r\n                            />\r\n\r\n                            {touched.post && errors.post && <ErrorMessage name=\"post\" component=\"div\" />}\r\n                        </Col>\r\n                        <Col xs={{ span: 24, offset: 1 }}\r\n                            md={{ span: 24, offset: 1 }}\r\n                            lg={{ span: 4, offset: 1 }}\r\n                            xl={{ span: 4, offset: 1 }}>\r\n                            <button type=\"submit\"\r\n                                disabled={isSubmitting && !isValid && !dirty}\r\n                                className={s.formButton}\r\n                            >\r\n                                Send\r\n                            </button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n","import {Comment, Tooltip, Avatar, Row} from 'antd';\r\nimport moment from 'moment';\r\nimport {DislikeOutlined, LikeOutlined, DislikeFilled, LikeFilled} from '@ant-design/icons';\r\nimport { createElement, useState } from 'react';\r\nimport React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype CommentPropsType ={\r\n    author: string\r\n    avatar: string\r\n    content: string\r\n}\r\n\r\nexport const PostComment = (props: CommentPropsType) => {\r\n    const [likes, setLikes] = useState(0);\r\n    const [dislikes, setDislikes] = useState(0);\r\n    const [action, setAction] = useState<'liked' | 'disliked' | null>(null);\r\n\r\n    const like = () => {\r\n        setLikes(1);\r\n        setDislikes(0);\r\n        setAction('liked');\r\n    };\r\n\r\n    const dislike = () => {\r\n        setLikes(0);\r\n        setDislikes(1);\r\n        setAction('disliked');\r\n    };\r\n\r\n    const actions = [\r\n        <Tooltip key=\"comment-basic-like\" title=\"Like\">\r\n      <span onClick={like}>\r\n        {createElement(action === 'liked' ? LikeFilled : LikeOutlined)}\r\n          <span className=\"comment-action\">{likes}</span>\r\n      </span>\r\n        </Tooltip>,\r\n        <Tooltip key=\"comment-basic-dislike\" title=\"Dislike\">\r\n      <span onClick={dislike}>\r\n        {React.createElement(action === 'disliked' ? DislikeFilled : DislikeOutlined)}\r\n          <span className=\"comment-action\">{dislikes}</span>\r\n      </span>\r\n        </Tooltip>\r\n    ];\r\n\r\n    return (\r\n        <Comment\r\n        className={s.comment}\r\n            actions={actions}\r\n            author={props.author}\r\n            content={\r\n                <p>\r\n                    {props.content}\r\n                </p>\r\n            }\r\n            style={{boxShadow:'rgb(0 0 0 / 50%) -6px 5px 10px -5px'}}\r\n            \r\n            // datetime={\r\n            //     <Tooltip title={moment().format('YYYY-MM-DD HH:mm:ss')}>\r\n            //         <span>{moment().fromNow()}</span>\r\n            //     </Tooltip>\r\n            // }\r\n        />\r\n    );\r\n};","import React from 'react';\r\nimport { PostMesageType } from '../../../../redux/store';\r\nimport {Col} from \"antd\";\r\nimport { PostComment } from './PostComment';\r\n\r\n\r\nconst Post:React.FC<PostMesageType> = React.memo((props) => { \r\n  return <Col span={24} style={{marginBottom: 10}}\r\n  >\r\n      <PostComment author={props.profile.fullName} avatar={props.profile.photos.small} content={props.message}/>\r\n  </Col>\r\n\r\n})\r\n\r\nexport default Post;","import React, {ChangeEventHandler, MouseEventHandler} from 'react';\r\nimport {AddPostType} from '../../../redux/store';\r\nimport Post from './Post/Post';\r\nimport s from './Posts.module.css'\r\nimport {PostForm} from \"../../Forms/PostForm\";\r\nimport {createElement, useState} from 'react';\r\nimport {Comment, Tooltip, Avatar, Row} from 'antd';\r\n\r\n\r\nconst Posts: React.FC<AddPostType> = React.memo(({addPost, myPost, newPost, posts, profile, ...props}) => {\r\n\r\n    const postsElements = posts.map((m) => <Post profile={profile} key={m.id} message={m.postMessage} likes={m.likes} id={m.id}/>)\r\n\r\n    return <div>\r\n                {postsElements}\r\n    </div>\r\n})\r\n\r\nexport default Posts;\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  addPost,\r\n} from '../../../redux/profile-reducer';\r\nimport { StateDataType } from '../../../redux/store';\r\nimport Posts from './Posts';\r\n\r\n\r\n\r\n\r\nconst mapStateProps = (state:StateDataType) =>{\r\n  return {  \r\n    myPost:state.profilePage.myPost,\r\n    newPost:state.profilePage.newPost,\r\n    posts: state.profilePage.posts,\r\n    profile: state.profilePage.profile\r\n  }\r\n}\r\n\r\n\r\nconst PostsContainer = connect (mapStateProps,{addPost}) (Posts);\r\n\r\nexport default PostsContainer;","import s from '../Profile.module.css';\r\nimport { APIProfileType, updateLargePhoto } from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport { ChangeEvent, MouseEventHandler, useRef } from \"react\";\r\nimport { ProfileStatusWithHooks } from \"./ProfileStatusWithHooks\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ProfileData } from \"./ProfileData\";\r\nimport { Avatar, Card, Col, Row } from \"antd\";\r\nimport { EditOutlined, EllipsisOutlined, SettingOutlined } from \"@ant-design/icons\";\r\nimport { Image } from 'antd';\r\nimport { Button, Space, Badge  } from 'antd';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nimport { PostForm } from '../../Forms/PostForm';\r\nimport PostsContainer from '../Posts/PostsContainer';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport { profile } from 'console';\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: APIProfileType\r\n    status: string\r\n\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n\r\n    const inRef = useRef<HTMLInputElement>(null);\r\n    const { Meta } = Card;\r\n    const dispatch = useDispatch()\r\n\r\n    if (!props.profile) {\r\n        <Preloader />\r\n    }\r\n    const addPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            dispatch(updateLargePhoto(e.target.files[0]))\r\n        }\r\n    }\r\n\r\n    return (<div className={s.wrapper}>\r\n\r\n        <Row >\r\n            <Col xs={{ span: 24, offset: 1 }}\r\n                md={{ span: 24, offset: 1 }}\r\n                lg={{ span: 10, offset: 1 }}\r\n                xl={{ span: 8, offset: 1 }}\r\n            >\r\n                <Card style={{ marginBottom: '10px', boxShadow: 'rgb(0 0 0 / 50%) 5px 6px 10px -5px', textAlign: 'center' }}>\r\n                    <Col><Image src={props.profile.photos.large} style={{ borderRadius: '10px', paddingBottom:10 }} /></Col>\r\n                    <Button type='primary' icon={<DownloadOutlined />} size={'large'} onClick={() => inRef && inRef.current && inRef.current.click()}>Add image</Button>\r\n                    <input\r\n                        ref={inRef}\r\n                        type={'file'}\r\n                        style={{ display: 'none' }}\r\n                        onChange={addPhoto}\r\n                    />\r\n                    </Card>\r\n                    <Card hoverable style={{ marginBottom: '10px', boxShadow: 'rgb(0 0 0 / 50%) 5px 6px 10px -5px' }}><ProfileStatusWithHooks status={props.status} /></Card>\r\n               \r\n\r\n            </Col>\r\n            <Col xs={{ span: 24, offset: 1 }}\r\n                md={{ span: 24, offset: 1 }}\r\n                lg={{ span: 12, offset: 1 }}\r\n                xl={{ span: 14, offset: 1 }}\r\n\r\n            >\r\n                <ProfileData {...props.profile} />\r\n                <Card style={{ boxShadow: 'rgb(0 0 0 / 50%) -6px 5px 10px -5px', marginBottom: '10px' }} hoverable>\r\n                    <PostForm />\r\n                </Card>\r\n            </Col>\r\n\r\n        </Row>\r\n        {props.profile.userId === 21095 && <Row>\r\n            <Col xs={{ span: 24, offset: 1 }}\r\n                md={{ span: 18, offset: 1 }}\r\n                lg={{ span: 10, offset: 1 }}\r\n                xl={{ span: 8, offset: 1 }}\r\n\r\n            >\r\n                <Card title='Friends' className={s.avatarCard}>\r\n                    <Row align='middle' justify='center'>\r\n                    <Col xs={{ span: 3, offset: 1 }}\r\n                        md={{ span: 3, offset: 1 }}\r\n                        lg={{ span: 10, offset: 1 }}\r\n                        xl={{ span: 7, offset: 1 }}>\r\n                            <Avatar size={80} src=\"https://joeschmoe.io/api/v1/random\" />\r\n                            <span>Friend</span>\r\n                    </Col>\r\n                    <Col xs={{ span: 3, offset: 1 }}\r\n                        md={{ span: 3, offset: 1 }}\r\n                        lg={{ span: 10, offset: 1 }}\r\n                        xl={{ span: 7, offset: 1 }}>\r\n                            <Avatar size={80} src=\"https://joeschmoe.io/api/v1/random\" />\r\n                            <span>Friend</span>\r\n                    </Col>\r\n                    <Col xs={{ span: 3, offset: 1 }}\r\n                        md={{ span: 3, offset: 1 }}\r\n                        lg={{ span: 10, offset: 1 }}\r\n                        xl={{ span: 7, offset: 1 }}>\r\n                            <Avatar size={80} src=\"https://joeschmoe.io/api/v1/random\" />\r\n                            <span>Friend</span>\r\n                    </Col>\r\n                    <Col xs={{ span: 3, offset: 1 }}\r\n                        md={{ span: 3, offset: 1 }}\r\n                        lg={{ span: 10, offset: 1 }}\r\n                        xl={{ span: 7, offset: 1 }}>\r\n                            <Avatar size={80} src=\"https://joeschmoe.io/api/v1/random\" />\r\n                            <span>Friend</span>\r\n                    </Col>\r\n                    <Col xs={{ span: 3, offset: 1 }}\r\n                        md={{ span: 3, offset: 1 }}\r\n                        lg={{ span: 10, offset: 1 }}\r\n                        xl={{ span: 7, offset: 1 }}>\r\n                            <Avatar size={80} src=\"https://joeschmoe.io/api/v1/random\" />\r\n                            <span>Friend</span>\r\n                    </Col>\r\n                    <Col xs={{ span: 3, offset: 1 }}\r\n                        md={{ span: 3, offset: 1 }}\r\n                        lg={{ span: 10, offset: 1 }}\r\n                        xl={{ span: 7, offset: 1 }}>\r\n                            <Badge count={1}>\r\n                            <Avatar size={80} src=\"https://joeschmoe.io/api/v1/random\" />\r\n                            </Badge>\r\n                            <span>Friend</span>\r\n                    </Col>\r\n                    </Row>\r\n                </Card>\r\n            </Col>\r\n            <Col xs={{ span: 24, offset: 1 }}\r\n                md={{ span: 24, offset: 1 }}\r\n                lg={{ span: 12, offset: 1 }}\r\n                xl={{ span: 14, offset: 1 }}>\r\n                <PostsContainer />\r\n            </Col>\r\n        </Row>}\r\n    </div>)\r\n\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport PostsContainer from './Posts/PostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport { getProfile, getStatus } from '../../redux/profile-reducer';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useAppSelector } from \"../../redux/redux-store\";\r\nimport {\r\n  selectIsAuth,\r\n  selectMainUserId,\r\n  selectProfile,\r\n  selectProfileStatus\r\n} from \"../../utilits/selectors/profile-selector\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport { EditOutlined, EllipsisOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport { Space, Card } from 'antd';\r\n\r\n\r\n\r\n\r\n\r\nconst Profile = () => {\r\n\r\n\r\n\r\n  const dispatch = useDispatch()\r\n  const isAuth = useAppSelector(selectIsAuth)\r\n  const profile = useAppSelector(selectProfile)\r\n  const status = useAppSelector(selectProfileStatus)\r\n  const mainUserId = useAppSelector(selectMainUserId)\r\n  let { userId }: any = useParams()\r\n\r\n  useEffect(() => {\r\n    if (isAuth) {\r\n      if (!userId) {\r\n        userId = mainUserId\r\n      }\r\n      dispatch(getProfile(userId))\r\n      dispatch(getStatus(userId))\r\n    }\r\n  }, [userId])\r\n\r\n  if (!isAuth) {\r\n    return <Redirect to={'/login'} />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Space direction=\"vertical\" size=\"middle\" style={{ display: 'flex' }} >\r\n        <ProfileInfo profile={profile} status={status} />\r\n        \r\n      </Space>\r\n    </div>)\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { WidgetsType } from '../../../../redux/store';\r\nimport s from './Widget.module.css'\r\n\r\n\r\n\r\nconst Widget = (props: WidgetsType) => {\r\n    return (\r\n        <img src={props.src}/>\r\n        )\r\n}\r\n\r\nexport default Widget;","import React from 'react';\r\nimport Widget from './Widget/Widget';\r\nimport s from './Widgets.module.css'\r\n\r\n\r\ntype WidgetsPropsType = {\r\n    smallPhoto: string\r\n}\r\n\r\nconst Widgets = (props:WidgetsPropsType) => {\r\n    return (\r\n        <div className={s.widgets}>\r\n             <Widget src={props.smallPhoto}/> \r\n        </div>\r\n    )\r\n    }\r\nexport default Widgets;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Header.module.css'\r\nimport Logo from './Logo/Logo';\r\nimport Search from './Search/Search';\r\nimport Widgets from './Widgets/Widgets';\r\nimport {useAppSelector} from \"../../redux/redux-store\";\r\nimport {selectIsAuth, selectLogin, selectSmallPhoto} from \"../../utilits/selectors/profile-selector\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setLogOut} from '../../redux/auth-reducer';\r\nimport {Button, Col, Layout, Row} from \"antd\";\r\n\r\nexport const HeaderRC = () => {\r\n    const {Header} = Layout;\r\n\r\n    const dispatch = useDispatch()\r\n    const login = useAppSelector(selectLogin)\r\n    const isAuth = useAppSelector(selectIsAuth)\r\n    const smallPhoto = useAppSelector(selectSmallPhoto)\r\n\r\n    const logOut = () => {\r\n        dispatch(setLogOut())\r\n    }\r\n\r\n\r\n    return (\r\n        <Header style={{padding: 0, boxShadow: 'rgb(0 0 0 / 50%) -5px 8px 10px -5px', position:'fixed', right:0, zIndex:20, minWidth:300, textAlign:'center',borderRadius: 10, margin:5}}>\r\n                {isAuth ? <Row>\r\n                        <Col span={8}>{login}</Col>\r\n                        <Col span={8}> <Widgets smallPhoto={smallPhoto}/></Col>\r\n                        <Col span={8}><Button type='primary' onClick={logOut}>Log out</Button></Col>\r\n                    </Row>\r\n                    : <Col span={24}><NavLink to={'/login'}>Login</NavLink></Col>}\r\n\r\n        </Header>\r\n    )\r\n\r\n\r\n    // <header className={s.header}>\r\n    //     <Logo />\r\n    //     <Search />\r\n    //     {isAuth ?\r\n    //         <div className={s.widgets}>\r\n    //             {login}\r\n    //             <Widgets smallPhoto={smallPhoto} />\r\n    //             <button onClick={logOut}>Log out</button>\r\n    //         </div>\r\n    //         : <NavLink to={'/login'}>Login</NavLink>}\r\n    //\r\n    // </header>\r\n}\r\n","import s from './Paginator.module.css'\r\nimport {useEffect, useState} from \"react\";\r\nimport cn from 'classnames';\r\n\r\ntype PaginatorPropsType = {\r\n    totalItemsCounter: number\r\n    pageSize: number\r\n    currentPage: number\r\n    portionSize?: number\r\n    onPageClick: (currentPage: number) => void\r\n\r\n}\r\n\r\n\r\nexport const Paginator = ({\r\n                              totalItemsCounter,\r\n                              pageSize,\r\n                              currentPage,\r\n                              onPageClick,\r\n                              portionSize = 10\r\n                          }: PaginatorPropsType) => {\r\n\r\n    const pagesCount = Math.ceil(totalItemsCounter / pageSize)\r\n    const pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pagesCount / portionSize)\r\n    const [portionNumber, setPortionNumber] = useState(1)\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    useEffect(() => {\r\n        setPortionNumber(Math.ceil(currentPage / portionSize))\r\n    }, [currentPage, portionSize])\r\n\r\n    return (\r\n        <div>\r\n            {portionNumber > 1 && <button onClick={()=> setPortionNumber(portionNumber -1 )}>Prev</button>}\r\n                {pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map(p => <span className={currentPage === p ? cn(s.selected, s.page) : s.page}\r\n                              onClick={() => onPageClick(p)}>{p}</span> )}\r\n            {portionNumber < portionCount && <button onClick={()=> setPortionNumber(portionNumber +1 )}>Next</button>}\r\n        </div>)\r\n}","export default __webpack_public_path__ + \"static/media/user.3b87c899.png\";","import s from './Users.module.css'\r\nimport * as axios from 'axios'\r\nimport userPhoto from './../../assets/images/user.png'\r\nimport React from \"react\";\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { bool } from \"yup\";\r\nimport { Paginator } from '../common/Paginator/Paginator';\r\nimport { NewUsersType } from './Users';\r\nimport {getFollow, getUnFollow } from '../../redux/users-reducer';\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype UserPropsType = {\r\n    user: NewUsersType\r\n    followInProgress: Array<number>\r\n}\r\n\r\n\r\nexport const User = ({user,followInProgress }: UserPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.items}>\r\n                <NavLink to={'/profile/' + user.id}>\r\n                    <img className={s.img} src={user.photos.small != null ? user.photos.small : userPhoto} />\r\n                </NavLink>\r\n                {user.followed\r\n                    ? <button disabled={followInProgress.some(id => id === user.id)} onClick={() => {\r\n                        dispatch(getUnFollow(user.id))\r\n\r\n                    }}>Unfollow</button>\r\n                    : <button disabled={followInProgress.some(id => id === user.id)} onClick={() => {\r\n                        dispatch(getFollow(user.id))\r\n\r\n                    }}>Follow</button>}\r\n\r\n            </div>\r\n            <div className={s.info}>\r\n                <div>{user.name}</div>\r\n                <div>{user.status}</div>\r\n\r\n            </div>\r\n\r\n        </div>)\r\n}","import {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {createSelector} from 'reselect'\r\n\r\nexport const getUser = (state:AppRootStateType)=> {\r\n    return state.users.users\r\n}\r\n\r\n// export const getUserSelector = createSelector (getUser, (users)=> { //example of selector with reselect\r\n//     return users.filter((u: any)=> u)\r\n// })\r\n\r\nexport const getPageSize = (state:AppRootStateType)=> {\r\n    return state.users.pageSize\r\n}\r\n\r\nexport const getTotalUserCounter = (state:AppRootStateType)=> {\r\n    return state.users.totalUserCounter\r\n}\r\n\r\nexport const getCurrentPage = (state:AppRootStateType)=> {\r\n    return state.users.currentPage\r\n}\r\n\r\nexport const getIsFetchingData = (state:AppRootStateType)=> {\r\n    return state.users.isFetching\r\n}\r\n\r\nexport const getFollowInProgressData = (state:AppRootStateType)=> {\r\n    return state.users.followInProgress\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { Paginator } from '../common/Paginator/Paginator';\r\nimport { User } from './User';\r\nimport {\r\n    getCurrentPage, getFollowInProgressData,\r\n    getIsFetchingData,\r\n    getPageSize,\r\n    getTotalUserCounter,\r\n    getUser\r\n} from \"../../utilits/selectors/user-selector\";\r\nimport {useAppSelector} from \"../../redux/redux-store\";\r\nimport {getPage, getUsers } from '../../redux/users-reducer';\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type NewUsersType = {\r\n    id: number;\r\n    name: string;\r\n    photos: PhotosType\r\n    uniqueUrlName: string\r\n    status: string\r\n    followed: boolean\r\n}\r\n\r\n\r\nconst Users = () => {\r\n        const dispatch = useDispatch()\r\n        const users = useAppSelector(getUser)\r\n        const pageSize = useAppSelector(getPageSize)\r\n        const totalUserCounter = useAppSelector(getTotalUserCounter)\r\n        const currentPage = useAppSelector(getCurrentPage)\r\n        const isFetching = useAppSelector(getIsFetchingData)\r\n        const followInProgress = useAppSelector(getFollowInProgressData)\r\n\r\n    useEffect(()=> {\r\n        dispatch(getUsers(currentPage, pageSize))\r\n    }, [])\r\n\r\n    const onPageClick = (currentPage: number) => {\r\n        dispatch(getPage(currentPage, pageSize))\r\n    }\r\n\r\n    return (<div>\r\n        {isFetching ? <Preloader /> : null}\r\n        <Paginator pageSize={pageSize} totalItemsCounter={totalUserCounter} currentPage={currentPage} onPageClick={onPageClick} />\r\n        {users.map(u => <User key={u.id} user={u} followInProgress={followInProgress} />\r\n        )}\r\n    </div >\r\n    )\r\n}\r\n\r\nexport default Users;","import React, { Suspense } from 'react';\r\n// import './App.css';\r\nimport NavbarLeft from './components/NavbarLeft/NavbarLeft';\r\nimport NavbarRight from './components/NavbarRight/NavbarRight';\r\nimport { NavLink, Redirect, Route, Switch, withRouter } from 'react-router-dom'\r\nimport { DialogsDataType } from './redux/store';\r\nimport Login from './components/Login/Login';\r\nimport { connect, ConnectedComponent } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { initializedTC } from './redux/app-reducer';\r\nimport { AppRootStateType } from './redux/redux-store';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport Profile from \"./components/Profile/Profile\";\r\nimport { HeaderRC } from './components/Header/Header';\r\nimport Users from \"./components/Users/Users\";\r\nimport 'antd/dist/antd.css';\r\nimport './App.less'\r\nimport { Button, Col, Layout, Menu, Row } from \"antd\";\r\nimport { BarChartOutlined, UploadOutlined, UserOutlined, VideoCameraOutlined } from \"@ant-design/icons\";\r\nimport Navigation from \"./components/NavbarLeft/Navigations/Navigation/Navigation\";\r\nimport logo from './assets/images/lapa-logo.png'\r\n\r\ntype AppPropsType = {\r\n    initializedTC: () => void\r\n    friends: DialogsDataType[]\r\n    initialized: boolean\r\n}\r\n\r\nconst Dialogs = React.lazy(() => import('./components/Dialogs/Dialogs'));\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n\r\n    catchAllUnhandledErrors = (event: PromiseRejectionEvent) => {\r\n        alert('Some error')\r\n        console.error(event)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializedTC()\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader />\r\n        }\r\n        const { Header, Content, Footer, Sider } = Layout;\r\n\r\n        return (\r\n\r\n            <Layout hasSider>\r\n                <Sider \r\n                    breakpoint=\"md\"\r\n                    collapsedWidth=\"0\"\r\n                    className='sider'\r\n                >\r\n                    <div className=\"logo\" />\r\n                    <Menu mode=\"inline\" defaultSelectedKeys={['4']}>\r\n                        <Menu.Item key=\"1\" icon={<UserOutlined />}>\r\n                            <NavLink to={'/profile'}>Profile</NavLink>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"2\" icon={<VideoCameraOutlined />}>\r\n                            <NavLink to={'/dialogs'}>Dialogs</NavLink>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"3\" icon={<UploadOutlined />}>\r\n                            <NavLink to={'/users'}>Users</NavLink>\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                </Sider>\r\n\r\n                <Layout className=\"site-layout\">\r\n                    <HeaderRC />\r\n                    <Content style={{ margin: '24px 16px 0', overflow: 'initial' }}>\r\n                        <div className=\"site-layout-background\" style={{ padding: '50px 20px' }}>\r\n                            <Suspense fallback={<Preloader />}>\r\n                                <Switch>\r\n                                    <Route path='/profile/:userId?' render={() => <Profile />} />\r\n                                    <Route path='/dialogs' render={() => <Dialogs />} />\r\n                                    <Route path='/users' render={() => <Users />} />\r\n                                    <Route path='/login' render={() => <Login />} />\r\n                                    <Route path='/' render={() => <Redirect to={'/profile'} />} />\r\n                                    <Route exact path='*' render={() => <div>404 PAGE NOT FOUND</div>} />\r\n                                </Switch>\r\n                            </Suspense>\r\n                        </div>\r\n                    </Content>\r\n                </Layout>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => ({\r\n    friends: state.navbarRight.friends,\r\n    initialized: state.app.initialized\r\n})\r\n\r\nexport default compose<ConnectedComponent<(props: any) => JSX.Element, Omit<any, \"isAuth\" | \"dispatch\">>>(withRouter, connect(mapStateToProps, { initializedTC }))(App)\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/redux-store';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\n  ReactDOM.render(\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n  );\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { v1 } from \"uuid\"\r\nimport { PostsDataType } from \"./store\"\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, UpdateProfileType} from \"../api/profileAPI\";\r\nimport {ThunkType} from \"./redux-store\";\r\n\r\n\r\nexport type ProfileStateType = {\r\n    posts: Array<PostsDataType>;\r\n    profile: APIProfileType\r\n    status:string\r\n}\r\n\r\nexport type APIProfileType = {\r\n    aboutMe: string\r\n    userId: number\r\n    fullName: string\r\n    contacts:{\r\n        facebook?: string\r\n        github?: string\r\n        instagram?: string\r\n        mainLink?: string\r\n        twitter?: string\r\n        vk?: string\r\n        website?: string\r\n        youtube?: string\r\n    }\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nexport type UserProfileACType = ReturnType<typeof setUserProfile>\r\nexport type UserStatusACType = ReturnType<typeof setStatus>\r\nexport type AddPostACType = ReturnType<typeof addPostAC>\r\nexport type UpdatePhotoACType = ReturnType<typeof updatePhoto>\r\nexport type DeletePostACType = ReturnType<typeof deletePostAC>\r\nexport type UpdateProfileACType = ReturnType<typeof updateProfileAC>\r\n\r\nexport type ProfileActionType = UserProfileACType | AddPostACType | UserStatusACType | UpdatePhotoACType | DeletePostACType | UpdateProfileACType\r\n\r\nconst ADD_POST = 'lapa-app/profile-reducer/ADD-POST'\r\nconst DELETE_POST = 'lapa-app/profile-reducer/DELETE-POST'\r\nconst SET_USER_PROFILE = 'lapa-app/profile-reducer/SET_USER_PROFILE'\r\nconst SET_STATUS = 'lapa-app/profile-reducer/SET_STATUS'\r\nconst UPDATE_PHOTO = 'lapa-app/profile-reducer/UPDATE_PHOTO'\r\nconst UPDATE_PROFILE = 'lapa-app/profile-reducer/UPDATE_PROFILE'\r\n\r\nexport const addPostAC = (post:string) => ({ type: ADD_POST, post } as const)\r\nexport const deletePostAC = (postId:string) => ({ type: DELETE_POST, postId } as const)\r\nexport const setUserProfile = (profile: APIProfileType) => ({ type: SET_USER_PROFILE, profile } as const)\r\nexport const setStatus = (status: string) => ({ type: SET_STATUS, status } as const)\r\nexport const updatePhoto = (photo: File)=> ({ type: UPDATE_PHOTO, photo } as const)\r\nexport const updateProfileAC = (profile: UpdateProfileType)=> ({ type: UPDATE_PROFILE, profile } as const)\r\n\r\n\r\nconst initialProfileState:ProfileStateType = {\r\n    posts: [\r\n        { id: v1(), postMessage: \"Hi, I'm Pavel\", likes: 10 },\r\n        { id: v1(), postMessage: \"Let's go to learn a React\", likes: 9 },\r\n        { id: v1(), postMessage: \"Also we need improve our html/css skills\", likes: 11 },\r\n        { id: v1(), postMessage: \"Then we'll learn Redux\", likes: 22 }\r\n    ],\r\n    profile: { \r\n        aboutMe: '', \r\n        userId: 0, \r\n        fullName: '', \r\n        photos: { small: '', large: '' }, \r\n        contacts: {},\r\n        lookingForAJobDescription: '',\r\n        lookingForAJob: false,\r\n    },\r\n    status:'',\r\n}\r\n\r\nexport const profileReducer = (state = initialProfileState, action: ProfileActionType) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: v1(),\r\n                postMessage: action.post,\r\n                likes: 0\r\n            }\r\n            return { ...state, posts: [...state.posts, newPost]}\r\n        }\r\n        case DELETE_POST:{\r\n            return {...state, posts: state.posts.filter(post => post.id !== action.postId)}\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return { ...state, profile: action.profile }\r\n        }\r\n        case SET_STATUS: {\r\n            return { ...state, status: action.status  }\r\n        }\r\n        case UPDATE_PHOTO: {\r\n            return {...state, profile: {...state.profile, photos:action.photo}}\r\n        }\r\n        case UPDATE_PROFILE: {\r\n            return {...state, profile: {...state.profile, ...action.profile}}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getProfile = (profileUserId: number) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n        const response = await profileAPI.getProfile(profileUserId)\r\n            dispatch(setUserProfile(response.data))\r\n    }\r\n}\r\n\r\nexport const getStatus = (profileUserId: number) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n        const response = await profileAPI.getProfileStatus(profileUserId)\r\n            dispatch(setStatus(response.data))\r\n    }\r\n}\r\n\r\nexport const updateStatus = (status: string) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n       const response = await profileAPI.updateStatus(status)\r\n            if (response.data.resultCode === 0){\r\n                dispatch(setStatus(status))\r\n            }\r\n    }\r\n}\r\n\r\nexport const updateLargePhoto = (photo: File) => {\r\n    return async (dispatch: Dispatch<ProfileActionType>) => {\r\n        const response = await profileAPI.updatePhoto(photo)\r\n            if (response.data.resultCode === 0){\r\n                dispatch(updatePhoto(response.data.data.photos))\r\n            }\r\n    }\r\n}\r\n\r\nexport const addPost = (post: string) => {\r\n    return (dispatch: Dispatch<ProfileActionType>) => {\r\n                dispatch(addPostAC(post))\r\n    }\r\n}\r\n\r\nexport const updateProfile = (profile: UpdateProfileType):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await profileAPI.updateProfile(profile)\r\n        if (response.data.resultCode === 0){\r\n            dispatch(updateProfileAC(profile))\r\n            dispatch(getProfile(getState().auth.userId))\r\n        }\r\n    }\r\n}\r\n","import {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {APIProfileType} from \"../../redux/profile-reducer\";\r\n\r\nexport const selectIsAuth = (state:AppRootStateType)=> {\r\n    return state.auth.isAuth\r\n}\r\n\r\nexport const selectMainUserId = (state:AppRootStateType)=> {\r\n    return state.auth.userId\r\n}\r\nexport const selectProfile = (state:AppRootStateType)=> {\r\n    //@ts-ignore\r\n    return state.profilePage.profile\r\n}\r\nexport const selectProfileStatus = (state:AppRootStateType)=> {\r\n    //@ts-ignore\r\n    return state.profilePage.status\r\n}\r\n\r\nexport const selectLogin = (state:AppRootStateType)=> {\r\n    return state.auth.login\r\n}\r\n\r\nexport const selectSmallPhoto = (state:AppRootStateType)=> {\r\n    return state.auth.photos.small\r\n}\r\n\r\n","import {getCaptchaUrl} from './login-reducer';\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/usersAPI\";\r\nimport {setCurrentPage, setUsers, toggleIsFetching, UsersActionType} from \"./users-reducer\";\r\nimport {authAPI} from \"../api/authAPI\";\r\nimport {profileAPI} from \"../api/profileAPI\";\r\nimport {ThunkType} from \"./redux-store\";\r\nimport {ThunkDispatch} from 'redux-thunk';\r\n\r\nconst SET_AUTH_DATA = 'lapa-app/auth-reducer/SET_AUTH_DATA'\r\nconst SET_USER_PHOTO = 'lapa-app/auth-reducer/SET_USER_PHOTO'\r\nconst SET_AUTH_CHANGE = 'lapa-app/auth-reducer/SET_AUTH_CHANGE'\r\nconst GET_LOGIN_ERROR = 'lapa-app/auth-reducer/GET_LOGIN_ERROR'\r\n\r\n\r\nexport type AuthActionType = AuthDataActionType | UserPhotoActionType | AuthChangeActionType | LoginErrorDataActionType\r\n\r\nexport type LoginErrorDataActionType = ReturnType<typeof getLoginError>\r\nexport type AuthDataActionType = ReturnType<typeof setAuthData>\r\nexport type UserPhotoActionType = ReturnType<typeof setUserPhoto>\r\nexport type AuthChangeActionType = ReturnType<typeof setAuthChange>\r\n\r\nexport type AuthDataType = {\r\n    userId: number\r\n    login: string\r\n    email: string\r\n    isAuth: boolean\r\n    photos: {\r\n        large: string\r\n        small: string\r\n    }\r\n    errorMessage?: string\r\n}\r\n\r\n\r\nexport const setAuthData = (userId: number, login: string, email: string) => ({\r\n    type: SET_AUTH_DATA, data: {userId, login, email}\r\n} as const)\r\nexport const setUserPhoto = (photos: { large: string, small: string }) => ({type: SET_USER_PHOTO, photos} as const)\r\nexport const setAuthChange = (isAuth: boolean) => ({type: SET_AUTH_CHANGE, isAuth} as const)\r\nexport const getLoginError = (message: string) => ({type: GET_LOGIN_ERROR, message} as const)\r\n\r\n\r\nconst initialProfileState = {\r\n    userId: 0,\r\n    login: '',\r\n    email: '',\r\n    isAuth: false,\r\n    photos: {\r\n        large: '',\r\n        small: ''\r\n    }\r\n}\r\n\r\nexport const authReducer = (state: AuthDataType = initialProfileState, action: AuthActionType) => {\r\n    switch (action.type) {\r\n        case SET_AUTH_DATA: {\r\n            return {...state, ...action.data, isAuth: true}\r\n        }\r\n        case SET_USER_PHOTO: {\r\n            return {...state, photos: {...action.photos}}\r\n\r\n        }\r\n        case SET_AUTH_CHANGE: {\r\n            return {...state, isAuth: action.isAuth}\r\n        }\r\n        case GET_LOGIN_ERROR: {\r\n            return {...state, errorMessage: action.message}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const authMe = (): ThunkType => {\r\n    return async (dispatch: Dispatch<AuthActionType>) => {\r\n        try {\r\n            const data = await authAPI.getAuth();\r\n            if (data.resultCode === 0) {\r\n                const {id, login, email} = data.data\r\n                dispatch(setAuthData(id, login, email))\r\n                const response = await profileAPI.getProfile(id)\r\n                dispatch(setUserPhoto(response.data.photos))\r\n            }\r\n            return data\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport const setAuth = (email: string, password: string, rememberMe: boolean, captcha?: string): ThunkType => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const res = await authAPI.logining({email, password, rememberMe, captcha})\r\n            if (res.data.data.userId) {\r\n                dispatch(setAuthChange(true))\r\n            } else {\r\n                if (res.data.resultCode === 10) {\r\n                    dispatch(getCaptchaUrl())\r\n                }\r\n                dispatch(getLoginError(res.data.messages[0]))\r\n            }\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport const setLogOut = (): ThunkType => {\r\n    return async (dispatch: Dispatch<AuthActionType>) => {\r\n        try {\r\n            const res = await authAPI.setUnlogging()\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAuthChange(false))\r\n            }\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n}\r\n","import axios from \"axios\";\r\nimport {Items} from \"../components/Users/UsersContainer\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials:true,\r\n    baseURL:`https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\"API-KEY\" : \"ed0fa8fa-ddbb-478a-b370-1f41a9c286be\"}\r\n})\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers (currentPage = 1, pageSize = 10)  {\r\n        return instance.get<Items>(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    },\r\n    setFollow (id:number) {\r\n        return instance.post(`follow/${id}`).then(response => response.data)\r\n    },\r\n    setUnFollow (id:number) {\r\n        return instance.delete(`follow/${id}`).then(response => response.data)\r\n    }\r\n}\r\n","import {NewUsersType} from \"../components/Users/Users\"\r\n\r\nimport {UsersStateType} from \"./store\"\r\nimport {usersAPI} from \"../api/usersAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkType} from \"./redux-store\";\r\n\r\nconst IS_FOLLOWING = 'lapa-app/users-reducer/IS_FOLLOWING'\r\nconst SET_USERS = 'lapa-app/users-reducer/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'lapa-app/users-reducer/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'lapa-app/users-reducer/SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'lapa-app/users-reducer/TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'lapa-app/users-reducer/TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\n//export type FollowActionCreatorType = ReturnType<typeof followActionCreator> + добавляем as const в сам AC\r\n\r\nexport type FollowACType = ReturnType<typeof isFollowing>\r\nexport type SetUsersACType = ReturnType<typeof setUsers>\r\nexport type SetCurrentPageACType = ReturnType<typeof setCurrentPage>\r\nexport type SetTotalUsersCountACType = ReturnType<typeof setTotalUsersCount>\r\nexport type ToggleIsFetchingACType = ReturnType<typeof toggleIsFetching>\r\nexport type ToggleIsFollowingProgress = ReturnType<typeof toggleIsFollowingProgress>\r\n\r\nexport type UsersActionType =\r\n    FollowACType\r\n    | SetUsersACType\r\n    | SetCurrentPageACType\r\n    | SetTotalUsersCountACType\r\n    | ToggleIsFetchingACType\r\n    | ToggleIsFollowingProgress\r\n\r\nconst initialUsersState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUserCounter: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followInProgress: []\r\n}\r\n\r\nexport const usersReducer = (state: UsersStateType = initialUsersState, action: UsersActionType) => {\r\n    switch (action.type) {\r\n        case IS_FOLLOWING : {\r\n            return {...state, users: state.users.map(u => u.id === action.userID ? {...u, followed: action.follow} : u)}\r\n        }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUserCounter: action.totalCount}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followInProgress: action.isFetching\r\n                    ? [...state.followInProgress, action.userId]\r\n                    : state.followInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const isFollowing = (userID: number, follow: boolean) => ({type: IS_FOLLOWING, userID, follow} as const)\r\nexport const setUsers = (users: Array<NewUsersType>) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setTotalUsersCount = (totalCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalCount: totalCount\r\n} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n} as const)\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId\r\n} as const)\r\n\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => {\r\n    return async (dispatch: Dispatch<UsersActionType>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        const data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nexport const getPage = (currentPage: number, pageSize: number): ThunkType => {\r\n    return async (dispatch: Dispatch<UsersActionType>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(currentPage))\r\n        const data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n    }\r\n}\r\nconst followUnfollow = async (dispatch: Dispatch,\r\n                              userId: number,\r\n                              apiMethod: (id: number) => Promise<any>,\r\n                              follow: boolean) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n    const data = await apiMethod(userId)\r\n    if (data.resultCode === 0) {\r\n        dispatch(isFollowing(userId, follow))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\n\r\nexport const getFollow = (userId: number): ThunkType => {\r\n    return async (dispatch: Dispatch) => {\r\n        const apiMethod = usersAPI.setFollow.bind(usersAPI)\r\n\r\n        await followUnfollow(dispatch, userId, apiMethod, true)\r\n    }\r\n}\r\n\r\nexport const getUnFollow = (userId: number): ThunkType => {\r\n    return async (dispatch: Dispatch) => {\r\n        const apiMethod = usersAPI.setUnFollow.bind(usersAPI)\r\n\r\n        await followUnfollow(dispatch, userId, apiMethod, false)\r\n    }\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials:true,\r\n    baseURL:`https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\"API-KEY\" : \"ed0fa8fa-ddbb-478a-b370-1f41a9c286be\"}\r\n})\r\n\r\n\r\nexport const profileAPI = {\r\n    getProfile (userId:number){\r\n        return instance.get(`profile/${userId}`)\r\n    },\r\n    getProfileStatus (userId:number){\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus (status: string){\r\n        return instance.put(`profile/status`, {status})\r\n    },\r\n    updatePhoto (image: File){\r\n        debugger\r\n        const formData = new FormData()\r\n        formData.append('image', image)\r\n        return instance.put(`profile/photo`, formData , {headers:{\r\n            \"Content-type\": \"multipart/form-data\"\r\n        }})\r\n    },\r\n    updateProfile (profile: UpdateProfileType){\r\n        return instance.put(`profile`, profile)\r\n    },\r\n\r\n}\r\n\r\nexport type UpdateProfileType = {\r\n    aboutMe: string\r\n    userId: number\r\n    fullName: string\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    contacts:{\r\n        facebook?: string\r\n        github?: string\r\n        instagram?: string\r\n        mainLink?: string\r\n        twitter?: string\r\n        vk?: string\r\n        website?: string\r\n        youtube?: string\r\n    }\r\n}","\r\nimport { Dispatch } from \"redux\"\r\nimport { authAPI } from \"../api/authAPI\"\r\nimport { ThunkType } from \"./redux-store\"\r\n\r\nconst SET_LOGIN = 'lapa-app/login-reducer/SET_LOGIN'\r\nconst SET_CAPTCHA = 'lapa-app/login-reducer/SET_CAPTCHA'\r\n\r\n\r\nexport type LoginDataActionType = ReturnType<typeof setLoginData>\r\nexport type CaptchaActionType = ReturnType<typeof setCaptchaUrl>\r\n\r\nexport type LoginActionType = LoginDataActionType | CaptchaActionType\r\n\r\nexport type LoginType = {\r\n    data: {\r\n        login: string,\r\n        password: string\r\n    }\r\n    captchaUrl: string\r\n}\r\n\r\nconst initialProfileState = {\r\n    data: {\r\n        login:'',\r\n        password:'',\r\n    },\r\n    captchaUrl:''\r\n    \r\n}\r\n\r\nexport const setLoginData = (data: {login:string, password:string}) => ({ type: SET_LOGIN, data} as const)\r\nexport const setCaptchaUrl = (captchaUrl: string) => ({ type: SET_CAPTCHA, captchaUrl} as const)\r\n\r\nexport const loginReducer = (state:LoginType  = initialProfileState, action:LoginActionType ) => {\r\n    switch (action.type) {\r\n        case SET_LOGIN: {\r\n            return { ...state, data:action.data}\r\n        }\r\n        case SET_CAPTCHA:{\r\n            return {...state,captchaUrl: action.captchaUrl}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = ():ThunkType => {\r\n    return async (dispatch: Dispatch) => {\r\n        try{\r\n       const res = await authAPI.getCaptcha()\r\n            if (res.data.url) {\r\n                dispatch(setCaptchaUrl(res.data.url))\r\n            }\r\n        }\r\n        catch (error){\r\n            \r\n        }\r\n    }\r\n}\r\n\r\n"],"sourceRoot":""}